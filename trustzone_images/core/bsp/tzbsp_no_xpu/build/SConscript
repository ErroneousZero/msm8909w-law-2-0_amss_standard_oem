#===============================================================================
#
# TZBSP_NO_XPU build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2010 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/bsp/tzbsp_no_xpu/build/SConscript#1 $
#  $DateTime: 2016/06/17 14:31:11 $
#  $Author: pwbldsvc $
#  $Change: 10727476 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/15/13   jct     changes for image_version feature
# 09/12/11   nkazi   Changes to support Version Rollback prevention and qfprom
#                    drivers in TZ.
# 04/18/11   jct     Generate different scl files depending on build flavor
# 04/17/11   jct     Added flags for different build flavors
# 04/21/10   ejt     Removed BOOT environment variables
# 02/23/10   sl      First cut of Scons build script for TZBSP
#===============================================================================
import os
import string
import re
Import('env')
env = env.Clone()

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias - First alias is always the target then the other possibles aliases
aliases = [
   'tzbsp_no_xpu', 'genboot', 'boot', 'boot_arm11',
   'amss', 'amss_arm11',
   'arm11', 'all'
]

#----------------------------------------------------------------------------
# Enable Stack protection
#----------------------------------------------------------------------------
env.Append(CCFLAGS = " --protect_stack ")


env.InitImageVars(
   alias_list=aliases,           # aliases
   proc='cortexA7',              # proc
   config='apps',                # config type, proc_name
   plat='boot',
   target='TZ_IMG_${BUILD_ID}',# target (elf, image file name)
   build_tags = ['APPS_PROC','TZOS_IMAGE','DAL_DEVCFG_IMG','IMAGE_TREE_VERSION_AUTO_GENERATE'],
   #build_tags = ['APPS_PROC','TZOS_IMAGE','DAL_DEVCFG_IMG'],
   tools = ['${BUILD_ROOT}/core/bsp/build/scripts/bin_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/hex_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py',
            'buildspec_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/kernel_builders.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
            '${BUILD_ROOT}/tools/build/scons/sectools/sectools_builder.py',]
)

if not env.CheckAlias():
   Return()

intersect_list = list(set( SConscript.BuildTargets) & set(aliases))
if len(intersect_list) == 0:
   Return()

if len(intersect_list) != 1:
   Return()

# Set this to the correct image_name
image_name = intersect_list[0]

if env['MSM_ID'] in ['8084']:
  build_cfg_file = "tzbsp_no_xpu_8084.cfg"
if env['MSM_ID'] in ['8092']:
  build_cfg_file = "tzbsp_no_xpu_8092.cfg"
if env['MSM_ID'] in ['8909','8909w']:
  build_cfg_file = "tzbsp_no_xpu_8909.cfg"
else:
  build_cfg_file = "tzbsp_no_xpu.cfg"

#------------------------------------------------------------------------------
# Init default values for this PROC/Image
#------------------------------------------------------------------------------
env.Replace(USES_RUMI = 'yes')
env.Replace(USES_DM = 'yes')
# enable devcfg feature
env.Replace(USES_DEVCFG = True)

#===============================================================================
# TZBSP_NO_XPU build rules
#===============================================================================

#------------------------------------------------------------------------------
# Configure and load in uses and path variables,
#------------------------------------------------------------------------------
env.InitBuildConfig()

#------------------------------------------------------------------------------
# Configure default feature values
#------------------------------------------------------------------------------
path = env['BUILD_ROOT']+'/core/bsp/tzbsp_no_xpu/build/'+ build_cfg_file
vars = Variables()
if not os.path.isfile(path):
 raise Exception("Path %s must be a file" % path)
file = open(path)
try:
  lines = file.readlines()
  for line in lines:
    # delete all whitespace
    re.sub(r'\s', '', line)
    # ignore all comments
    if line.find("#") == 0:
      continue
    ay = line.split("=")
    if (len(ay) <> 2):
      raise Exception("Unknown option: "  + line)
    vars.Add(BoolVariable(ay[0], ay[0], int(ay[1])))
finally:
    file.close()
vars.Update(env)

# set defaults for values if they're not in the .cfg file
if 'tzbsp_with_pil' not in env:
  vars.Add(BoolVariable('tzbsp_with_pil',        'pil',           1))
if 'tzbsp_with_secboot' not in env:
  vars.Add(BoolVariable('tzbsp_with_secboot',    'secboot',       1))
if 'tzbsp_with_mmu' not in env:
  vars.Add(BoolVariable('tzbsp_with_mmu',        'mmu',           0))
if 'tzbsp_with_ce' not in env:
  vars.Add(BoolVariable('tzbsp_with_ce',         'crypto',        1))
if 'tzbsp_with_ssd' not in env:
  vars.Add(BoolVariable('tzbsp_with_ssd',        'ssd',           1))
if 'tzbsp_with_msmdcvs' not in env:
  vars.Add(BoolVariable('tzbsp_with_msmdcvs',    'msmdcvs',       1))

if 'tzbsp_no_xpu' not in env:
  vars.Add(BoolVariable('tzbsp_no_xpu',          'no pil xpus',   0))
if 'tzbsp_with_pil_timing' not in env:
  vars.Add(BoolVariable('tzbsp_with_pil_timing', 'pil profiling', 0))
if 'tzbsp_with_test_svc' not in env:
  vars.Add(BoolVariable('tzbsp_with_test_svc',   'unit tests',    1))
vars.Update(env)

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('arm', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.LoadToolScript('apps_defs', toolpath = ['${BUILD_SCRIPTS_ROOT}'])

#---------------------------------------------------------------------------
# Override some of the bootloader settings so we build "almost" like a
# bootloader
#---------------------------------------------------------------------------
# TODO The optimization for size is removed, because it generates Thumb-2
# instruction stm r0, {r6, r7, r13}. This instruction is illegal as it cannot
# contain r13 in the register list. Most likely this is due to a compiler bug
# --> size optimization cannot be enabled until the compiler is fixed.
env.Replace(ARMCC_OPT = "${ARM_OPT_SPACE} ${ARM_OPT_2}")

#------------------------------------------------------------------------------
# Sdd extension flags for TZBSP
#------------------------------------------------------------------------------
if env['BUILD_VER'] == "":
   env.Replace(BUILD_VER = '0')

env.Append(CPPDEFINES = [
   "BUILD_BOOT_CHAIN",
   "BUILD_BOOT_CHAIN_SPBL",
   "BOOT_LOADER",
   "BOOT_WATCHDOG_DISABLED",
   "FLASH_NAND_SINGLE_THREADED",
   "FLASH_CLIENT_BOOT",
   "FLASH_USE_DM_PAGES",
   "FEATURE_HS_USB_BASIC",
   "BOOT_SBL_H=\\\"boot_comdef.h\\\"",
   "BOOT_CUSTSBL_H=\\\"custsbl.h\\\"",
   "BOOT_MODULE_BUILD_VERSION=" + env['BUILD_VER'],
   "FEATURE_USES_TURBO",
   "RUMIBUILD",
   "FEATURE_NO_XPU",
   "DAL_CONFIG_IMAGE_TZ",
   "DAL_CONFIG_HLOS_ENV=DALPROP_HLOS_ENV_LINUX"
])

if env['tzbsp_with_msmdcvs'] == 1:
  env.Append(CPPDEFINES = "FEATURE_MSMDCVS")

if 'tzbsp_virtio' in env and env['tzbsp_virtio'] == 1:
  env.Append(CPPDEFINES = ["TZBSP_VIRTIO"])

if env['MSM_ID'] in ['9x25']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x9625",
   ])
elif env['MSM_ID'] in ['9x35']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x9635",
   ])
elif env['MSM_ID'] in ['8x26']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x8626",
   ])
elif env['MSM_ID'] in ['8x10']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x8626",
      "FEATURE_8x10_SECBOOT_FUSE",
   ])
elif env['MSM_ID'] in ['8092']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x${MSM_ID}",
      "FEATURE_8092_SECBOOT_FUSE",
   ])
elif env['MSM_ID'] in ['8916']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x${MSM_ID}",
      "FIXME_8916",
   ])
elif env['MSM_ID'] in ['8936']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x${MSM_ID}",
      "FIXME_8916",
      "FIXME_8936",
   ])
elif env['MSM_ID'] in ['8909','8909w']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x8909",
      "FIXME_8916",
      "FIXME_8909",      
   ])
elif env['MSM_ID'] in ['9x07']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x${9607}",
      "FIXME_8916",
      "FIXME_8909",      
   ])
elif env['MSM_ID'] in ['9x09']:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x9609",
      "FIXME_8916",
      "TZBSP_NO_ABT",
   ])
else:
   env.Append(CPPDEFINES = [
      "DAL_CONFIG_TARGET_ID=0x${MSM_ID}",
   ])

if env['tzbsp_no_xpu'] == 1:
   env.Append(CPPDEFINES = [
      "TZBSP_NO_ABT",
   ])

if  'tzbsp_with_tbase' in env and  env['tzbsp_with_tbase'] == 1:
   env.Append(CPPDEFINES = "TZBSP_WITH_TBASE") 
#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# Regular build steps (no filter) is build everything, once a user starts
# using filters we have to make decisions depending on user input.
#
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units,
# etc.  This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.

do_local_files = True
do_link = True
do_post_link = True

# Get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing based on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False

#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------
core_libs, core_objs = env.LoadAUSoftwareUnits('core')
tzbsp_no_xpu_units = [core_objs, core_libs]

build_libs, build_objs = env.LoadAUSoftwareUnits('build')
tzbsp_no_xpu_units += [build_objs, build_libs]

if env.get('ARMTOOLSVERSION', 0) >= 4:
   arm_libs = [
      # ARM Libs (this need to be last, otherwise linker will use ARMlibs functions
      # which we want to override)
      File(env.SubstRealPath('${ARMLIB}/armlib/c_5.l')),
      File(env.SubstRealPath('${ARMLIB}/armlib/g_5s.l')),
      File(env.SubstRealPath('${ARMLIB}/armlib/m_5s.l'))
   ]
else:
   arm_libs = [
      # ARM Libs (this need to be last, otherwise linker will use ARMlibs functions
      # which we want to override)
      File(env.SubstRealPath('${ARMLIB}/armlib/c_t__un.l')),
      File(env.SubstRealPath('${ARMLIB}/armlib/g_t_p.l')),
      File(env.SubstRealPath('${ARMLIB}/armlib/m_t_pu.l'))
   ]

# Extend core library to include standard libraries
core_libs.extend(arm_libs)

if do_local_files:
   #============================================================================
   # TZBSP_NO_XPU Environment
   #============================================================================
   if env['tzbsp_with_test_svc'] == 1:
      env.Append(CCFLAGS = " -O0 ")
   #----------------------------------------------------------------------------
   # Begin building TZBSP_NO_XPU
   #----------------------------------------------------------------------------
   env.Replace(TARGET_NAME = 'tzbsp_no_xpu')
   env.Replace(FLASH_TYPE = 'sdcc')
   env.Replace(TZBSP_ROOT = '${COREBSP_ROOT}/securemsm/trustzone/qsee')

   #----------------------------------------------------------------------------
   # Generate Scatter Load File (SCL)
   #----------------------------------------------------------------------------
   if env['tzbsp_with_mmu'] == 1:
     tzbsp_no_xpu_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
       '${TZBSP_ROOT}/arch/${CHIPSET}/cfg/mmu/tzbsp_${FLASH_TYPE}.scl')

   else:
     tzbsp_no_xpu_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
       '${TZBSP_ROOT}/arch/${CHIPSET}/cfg/no_mmu/tzbsp_${FLASH_TYPE}.scl')

   tzbsp_no_xpu_units.extend(tzbsp_no_xpu_scl)

if do_link:
   #----------------------------------------------------------------------------
   # Generate TZBSP_NO_XPU ELF
   #----------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']

   tzbsp_no_xpu_elf = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}',
      source=[core_objs, build_objs],
      LIBS=[core_libs, build_libs], LIBPATH=libs_path)

   env.Depends(tzbsp_no_xpu_elf, tzbsp_no_xpu_scl)

   tzbsp_no_xpu_map = env.SideEffect(
      env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map'), tzbsp_no_xpu_elf)
   tzbsp_no_xpu_sym = env.SideEffect(
      env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym'), tzbsp_no_xpu_elf)

   env.Clean(tzbsp_no_xpu_elf, tzbsp_no_xpu_map)
   env.Clean(tzbsp_no_xpu_elf, tzbsp_no_xpu_sym)

if do_post_link:
   #-------------------------------------------------------------------------
   # Modify elf flags to update attributes for shared segments, 
   # DL segments, etc.
   #-------------------------------------------------------------------------
   hashed_elf = env.GenerateCodeHashBuilder(env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}_codehash'), tzbsp_no_xpu_elf)
   env.Clean(tzbsp_no_xpu_elf, hashed_elf)
   env.Depends(hashed_elf, tzbsp_no_xpu_elf)

   #----------------------------------------------------------------------------
   # Generate TZBSP_NO_XPU MBN
   #----------------------------------------------------------------------------
   install_root = env.subst('${MBN_ROOT}')
   install_unsigned_root = env.SectoolGetUnsignedInstallPath(install_base_dir = install_root)
   env.Replace(MBN_FILE = os.path.join(install_unsigned_root, "tzbsp_no_xpu"))
   tzbsp_no_xpu_mbn = env.MbnBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      hashed_elf, MBN_TYPE="elf", IMAGE_TYPE="tzbsp_no_xpu",
      FLASH_TYPE="sdcc", ENABLE_ENCRYPT=True)
   env.Depends(tzbsp_no_xpu_mbn, hashed_elf)

   #----------------------------------------------------------------------------
   # Sectools signing
   #----------------------------------------------------------------------------
   sectools_signed_mbn = env.SectoolBuilder(
            target_base_dir = '${SHORT_BUILDPATH}/tzbsp_no_xpu', 
                    source=tzbsp_no_xpu_mbn,                  
            sign_id="tzbsp_no_xpu",
            msmid = env.subst('${MSM_ID}'),
            sectools_install_base_dir = install_root,  
            install_file_name = "tzbsp_no_xpu.mbn")         
   
   if ARGUMENTS.get('with_mbn') == "1":
      install_target_mbn = env.InstallAs('${MBN_ROOT}/tzbsp_no_xpu.mbn', tzbsp_no_xpu_mbn)
      tzbsp_no_xpu_units = env.Alias('arm11_tzbsp_no_xpu_units', [ install_target_mbn ])
  


   #----------------------------------------------------------------------------
   # Install generated files for debugging
   #----------------------------------------------------------------------------
   install_dbg_files = Install(env.subst("${TZBSP_ROOT}"),
      [tzbsp_no_xpu_elf, tzbsp_no_xpu_map, tzbsp_no_xpu_sym])

   #============================================================================
   # Define units that will be built
   #============================================================================
   tzbsp_no_xpu_units = env.Alias ('arm11_tzbsp_no_xpu_units', [
      tzbsp_no_xpu_elf,
      tzbsp_no_xpu_mbn,
      install_dbg_files,
      sectools_signed_mbn
   ])

# Add aliases
for alias in aliases:
   env.Alias(alias, tzbsp_no_xpu_units)
