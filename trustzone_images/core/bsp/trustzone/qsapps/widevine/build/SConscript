#===============================================================================
#
# WIDEVINE build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2010 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#  $DateTime: $
#  $Author: $
#  $Change: $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
#===============================================================================
import os
Import('env')
env = env.Clone()

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias - First alias is always the target then the other possible aliases
aliases = [
   'widevine', 'genboot', 'boot', 'boot_arm11',
   'amss', 'amss_arm11',
   'arm11', 'all'
]

env.InitImageVars(
   alias_list = aliases,                            # list of aliases, unique name index [0]
   proc = 'scorpion',                              # proc settings
   config = 'apps',                               # config settings
   build_tags = ['APPS_PROC', 'WIDEVINE_IMAGE'],  # list of build tags for sub lib scripts
   tools = [
      "${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py",
      "${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py",
      "buildspec_builder.py",
      "${BUILD_ROOT}/tools/build/scons/sectools/sectools_builder.py",
      ],
   )


if not env.CheckAlias():
   Return()

#------------------------------------------------------------------------------
# Init default values for this PROC/Image
#------------------------------------------------------------------------------

#===============================================================================
# WIDEVINE build rules
#===============================================================================

#------------------------------------------------------------------------------
# Configure and load in USES and path variables
#------------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('arm', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.LoadToolScript('apps_defs', toolpath = ['${BUILD_SCRIPTS_ROOT}'])

#------------------------------------------------------------------------------
# Add extension flags for WIDEVINE
#------------------------------------------------------------------------------
if env['BUILD_VER'] == "":
   env.Replace(BUILD_VER = '0')

#----------------------------------------------------------------------------
# Enable Stack protection
#----------------------------------------------------------------------------
env.Append(CCFLAGS = " --protect_stack ")


# TODO Not sure why this is needed. WIDEVINE must be added somewhere,
# otherwise a CPU without TZ instructions is being used.
# env.Replace(ARM_CPU_SCORPION = '7')
env.Append(CFLAGS = ' --apcs=/ropi/rwpi --lower_ropi --lower_rwpi')
env.Append(ASFLAGS = ' --apcs=/ropi/rwpi ')

env.Append(CPPDEFINES = [
   "WIDEVINE",
   "BUILD_BOOT_CHAIN",
   "BUILD_BOOT_CHAIN_SPBL",
   "BOOT_LOADER",
   "BOOT_WATCHDOG_DISABLED",
   "FLASH_NAND_SINGLE_THREADED",
   "FLASH_CLIENT_BOOT",
   "FLASH_USE_DM_PAGES",
   "FEATURE_HS_USB_BASIC",
   "BOOT_SBL_H=\\\"boot_comdef.h\\\"",
   "BOOT_CUSTSBL_H=\\\"custsbl.h\\\"",
   "BOOT_MODULE_BUILD_VERSION=" + env['BUILD_VER'],
   "FEATURE_USES_TURBO",
   "RUMIBUILD",
])

#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# Regular build steps (no filter) is build everything, once a user starts
# using filters we have to make decisions depending on user input.
#
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units, 
# etc.  This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.

do_local_files = True
do_link = True
do_post_link = True

# Get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing based on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False

#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------
core_libs, core_objs = env.LoadAUSoftwareUnits('core')
widevine_units = [core_objs, core_libs]


if do_local_files:

   #============================================================================
   # WIDEVINE Environment
   #============================================================================
   env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsapps/tzdrm/tzcommon/common/chipset/${CHIPSET}/inc")

   #----------------------------------------------------------------------------
   # Begin building WIDEVINE
   #----------------------------------------------------------------------------
   env.Replace(TARGET_NAME = 'widevine')
   env.Replace(WIDEVINE_ROOT = '${COREBSP_ROOT}/securemsm/trustzone/qsapps/tzdrm/widevine')

   #----------------------------------------------------------------------------
   # Generate Scatter Load File (SCL)
   #----------------------------------------------------------------------------
   target_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      '${WIDEVINE_ROOT}/build/widevine.scl')

   widevine_units.extend(target_scl)

if do_link:
   #----------------------------------------------------------------------------
   # Generate WIDEVINE ELF
   #----------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']
   
   widevine_elf = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}',
      source=[core_objs], LIBS=[core_libs], LIBPATH=libs_path)
   
   env.Depends(widevine_elf, target_scl)
        
   widevine_map = env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map')
   widevine_sym = env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym')
   
   env.Clean(widevine_elf, widevine_map)
   env.Clean(widevine_elf, widevine_sym)
                   
if do_post_link:   
   #----------------------------------------------------------------------------
   # Generate WIDEVINE mbn
   #----------------------------------------------------------------------------
   widevine_pbn = env.InstallAs("${SHORT_BUILDPATH}/${TARGET_NAME}.pbn", widevine_elf)         
   
   install_root = env.subst('${MBN_ROOT}')
   image_name = "widevine"
   install_unsigned_root = env.SectoolGetUnsignedInstallPath(install_base_dir = install_root)
   env.Replace(MBN_FILE = os.path.join(install_unsigned_root, image_name))      
   widevine_mbn = env.MbnBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      widevine_pbn, IMAGE_TYPE="widevine", MBN_TYPE="elf", 
      IMAGE_ID=4, FLASH_TYPE="sdcc")

   #----------------------------------------------------------------------------
   # Sectools signing
   #----------------------------------------------------------------------------
   sectools_signed_mbn = env.SectoolBuilder(
            target_base_dir = '${SHORT_BUILDPATH}', 
                    source=widevine_mbn,                  
            sign_id=image_name,
            msmid = env.subst('${MSM_ID}'),
            sectools_install_base_dir = install_root,  
            install_file_name = image_name + ".mbn",
            config='${BUILD_ROOT}/core/bsp/trustzone/qsapps/build/secimage.xml')    
                       
   featureflags = ['USES_SEC_POLICY_INSTALL_DEFAULT_SIGN', 'USES_SEC_POLICY_INSTALL_DEFAULT_SIGN_ENCRYPT']
   if env.SectoolIsEnabled(featureflags=featureflags) is False:
     default_widevine_mbn = widevine_mbn
   else:
     default_widevine_mbn = sectools_signed_mbn

   #-------------------------------------------------------------------------
   # Build files for PIL driver
   #-------------------------------------------------------------------------
   env.LoadToolScript('pil_splitter_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
   widevine_pil = env.PilSplitterBuilder('${BUILD_ROOT}/build/ms/bin/PIL_IMAGES/SPLITBINS_${QC_SHORT_BUILDPATH}/widevine.mdt', default_widevine_mbn)

   #============================================================================
   # Define units that will be built
   #============================================================================
   widevine_units = env.Alias ('arm11_widevine_units', [
      widevine_elf,
      widevine_mbn,
      widevine_pil,
      sectools_signed_mbn
   ])

# Add aliases
for alias in aliases:
   env.Alias(alias, widevine_units)
