#===============================================================================
#
# secure touch build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2013 Qualcomm Technologies, Inc.
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/bsp/trustzone/qsapps/securetouch/build/SConscript#1 $
#  $DateTime: 2016/06/17 14:31:11 $
#  $Author: pwbldsvc $
#  $Change: 10727476 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
#===============================================================================
import os
Import('env')

env = env.Clone()

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias - First alias is always the target then the other possible aliases
aliases = [
   'securetouch', 'sse', 'genboot', 'boot', 'boot_arm11',
   'amss', 'amss_arm11',
   'arm11', 'all'
]

env.InitImageVars(
   alias_list = aliases,       # list of aliases, unique name index [0]
   proc = 'scorpion',          # proc settings
   config = 'apps',            # config settings
   build_tags = ['APPS_PROC',
      'SECURETOUCH_IMAGE'],  # list of build tags for sub lib scripts
   tools =[
      "${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py",
      "${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py",
      "buildspec_builder.py",
    ]
)

if not env.CheckAlias():
   Return()

if env['MSM_ID'] not in ['8974']:
   Return()

#------------------------------------------------------------------------------
# Init default values for this PROC/Image
#------------------------------------------------------------------------------

#===============================================================================
# sampleapp build rules
#===============================================================================

#------------------------------------------------------------------------------
# Configure and load in USES and path variables
#------------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('arm', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.LoadToolScript('apps_defs', toolpath = ['${BUILD_SCRIPTS_ROOT}'])

#------------------------------------------------------------------------------
# Add extension flags for sampleapp
#------------------------------------------------------------------------------
if env['BUILD_VER'] == "":
   env.Replace(BUILD_VER = '0')

# TODO Not sure why this is needed. sampleapp must be added somewhere,
# otherwise a CPU without TZ instructions is being used.
# env.Replace(ARM_CPU_SCORPION = '7')
env.Append(CFLAGS = ' --apcs=/ropi/rwpi --lower_ropi --lower_rwpi --c99')
env.Append(ASFLAGS = ' --apcs=/ropi/rwpi ')

env.Append(CPPDEFINES = [
   "QSAPP_BUILD",
   "SECURETOUCH",
   "BUILD_BOOT_CHAIN",
   "BUILD_BOOT_CHAIN_SPBL",
   "BOOT_LOADER",
   "BOOT_WATCHDOG_DISABLED",
   "FLASH_NAND_SINGLE_THREADED",
   "FLASH_CLIENT_BOOT",
   "FLASH_USE_DM_PAGES",
   "FEATURE_HS_USB_BASIC",
   "BOOT_SBL_H=\\\"boot_comdef.h\\\"",
   "BOOT_CUSTSBL_H=\\\"custsbl.h\\\"",
   "BOOT_MODULE_BUILD_VERSION=" + env['BUILD_VER'],
   "FEATURE_USES_TURBO",
   "RUMIBUILD",
])

# enable logging
env.Append(CPPDEFINES = 'SSE_LOG_GLOBAL')
env.Append(CPPDEFINES = 'SSE_LOG_FILE')
env.Append(CPPDEFINES = 'LOG_TAG=secureTouch')

#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# Regular build steps (no filter) is build everything, once a user starts
# using filters we have to make decisions depending on user input.
#
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units,
# etc.  This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.

do_local_files = True
do_link = True
do_post_link = True

# Get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing based on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False

#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------
core_libs, core_objs = env.LoadAUSoftwareUnits('core')
qsapp_units = [core_objs, core_libs]

if do_local_files:
   #============================================================================
   # qsapp Environment
   #============================================================================

   #----------------------------------------------------------------------------
   # Begin building qsapp
   #----------------------------------------------------------------------------
   env.Replace(TARGET_NAME = 'securetouch')
   env.Replace(QSAPP_ROOT = '${COREBSP_ROOT}/securemsm/trustzone/qsapps/${TARGET_NAME}')

   #----------------------------------------------------------------------------
   # Generate Scatter Load File (SCL)
   #----------------------------------------------------------------------------
   target_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      '${QSAPP_ROOT}/build/${TARGET_NAME}.scl')

   qsapp_units.extend(target_scl)

if do_link:
   #----------------------------------------------------------------------------
   # Generate qsapp ELF
   #----------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']

   qsapp_elf  = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}',
      source=[core_objs], LIBS=[core_libs], LIBPATH=libs_path)

   env.Depends(qsapp_elf , target_scl)

   env.Clean(qsapp_elf , env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map'))
   env.Clean(qsapp_elf , env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym'))

if do_post_link:
   #----------------------------------------------------------------------------
   # Generate qsapp MBN
   #----------------------------------------------------------------------------
   qsapp_pbn = env.InstallAs('${SHORT_BUILDPATH}/${TARGET_NAME}.pbn',
      qsapp_elf )

   qsapp_mbn = env.MbnBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}',
      qsapp_pbn, IMAGE_TYPE="${TARGET_NAME}", MBN_TYPE="elf",
      IMAGE_ID=4, FLASH_TYPE="sdcc")

   #-------------------------------------------------------------------------
   # Build files for PIL driver
   #-------------------------------------------------------------------------
   env.LoadToolScript('pil_splitter_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
   qsapp_pil = env.PilSplitterBuilder('${BUILD_ROOT}/build/ms/bin/PIL_IMAGES/SPLITBINS_${QC_SHORT_BUILDPATH}/sectouch.mdt', qsapp_mbn)

   #============================================================================
   # Define units that will be built
   #============================================================================
   qsapp_units = env.Alias ('arm11_qsapp_units', [
      qsapp_elf ,
      qsapp_mbn,
      qsapp_pil
   ])

# Add aliases
for alias in aliases:
   env.Alias(alias, qsapp_units)
