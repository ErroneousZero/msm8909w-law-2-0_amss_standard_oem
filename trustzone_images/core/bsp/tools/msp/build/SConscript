#===============================================================================
#
# eMMC JTAG tool build script
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2010 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/core/bsp/bootloaders/msm7x30/main/latest/osbl/build/SConscript#10 $
#  $DateTime: 2009/07/23 12:15:48 $
#  $Author: wduembeg $
#  $Change: 976313 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when         who     what, where, why
# ----------   ---     ---------------------------------------------------------
# 2010-08-19   rh      Use DDR memory for 8660
# 2010-07-14   rh      Force enable debug symbol - again
# 2010-07-07   rh      Force enable debug symbol
# 2010-06-22   rh      Update the location of the scl file
# 2010-06-08   rh      Branch the script for compilation on Scorpion processor
# 2010-03-16   rh      Add missing IMEM value for 7x30
# 2010-02-22   rh      Add IMEM value for 8660 and CMM script generator
# 2009-10-10   rcc     Merged in changes from the integration team
#===============================================================================
import os, sys
Import('env')
env=env.Clone()

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
# alias first alias is always the target then the other possibles aliases
aliases = [
   'msp'
]

env.InitImageVars(
   alias_list = aliases,               	# list of aliases, unique name index [0]
   proc = 'x86',                      	# proc settings
   config = 'modem',                   	# config settings
   build_tags = ['NONE'],     # list of build tags for sub lib scripts
   deprecated_build_tags = []     
)

if not env.CheckAlias():
   Return()

#------------------------------------------------------------------------------
# Init defualt values this PROC/Image
#------------------------------------------------------------------------------

# add environment variables
env.Replace(BUILD_TOOL_CHAIN = 'yes')

#===============================================================================
# BOOT/OSBL build rules
#===============================================================================

#------------------------------------------------------------------------------
# configure and load in uses and path variables,
#------------------------------------------------------------------------------
env.InitBuildConfig()

#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------
env.LoadToolScript('gcc_x86', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
env.LoadToolScript('modem_defs', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])   


env.Replace(CCFLAGS = "")
env.Replace(LINKFLAGS = "")

#------------------------------------------------------------------------------
# Decide build steps
#------------------------------------------------------------------------------
# regular build steps (no filter) is build everything, once a user start 
# using filters we have to make decisions depending on user input.
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units, 
# etc. This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quatz, stubs, etc.
do_link = True
do_local_files = True

filter_opt = env.get('FILTER_OPT')
if filter_opt is not None:
   do_link = False
   if not env.FilterMatch(os.getcwd()):
      do_local_files = False


#----------------------------------------------------------------------------
# Source PATH
#----------------------------------------------------------------------------

#print env.Dump()

if do_local_files:
   #----------------------------------------------------------------------------
   # IMAGE_AUTH Environment
   #----------------------------------------------------------------------------

   #----------------------------------------------------------------------------
   # Source PATH
   #----------------------------------------------------------------------------
   #IMAGE_AUTH_SRC = "${COREBSP_ROOT}/boot"
   MSP_SRC = "${BUILD_ROOT}/core/storage/tools/jsdcc/partition_load_pt"

   env.VariantDir('.', MSP_SRC, duplicate=0)

   #----------------------------------------------------------------------------
   # Internal depends within CoreBSP
   #----------------------------------------------------------------------------
   CBSP_API = [
      'STORAGE',
      #'SERVICES',   
   ]

   #env.RequirePublicApi(CBSP_API)
   #env.RequireRestrictedApi(CBSP_API)

   #----------------------------------------------------------------------------
   # Sources, libraries
   #----------------------------------------------------------------------------
   MSP_SOURCES=[
      'ms_program_card.c',
   ]

   #----------------------------------------------------------------------------
   # Beging building IMAGE_AUTH
   #----------------------------------------------------------------------------
   #####env.Replace(TARGET_NAME = 'image_auth' )

   #----------------------------------------------------------------------------
   # Generate image_auth objs
   #----------------------------------------------------------------------------
   MSP_objs = env.Object([
      MSP_SOURCES
   ])

if do_link:
   #----------------------------------------------------------------------------
   # IMAGE_AUTH exe
   #----------------------------------------------------------------------------
   msp_exe = env.Program('${TARGET_NAME}', MSP_objs )

   # copy target to needed locations for AMSS tools
   install_target = env.InstallAs('${BUILD_ROOT}/core/storage/tools/msp/msp.exe', msp_exe)

   #============================================================================
   # Define units that will be build
   #============================================================================
   msp_units = [msp_exe,install_target]


# add aliases
for alias in aliases:
   env.Alias(alias, msp_units)

