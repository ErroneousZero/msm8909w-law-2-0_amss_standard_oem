/* DIAG TOOL VERSION: 4.35 */
/*=============================================================================
                                D I A G . X D R

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides an xdr compatible definition of
  the diag API.

  ---------------------------------------------------------------------------
  Copyright (c) 2009 QUALCOMM Incorporated.
  All Rights Reserved. QUALCOMM Proprietary and Confidential.
  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED

Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/htorpc.pl#7 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/Start.pm#2 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/Htoxdr.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/XDR.pm#2 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/Output.pm#6 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/Parser.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/Metacomments.pm#4 
Id: //source/qcom/qct/core/mproc/tools/rel/04.07/htorpc/lib/Htorpc/SymbolTable.pm#2  

diag Definition File(s):
Id: //source/qcom/qct/core/services/diag/api/inc/main/latest/diag.h#10
=============================================================================*/
/*=============================================================================
$Header$ 
=============================================================================*/



typedef rpc_uint32 rpc_diag_api_versions_return_type<>;

/*
 * Declare an rpc_uint32 type for each callback type in the API
 */
typedef rpc_uint32 rpc_diag_event_listener;

typedef rpc_uint32 rpc_diag_log_listener;

typedef rpc_uint32 rpc_diag_cmd_rsp;



/*
 * These are struct declarations for the function arguments
 */

struct rpc_diag_add_event_listener_args {
  unsigned int event_id;
  rpc_diag_event_listener listener;
  rpc_diag_add_event_listener_args_param param;
};

struct rpc_diag_remove_event_listener_args {
  unsigned int event_id;
  rpc_diag_event_listener listener;
  rpc_diag_remove_event_listener_args_param param;
};

struct rpc_diag_add_log_listener_args {
  unsigned int log_code;
  rpc_diag_log_listener listener;
  rpc_diag_add_log_listener_args_param param;
};

struct rpc_diag_remove_log_listener_args {
  unsigned int log_code;
  rpc_diag_log_listener listener;
  rpc_diag_remove_log_listener_args_param param;
};

struct rpc_diag_cmd_req_args {
  opaque req<>;
  unsigned int length;
  rpc_diag_cmd_rsp rsp_cb;
  rpc_diag_cmd_req_args_param param;
};



struct rpc_diag_api_version_s_args {
  rpc_boolean len_not_null;
};

/*
 * These are struct declarations for the function results
 */

struct rpc_diag_rpc_glue_code_info_remote_rets {
  rpc_uint32 toolvers;   /* Tool version */
  rpc_uint32 features;   /* Features turned on in the code.
                          * 0x00000001    ONCRPC Server Cleanup Support
                          */
  rpc_uint32 proghash;   /* Unique hash value for the API XDR definition */
  rpc_uint32 cbproghash; /* Unique hash value for the Callbacks' XDR definition */
};

struct rpc_diag_add_event_listener_rets {
  rpc_boolean diag_add_event_listener_result;
};

struct rpc_diag_remove_event_listener_rets {
  rpc_boolean diag_remove_event_listener_result;
};

struct rpc_diag_add_log_listener_rets {
  rpc_boolean diag_add_log_listener_result;
};

struct rpc_diag_remove_log_listener_rets {
  rpc_boolean diag_remove_log_listener_result;
};

struct rpc_diag_cmd_req_rets {
  rpc_boolean diag_cmd_req_result;
};

 struct rpc_diag_api_versions_rets {
  rpc_diag_api_versions_return_type diag_api_versions_result;
  rpc_uint32 *len;
};

/*
 * XDR definition of the DIAG program ( vers. 0x00010001 )
 */

program DIAGPROG {
  version DIAGVERS_0001 {

    void
      rpc_diag_null( void ) = 0;

    rpc_diag_rpc_glue_code_info_remote_rets
      rpc_diag_rpc_glue_code_info_remote( void ) = 1;

    rpc_diag_add_event_listener_rets
      rpc_diag_add_event_listener( rpc_diag_add_event_listener_args ) = 2;

    rpc_diag_remove_event_listener_rets
      rpc_diag_remove_event_listener( rpc_diag_remove_event_listener_args ) = 3;

    rpc_diag_add_log_listener_rets
      rpc_diag_add_log_listener( rpc_diag_add_log_listener_args ) = 4;

    rpc_diag_remove_log_listener_rets
      rpc_diag_remove_log_listener( rpc_diag_remove_log_listener_args ) = 5;

    rpc_diag_cmd_req_rets
      rpc_diag_cmd_req( rpc_diag_cmd_req_args ) = 6;

      rpc_diag_api_versions_rets
      rpc_diag_api_versions( void ) = 0xFFFFFFFF;


  } = 0x00010001;
} = 0x3000003b;

const DIAGVERS = 0x00010001;
