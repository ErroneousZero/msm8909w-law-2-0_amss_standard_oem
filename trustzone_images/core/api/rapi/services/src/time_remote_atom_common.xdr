/* TIME_REMOTE_ATOM TOOL VERSION: 4.39 */
/* GENERATED: TUE AUG 17 2010 */
/*=============================================================================
             T I M E _ R E M O T E _ A T O M _ C O M M O N . X D R

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides an xdr compatible definition of
  an api that represents the grouping of the different callback functions the
  time_remote_atom API supports.

  ---------------------------------------------------------------------------
  Copyright (c) 2010 QUALCOMM Incorporated.
  All Rights Reserved. QUALCOMM Proprietary and Confidential.
  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED

Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/htorpc.pl#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/Start.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/Htoxdr.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/XDR.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/Output.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/Parser.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/Metacomments.pm#8 
Id: //source/qcom/qct/core/pkg/2H09/halcyon_modem/main/latest/AMSS/products/7x30/tools/htorpc/lib/Htorpc/SymbolTable.pm#8  

time_remote_atom Definition File(s):
Id: //source/qcom/qct/core/api/services/time/main/latest/time_remote_atom.h#1
=============================================================================*/
/*=============================================================================
$Header$ 
=============================================================================*/



const TIME_REMOTE_ATOM_TOOLVERS = 0x00040027;
const TIME_REMOTE_ATOM_FEATURES = 0x00000001;

const RPC_ATS_CFG_EVENT_CB_TYPE_VERSION = 0x00040001;
const RPC_TIME_REMOTE_ATOM_CB_NULL_VERSION = 0x00040002;
const RPC_TIME_TOD_REQUEST_APPS_BASES_VERSION = 0x00040001;
const RPC_TIMER_IPC_REMOTE_SET_VERSION = 0x00040002;
const RPC_TIME_REMOTE_SECURE_GET_VERSION = 0x00040001;
const RPC_TIME_REMOTE_SET_JULIAN_VERSION = 0x00040001;
const RPC_TIME_GET_LOCAL_OFFSET_INFO_VERSION = 0x00040001;
const RPC_TIME_REMOTE_ATOM_NULL_VERSION = 0x00040001;
const RPC_TIMER_IPC_REMOTE_GET_VERSION = 0x00040002;
const RPC_ATS_CLIENT_DEACTIVATE_VERSION = 0x00040001;
const RPC_TIME_ALARM_SET_SECS_VERSION = 0x00040001;
const RPC_TIMER_IPC_REMOTE_CLR_VERSION = 0x00040002;
const RPC_TIME_REMOTE_ATOM_RPC_GLUE_CODE_INFO_REMOTE_VERSION = 0x00040001;
const RPC_TIME_REMOTE_SET_USER_TIME_VERSION = 0x00040001;
const RPC_ATS_CLIENT_INIT_VERSION = 0x00040001;
const RPC_TIME_SECURE_VALID_VERSION = 0x00040001;
const RPC_TIME_REMOTE_UPDATE_APPS_TO_MODEM_OFFSET_VERSION = 0x00040001;
const RPC_TIMER_IPC_REMOTE_RESUME_VERSION = 0x00040002;
const RPC_TIME_REMOTE_ATOM_GENOFF_SET_GENERIC_OFFSET_VERSION = 0x00040001;
const RPC_TIME_REMOTE_SECURE_SET_VERSION = 0x00040001;
const RPC_ATS_CLIENT_RELEASE_VERSION = 0x00040001;
const RPC_TIME_ALARM_SET_MS_VERSION = 0x00040001;
const RPC_TIMER_IPC_REMOTE_PAUSE_VERSION = 0x00040002;
const RPC_TIME_REMOTE_SECURE_GET_JULIAN_VERSION = 0x00040001;
const RPC_ATS_CLIENT_ACTIVATE_VERSION = 0x00040001;
const RPC_TIME_TOD_REQUEST_RESET_VERSION = 0x00040001;
const RPC_TIME_REMOTE_GENOFF_OPR_VERSION = 0x00040001;
const RPC_TIME_REMOTE_GET_JULIAN_VERSION = 0x00040001;
const RPC_ATS_CLIENT_REG_CFG_CB_VERSION = 0x00040001;
const RPC_TIME_ALARM_SET_VERSION = 0x00040001;
const RPC_TIME_REMOTE_ATOM_API_VERSIONS_VERSION = 0x00040001;
const RPC_TIME_REMOTE_SECURE_SET_JULIAN_VERSION = 0x00040001;
const RPC_TIME_REMOTE_GENOFF_SET_ALLOW_REMOTE_UPDATES_VERSION = 0x00040005;
const RPC_TIME_REMOTE_ATOM_API_MAJOR_NUM = 0x0004;
const RPC_TIME_REMOTE_ATOMAPI_VERSION_IS_HASHKEY = 0;
typedef bool rpc_boolean;
typedef unsigned long rpc_uint32;

typedef unsigned short rpc_uint16;

typedef unsigned char rpc_uint8;

typedef long rpc_int32;

typedef hyper rpc_int64;

typedef unsigned hyper rpc_uint64;

typedef unsigned long rpc_qword[2];

typedef rpc_qword rpc_time_type;

struct rpc_time_julian_type {
  rpc_uint16 year;
  rpc_uint16 month;
  rpc_uint16 day;
  rpc_uint16 hour;
  rpc_uint16 minute;
  rpc_uint16 second;
  rpc_uint16 day_of_week;
};

enum rpc_timer_unit_type {
  RPC_T_SCLK,
  RPC_T_USEC,
  RPC_T_MSEC,
  RPC_T_SEC,
  RPC_T_MIN,
  RPC_T_HOUR,
  RPC_T_NONE = RPC_T_SCLK
};

typedef rpc_uint32 rpc_timetick_type;

enum rpc_time_bases {
  RPC_ATS_RTC = 0,
  RPC_ATS_TOD,
  RPC_ATS_USER,
  RPC_ATS_SECURE,
  RPC_ATS_DRM,
  RPC_ATS_USER_UTC,
  RPC_ATS_USER_TZ_DL,
  RPC_ATS_GPS,
  RPC_ATS_1X,
  RPC_ATS_HDR,
  RPC_ATS_WCDMA,
  RPC_ATS_MFLO,
  RPC_ATS_INVALID = 268435456
};

typedef enum rpc_time_bases rpc_time_bases_type;

enum rpc_time_unit {
  RPC_TIME_STAMP,
  RPC_TIME_MSEC,
  RPC_TIME_SECS,
  RPC_TIME_JULIAN,
  RPC_TIME_20MS_FRAME,
  RPC_TIME_NONE
};

typedef enum rpc_time_unit rpc_time_unit_type;

enum rpc_time_genoff_opr {
  RPC_T_SET,
  RPC_T_GET,
  RPC_T_MAX
};

typedef enum rpc_time_genoff_opr rpc_time_genoff_opr_type;

enum rpc_base_time_source {
  RPC_TIME_SCLK,
  RPC_TIMETICK_SCLK64
};

typedef enum rpc_base_time_source rpc_base_time_source_type;

union rpc_time_remote_opr switch (rpc_time_unit_type disc) {
  case RPC_TIME_STAMP:
  case RPC_TIME_MSEC:
  case RPC_TIME_SECS:
  case RPC_TIME_20MS_FRAME:
    rpc_time_type timestamp;
  case RPC_TIME_JULIAN:
    rpc_time_julian_type julian;
  default:
    void;
};

typedef union rpc_time_remote_opr rpc_time_remote_opr_type;

enum rpc_ats_cfg_event_e_type {
  RPC_ATS_CFG_EVENT_TOD_CHANGE = 0,
  RPC_ATS_CFG_EVENT_GENOFF_CHANGE,
  RPC_ATS_CFG_EVENT_TIMER_IPC_CHANGE,
  RPC_ATS_CFG_EVENT_MAX32 = 268435456
};

struct rpc_ats_tod_update_s {
  rpc_timetick_type tick;
  rpc_time_type stamp;
  rpc_uint32 freq;
};

typedef struct rpc_ats_tod_update_s rpc_ats_tod_update_s_type;

struct rpc_ats_genoff_update_s {
  rpc_time_bases_type base_type;
  rpc_int64 offset;
};

typedef struct rpc_ats_genoff_update_s rpc_ats_genoff_update_s_type;

struct rpc_ats_timer_ipc_update_s {
  rpc_uint32 expired_handle;
};

typedef struct rpc_ats_timer_ipc_update_s rpc_ats_timer_ipc_update_s_type;

union rpc_ats_cfg_event_info_u switch (rpc_ats_cfg_event_e_type disc) {
  case RPC_ATS_CFG_EVENT_TOD_CHANGE:
    rpc_ats_tod_update_s_type ats_tod_update;
  case RPC_ATS_CFG_EVENT_GENOFF_CHANGE:
    rpc_ats_genoff_update_s_type ats_genoff_update;
  case RPC_ATS_CFG_EVENT_TIMER_IPC_CHANGE:
    rpc_ats_timer_ipc_update_s_type ats_timer_ipc_update;
  default:
    void;
};

typedef union rpc_ats_cfg_event_info_u rpc_ats_cfg_event_info_s_type;

enum rpc_ats_client_type_e_type {
  RPC_ATS_CLIENT_TYPE_GEN1 = 0,
  RPC_ATS_CLIENT_FLOATING1,
  RPC_ATS_CLIENT_FLOATING2,
  RPC_ATS_CLIENT_TYPE_INTERNAL,
  RPC_ATS_CLIENT_TYPE_GENOFF_UPDATE,
  RPC_ATS_CLIENT_TYPE_MM_GENOFF_UPDATE,
  RPC_ATS_CLIENT_TYPE_MAX32 = 268435456
};

enum rpc_ats_client_processor_e_type {
  RPC_ATS_CLIENT_PROCESSOR_NONE = 0,
  RPC_ATS_CLIENT_PROCESSOR_MODEM,
  RPC_ATS_CLIENT_PROCESSOR_APP1,
  RPC_ATS_CLIENT_PROCESSOR_APP2,
  RPC_ATS_CLIENT_PROCESSOR_MM_MODEM,
  RPC_ATS_CLIENT_PROCESSOR_MAX32
};

typedef rpc_uint8 rpc_ats_client_id_type;

enum rpc_ats_client_err_e_type {
  RPC_ATS_CLIENT_ERR_NONE,
  RPC_ATS_CLIENT_ERR_CLIENT_ID_PTR,
  RPC_ATS_CLIENT_ERR_CLIENT_TYPE,
  RPC_ATS_CLIENT_ERR_CLIENT_ID,
  RPC_ATS_CLIENT_ERR_TASK_NOT_READY,
  RPC_ATS_CLIENT_ERR_INVALID_PROCESSOR,
  RPC_ATS_CLIENT_ERR_UNSUPPORTED,
  RPC_ATS_CLIENT_ERR_GENERAL,
  RPC_ATS_CLIENT_ERR_RPC,
  RPC_ATS_CLIENT_ERR_ALREADY_REG,
  RPC_ATS_CLIENT_ERR_MAX32 = 268435456
};

