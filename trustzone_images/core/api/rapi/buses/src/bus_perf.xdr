/* BUS_PERF TOOL VERSION: 4.30 */
/*=============================================================================
                     B U S _ P E R F _ C O M M O N . X D R

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides an xdr compatible definition of
  an api that represents the grouping of the different callback functions the
  bus_perf API supports.

  ---------------------------------------------------------------------------
  Copyright (c) 2009 QUALCOMM Incorporated.
  All Rights Reserved. QUALCOMM Proprietary and Confidential.
  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED

Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/htorpc.pl#3 
$Id$
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/lib/Htorpc/Htoxdr.pm#1 
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/lib/Htorpc/XDR.pm#5 
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/lib/Htorpc/Output.pm#17 
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/lib/Htorpc/Parser.pm#3 
Id: //source/qcom/qct/core/mproc/tools/main/latest/htorpc/lib/Htorpc/Metacomments.pm#2 
$Id$

=============================================================================*/
/*=============================================================================
$Header$ 
=============================================================================*/



const BUS_PERF_TOOLVERS = 0x0004001e;
const BUS_PERF_FEATURES = 0x00000001;

typedef bool rpc_boolean;
typedef unsigned long rpc_uint32;

enum rpc_bus_preq_flow_type {
  RPC_BUS_PREQ_FLOW_APPLICATION = 0,
  RPC_BUS_PREQ_FLOW_VIDEO_PLAYBACK,
  RPC_BUS_PREQ_FLOW_VIDEO_RECORD,
  RPC_BUS_PREQ_FLOW_GRAPHICS,
  RPC_BUS_PREQ_FLOW_VIEWFINDER,
  RPC_BUS_PREQ_FLOW_LAPTOP_DATA_CALL,
  RPC_BUS_PREQ_FLOW_APPLICATION_DATA_CALL,
  RPC_BUS_PREQ_FLOW_GPS,
  RPC_BUS_PREQ_FLOW_TV_OUT,
  RPC_BUS_PREQ_FLOW_ILCDC_WVGA,
  RPC_BUS_PREQ_FLOW_MAX
};

enum rpc_bus_preq_level_type {
  RPC_BUS_PREQ_LEVEL_0 = 0,
  RPC_BUS_PREQ_LEVEL_1,
  RPC_BUS_PREQ_LEVEL_2,
  RPC_BUS_PREQ_LEVEL_3,
  RPC_BUS_PREQ_LEVEL_MAX
};

enum rpc_bus_preq_flag_type {
  RPC_BUS_FLG_NO_OVERSUBSCRIBE,
  RPC_BUS_FLG_BANDWIDTH_OVERSUBSCRIBE,
  RPC_BUS_FLG_LATENCY_OVERSUBSCRIBE,
  RPC_BUS_FLG_BANDWIDTH_AND_LATENCY_OVERSUBSCRIBE
};

enum rpc_bus_halt_port_type {
  RPC_BUS_HALT_PORT_MSS_A9I,
  RPC_BUS_HALT_PORT_MSS_A9D,
  RPC_BUS_HALT_PORT_MSS_MDM,
  RPC_BUS_HALT_PORT_A11SS_A11I,
  RPC_BUS_HALT_PORT_A11SS_A11DRW,
  RPC_BUS_HALT_PORT_A11SS_A11D,
  RPC_BUS_HALT_PORT_APPSS_ADMCE,
  RPC_BUS_HALT_PORT_APPSS_VFE,
  RPC_BUS_HALT_PORT_APPSS_AD5X,
  RPC_BUS_HALT_PORT_APPSS_MDP,
  RPC_BUS_HALT_PORT_APPSS_UMDX,
  RPC_BUS_HALT_PORT_GRPSS_GRP,
  RPC_BUS_HALT_PORT_GRPSS_VDC
};

struct rpc_bus_perf_request {
  rpc_bus_preq_flow_type flow;
  rpc_bus_preq_level_type level;
};

struct rpc_bus_oversubscribe_port_info {
  int tier1_token_diff;
  int tier2_token_diff;
  int tier3_token_diff;
};

struct rpc_bus_oversubscribe_info {
  rpc_uint32 bandwidth_oversubscription;
  rpc_bus_oversubscribe_port_info ebi1_ports[13];
  rpc_uint32 smi_supported;
  rpc_bus_oversubscribe_port_info smi_ports[13];
};

enum rpc_bus_return_type {
  RPC_BUS_SUCCESS,
  RPC_BUS_FAILURE,
  RPC_BUS_OVERSUBSCRIBE
};

typedef rpc_uint32 *rpc_bus_alloc_args_handle;

typedef rpc_uint32 rpc_bus_free_args_handle;

typedef rpc_uint32 rpc_bus_get_oversubscribe_info_args_handle;

typedef rpc_uint32 rpc_bus_perf_api_versions_return_type<>;


/*
 * These are struct declarations for the function arguments
 */

struct rpc_bus_alloc_args {
  rpc_bus_perf_request request;
  rpc_bus_preq_flag_type flags;
};

struct rpc_bus_free_args {
  rpc_bus_free_args_handle handle;
};

struct rpc_bus_get_oversubscribe_info_args {
  rpc_bus_get_oversubscribe_info_args_handle handle;
  rpc_boolean info_not_null;
};

struct rpc_bus_set_hw_updates_args {
  rpc_boolean allow_hw_updates;
};

struct rpc_bus_halt_port_requests_args {
  rpc_bus_halt_port_type port;
};

struct rpc_bus_unhalt_port_requests_args {
  rpc_bus_halt_port_type port;
};



struct rpc_bus_perf_api_version_s_args {
  rpc_boolean len_not_null;
};

/*
 * These are struct declarations for the function results
 */

struct rpc_bus_perf_rpc_glue_code_info_remote_rets {
  rpc_uint32 toolvers;   /* Tool version */
  rpc_uint32 features;   /* Features turned on in the code.
                          * 0x00000001    ONCRPC Server Cleanup Support
                          */
  rpc_uint32 proghash;   /* Unique hash value for the API XDR definition */
  rpc_uint32 cbproghash; /* Unique hash value for the Callbacks' XDR definition */
};

struct rpc_bus_alloc_rets {
  rpc_bus_return_type bus_alloc_result;
  rpc_bus_alloc_args_handle handle;
};

struct rpc_bus_get_oversubscribe_info_rets {
  rpc_bus_return_type bus_get_oversubscribe_info_result;
  rpc_bus_oversubscribe_info *info;
};

struct rpc_bus_set_hw_updates_rets {
  rpc_bus_return_type bus_set_hw_updates_result;
};

struct rpc_bus_halt_port_requests_rets {
  rpc_bus_return_type bus_halt_port_requests_result;
};

struct rpc_bus_unhalt_port_requests_rets {
  rpc_bus_return_type bus_unhalt_port_requests_result;
};

 struct rpc_bus_perf_api_versions_rets {
  rpc_bus_perf_api_versions_return_type bus_perf_api_versions_result;
  rpc_uint32 *len;
};

/*
 * XDR definition of the BUS_PERF program ( vers. 0x00010001 )
 */

program BUS_PERFPROG {
  version BUS_PERFVERS_0001 {

    void
      rpc_bus_perf_null( void ) = 0;

    rpc_bus_perf_rpc_glue_code_info_remote_rets
      rpc_bus_perf_rpc_glue_code_info_remote( void ) = 1;

    rpc_bus_alloc_rets
      rpc_bus_alloc( rpc_bus_alloc_args ) = 2;

    void
      rpc_bus_free( rpc_bus_free_args ) = 3;

    rpc_bus_get_oversubscribe_info_rets
      rpc_bus_get_oversubscribe_info( rpc_bus_get_oversubscribe_info_args ) = 4;

    rpc_bus_set_hw_updates_rets
      rpc_bus_set_hw_updates( rpc_bus_set_hw_updates_args ) = 5;

    rpc_bus_halt_port_requests_rets
      rpc_bus_halt_port_requests( rpc_bus_halt_port_requests_args ) = 6;

    rpc_bus_unhalt_port_requests_rets
      rpc_bus_unhalt_port_requests( rpc_bus_unhalt_port_requests_args ) = 7;

      rpc_bus_perf_api_versions_rets
      rpc_bus_perf_api_versions( void ) = 0xFFFFFFFF;


  } = 0x00010001;
} = 0x30000025;

const BUS_PERFVERS = 0x00010001;
