/* REMOTE_STORAGE TOOL VERSION: 4.34 */
/*=============================================================================
               R E M O T E _ S T O R A G E _ C O M M O N . X D R

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides an xdr compatible definition of
  an api that represents the grouping of the different callback functions the
  remote_storage API supports.

  ---------------------------------------------------------------------------
  Copyright (c) 2010 QUALCOMM Incorporated.
  All Rights Reserved. QUALCOMM Proprietary and Confidential.
  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED

Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/htorpc.pl#18 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/Start.pm#2 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/Htoxdr.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/XDR.pm#6 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/Output.pm#26 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/Parser.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/Metacomments.pm#4 
Id: //source/qcom/qct/core/mproc/tools/rel/04.01/htorpc/lib/Htorpc/SymbolTable.pm#2  

remote_storage Definition File(s):
Id: //source/qcom/qct/core/storage/remotefs/01/amss/remote_storage.h#2
=============================================================================*/
/*=============================================================================
$Header$ 
=============================================================================*/



const REMOTE_STORAGE_TOOLVERS = 0x00040022;
const REMOTE_STORAGE_FEATURES = 0x00000001;

const RPC_REMOTE_STORAGE_RPC_GLUE_CODE_INFO_REMOTE_VERSION = 0x00010001;
const RPC_REMOTE_STORAGE_NULL_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_WRITE_FINISH_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_REGISTER_OPEN_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_REGISTER_WRITE_IOVEC_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_REGISTER_CB_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_UN_REGISTER_CB_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_FORCE_SYNC_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_GET_SYNC_STATUS_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_REGISTER_READ_IOVEC_VERSION = 0x00010001;

const RPC_REMOTEFS_SRV_OPEN_CB_TYPE_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_WRITE_IOVEC_CB_TYPE_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_EVENT_CB_TYPE_VERSION = 0x00010001;
const RPC_REMOTEFS_SRV_READ_IOVEC_CB_TYPE_VERSION = 0x00010001;

const RPC_REMOTE_STORAGEAPI_VERSION_IS_HASHKEY = 0;
const RPC_REMOTE_STORAGE_API_MAJOR_NUM = 0x0001;

typedef bool rpc_boolean;
typedef unsigned long rpc_uint32;

enum rpc_remotefs_status_type {
  RPC_RMFS_NO_ERROR = 0,
  RPC_RMFS_ERROR_PARAM,
  RPC_RMFS_ERROR_PIPE,
  RPC_RMFS_ERROR_UNINIT,
  RPC_RMFS_ERROR_BUSY,
  RPC_RMFS_ERROR_DEVICE
};

struct rpc_remotefs_iovec_desc {
  rpc_uint32 sector_addr;
  rpc_uint32 data_phy_addr;
  rpc_uint32 num_sector;
};

typedef struct rpc_remotefs_iovec_desc rpc_remotefs_iovec_desc_type;

enum rpc_remotefs_srv_event_e_type {
  RPC_REMOTEFS_SRV_EVNT_OPEN = 0,
  RPC_REMOTEFS_SRV_EVNT_CLOSE,
  RPC_REMOTEFS_SRV_EVNT_WRITE_BLOCK,
  RPC_REMOTEFS_SRV_EVNT_GET_DEV_ERROR,
  RPC_REMOTEFS_SRV_EVNT_WRITE_IOVEC,
  RPC_REMOTEFS_SRV_EVNT_READ_IOVEC,
  RPC_REMOTEFS_SRV_EVNT_SEND_USER_DATA,
  RPC_REMOTEFS_SRV_EVNT_MAX32 = 268435456
};

typedef rpc_uint32 rpc_remotefs_srv_open_cb_type_return_type;

typedef rpc_uint32 rpc_remotefs_srv_write_iovec_cb_type_args_handle;

typedef rpc_uint32 rpc_struct_remotefs_srv_close_args_handle;

struct rpc_remotefs_srv_close_args {
  rpc_struct_remotefs_srv_close_args_handle handle;
};

typedef struct rpc_remotefs_srv_close_args rpc_remotefs_srv_close_args_type;

typedef rpc_uint32 rpc_struct_remotefs_srv_write_block_args_handle;

struct rpc_remotefs_srv_write_block_args {
  rpc_struct_remotefs_srv_write_block_args_handle handle;
  rpc_uint32 data_addr;
  rpc_uint32 sector_data;
  rpc_uint32 counts;
};

typedef struct rpc_remotefs_srv_write_block_args rpc_remotefs_srv_write_block_args_type;

typedef rpc_uint32 rpc_struct_remotefs_srv_get_dev_error_args_handle;

struct rpc_remotefs_srv_get_dev_error_args {
  rpc_struct_remotefs_srv_get_dev_error_args_handle handle;
};

typedef struct rpc_remotefs_srv_get_dev_error_args rpc_remotefs_srv_get_dev_error_args_type;

typedef rpc_uint32 rpc_struct_remotefs_srv_send_user_data_args_handle;

struct rpc_remotefs_srv_send_user_data_args {
  rpc_struct_remotefs_srv_send_user_data_args_handle handle;
  rpc_uint32 user_data;
};

typedef struct rpc_remotefs_srv_send_user_data_args rpc_remotefs_srv_send_user_data_args_type;

union rpc_remotefs_srv_evnt_info_u switch (rpc_remotefs_srv_event_e_type disc) {
  case RPC_REMOTEFS_SRV_EVNT_CLOSE:
    rpc_remotefs_srv_close_args_type remotefs_srv_close;
  case RPC_REMOTEFS_SRV_EVNT_WRITE_BLOCK:
    rpc_remotefs_srv_write_block_args_type remotefs_srv_write_block;
  case RPC_REMOTEFS_SRV_EVNT_GET_DEV_ERROR:
    rpc_remotefs_srv_get_dev_error_args_type remotefs_srv_get_dev_error;
  case RPC_REMOTEFS_SRV_EVNT_SEND_USER_DATA:
    rpc_remotefs_srv_send_user_data_args_type remotefs_srv_send_user_data;
  default:
    void;
};

typedef union rpc_remotefs_srv_evnt_info_u rpc_remotefs_srv_cfg_event_info_u_type;

typedef rpc_uint32 rpc_remotefs_srv_read_iovec_cb_type_args_handle;

typedef rpc_uint32 rpc_remotefs_srv_write_finish_args_handle;

