#ifndef SMD_BRIDGE_MODEM_RPC_H
#define SMD_BRIDGE_MODEM_RPC_H

/* SMD_BRIDGE_MODEM TOOL VERSION: 4.41 */
/* GENERATED: TUE JUL 20 2010 */
/*=============================================================================
                  S M D _ B R I D G E _ M O D E M _ R P C . H

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides declarations pertaining to the
  exporting of the smd_bridge_modem api using ONCRPC.

  ---------------------------------------------------------------------------
  Copyright (c) 2010 Qualcomm Technologies Incorporated.
  All Rights Reserved. QUALCOMM Proprietary and Confidential.
  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED                                  */
/* Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/htorpc.pl#2 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/Start.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/Htoxdr.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/XDR.pm#2 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/Output.pm#3 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/Parser.pm#2 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/Metacomments.pm#1 
Id: //source/qcom/qct/core/mproc/tools/rel/05.02/htorpc/lib/Htorpc/SymbolTable.pm#1  

smd_bridge_modem Definition File(s):
Id: //source/qcom/qct/core/api/mproc/rel/05.02/smd_bridge_modem.h#2
=============================================================================*/
/*=============================================================================
$Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/api/rapi/mproc/inc/smd_bridge_modem_rpc.h#1 $ 
=============================================================================*/


/* Include ONCRPC headers */
#include "oncrpc.h"
#include "comdef.h"

#define SMD_BRIDGE_MODEMPROG					0x300000A1
#define SMD_BRIDGE_MODEMVERS					0x00040001 /* 0x00040001 */
/*defines for feature and tool version*/
#define SMD_BRIDGE_MODEM_TOOLVERS					0x00040029
#define SMD_BRIDGE_MODEM_FEATURES					0x00000001
 

#define SMD_BRIDGE_FORWARD_CALLBACK_MODEM_VERS            	0x00040001
#define SMD_BRIDGE_MODEM_API_VERSIONS_VERS                	0x00040001
#define SMD_BRIDGE_MODEM_NULL_VERS                        	0x00040001
#define SMD_BRIDGE_MODEM_RPC_GLUE_CODE_INFO_REMOTE_VERS   	0x00040001
#define SMD_BRIDGE_RECEIVE_CMD_MODEM_VERS                 	0x00040001
#define SMD_BRIDGE_REGISTER_FORWARD_CALLBACK_MODEM_VERS   	0x00040001
#define SMD_BRIDGE_REGISTER_SERVER_MODEM_VERS             	0x00040001
#define SMD_BRIDGE_MODEMCBPROG					0x310000A1
#define SMD_BRIDGE_MODEMCBVERS					0x00040001 /* 0x00040001 */

#define SMD_BRIDGE_FORWARD_CALLBACK_F_TYPE_VERS           	0X00040001
#define SMD_BRIDGE_MODEM_CB_NULL_VERS                     	0X00040001
#define SMD_BRIDGE_SERVER_RECEIVE_F_TYPE_VERS             	0X00040001
/* prototypes for the app_init routines for the api and the api's callback
 * services
 */
extern void smd_bridge_modem_app_init( void );
extern void smd_bridge_modemcb_app_init( void );

/* prototypes for the app_lock routines for the api and the api's callback
 * services
 */
#define smd_bridge_modem_app_enable()  smd_bridge_modem_app_lock( FALSE )
#define smd_bridge_modem_app_disable() smd_bridge_modem_app_lock( TRUE )
extern void smd_bridge_modem_app_lock( boolean lock );

#define smd_bridge_modemcb_app_enable()  smd_bridge_modemcb_app_lock( FALSE )
#define smd_bridge_modemcb_app_disable() smd_bridge_modemcb_app_lock( TRUE )
extern void smd_bridge_modemcb_app_lock( boolean lock );

/* prototypes for glue code info querty functions:
 *
 * toolvers   : Tool version
 * features   : Features turned on in the code.
 *              0x00000001    ONCRPC Server Cleanup Support
 * proghash   : Unique hash value that represents the API XDR definition
 * cbproghash : Unique hash value that represents the Callbacks' XDR definition
 */
extern boolean smd_bridge_modem_rpc_glue_code_info_remote    /* REMOTE INFO */
(
  uint32 *toolvers,
  uint32 *features,
  uint32 *proghash,
  uint32 *cbproghash
);
extern boolean smd_bridge_modem_rpc_glue_code_info_local     /* LOCAL INFO */
(
  uint32 *toolvers,
  uint32 *features,
  uint32 *proghash,
  uint32 *cbproghash
);

/* prototype for API null routine */
extern boolean smd_bridge_modem_null(void);

/* prototype for API version function */
extern uint32 *smd_bridge_modem_api_versions
(
   uint32 *len
);

/* Start forward xdr procedure numbers */
#define ONCRPC_SMD_BRIDGE_MODEM_NULL_PROC 0
#define ONCRPC_SMD_BRIDGE_MODEM_RPC_GLUE_CODE_INFO_REMOTE_PROC 1
#define ONCRPC_SMD_BRIDGE_RECEIVE_CMD_MODEM_PROC 2
#define ONCRPC_SMD_BRIDGE_REGISTER_SERVER_MODEM_PROC 3
#define ONCRPC_SMD_BRIDGE_REGISTER_FORWARD_CALLBACK_MODEM_PROC 4
#define ONCRPC_SMD_BRIDGE_FORWARD_CALLBACK_MODEM_PROC 5
#define ONCRPC_SMD_BRIDGE_MODEM_API_VERSIONS_PROC 0xFFFFFFFF
/* End forward xdr procedure numbers */
/* Start callback xdr procedure numbers */
#define ONCRPC_SMD_BRIDGE_FORWARD_CALLBACK_F_TYPE_PROC 3
#define ONCRPC_SMD_BRIDGE_SERVER_RECEIVE_F_TYPE_PROC 4
/* End callback xdr procedure numbers */


/* XDR Routine Prototypes go here */

/*
 * struct sio_ioctl_connection_speed_change_notif XDR_SMD_BRIDGE_MODEM_SEND
 */
boolean xdr_smd_bridge_modem_send_sio_ioctl_connection_speed_change_notif (xdr_s_type *xdrs, struct sio_ioctl_connection_speed_change_notif const *sptr);

/*
 * struct sio_ioctl_connection_speed_change_notif XDR_SMD_BRIDGE_MODEM_RECV
 */
boolean xdr_smd_bridge_modem_recv_sio_ioctl_connection_speed_change_notif (xdr_s_type *xdrs, struct sio_ioctl_connection_speed_change_notif *sptr);

/*
 * union sio_ioctl_param XDR_SMD_BRIDGE_MODEM_SEND
 */
boolean xdr_smd_bridge_modem_send_sio_ioctl_param (xdr_s_type *xdrs, union sio_ioctl_param const *uptr, sio_ioctl_cmd_type obj_disc);

/*
 * union sio_ioctl_param XDR_SMD_BRIDGE_MODEM_RECV
 */
boolean xdr_smd_bridge_modem_recv_sio_ioctl_param (xdr_s_type *xdrs, union sio_ioctl_param *uptr, sio_ioctl_cmd_type obj_disc);

/*
 * struct smd_bridge_open XDR_SMD_BRIDGE_MODEM_SEND
 */
boolean xdr_smd_bridge_modem_send_smd_bridge_open (xdr_s_type *xdrs, struct smd_bridge_open const *sptr);

/*
 * struct smd_bridge_open XDR_SMD_BRIDGE_MODEM_RECV
 */
boolean xdr_smd_bridge_modem_recv_smd_bridge_open (xdr_s_type *xdrs, struct smd_bridge_open *sptr);

/*
 * struct smd_bridge_ioctl_cmd XDR_SMD_BRIDGE_MODEM_SEND
 */
boolean xdr_smd_bridge_modem_send_smd_bridge_ioctl_cmd (xdr_s_type *xdrs, struct smd_bridge_ioctl_cmd const *sptr);

/*
 * struct smd_bridge_ioctl_cmd XDR_SMD_BRIDGE_MODEM_RECV
 */
boolean xdr_smd_bridge_modem_recv_smd_bridge_ioctl_cmd (xdr_s_type *xdrs, struct smd_bridge_ioctl_cmd *sptr);

/*
 * struct smd_bridge_remote_cmd_param XDR_SMD_BRIDGE_MODEM_SEND
 */
boolean xdr_smd_bridge_modem_send_smd_bridge_remote_cmd_param (xdr_s_type *xdrs, struct smd_bridge_remote_cmd_param const *sptr);

/*
 * struct smd_bridge_remote_cmd_param XDR_SMD_BRIDGE_MODEM_RECV
 */
boolean xdr_smd_bridge_modem_recv_smd_bridge_remote_cmd_param (xdr_s_type *xdrs, struct smd_bridge_remote_cmd_param *sptr);

#endif /* ! SMD_BRIDGE_MODEM_RPC_H */
