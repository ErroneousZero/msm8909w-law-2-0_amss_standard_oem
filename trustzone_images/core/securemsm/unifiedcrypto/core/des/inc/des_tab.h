/*===========================================================================

               A S W   S E C U R I T Y   S E R V I C E S

                    C O M M O N   U T I L I T I E S

GENERAL DESCRIPTION


EXTERNALIZED FUNCTIONS


INITIALIZATION AND SEQUENCING REQUIREMENTS

Copyright (c) 2013 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
===========================================================================*/

/*===========================================================================

                      EDIT HISTORY FOR FILE

  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/securemsm/unifiedcrypto/core/des/inc/des_tab.h#1 $
  $DateTime: 2016/06/17 14:31:11 $
  $Author: pwbldsvc $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
05/02/13   nk      Switched off QDSP_COMPATIBLE_SUBKEY and switched on ALT_ECB   
04/16/13   nk      Intial revision
===========================================================================*/

/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include "uc_comdef.h"


/*===========================================================================

            REGIONAL DEFINITIONS AND DECLARATIONS FOR MODULE

===========================================================================*/
/*lint -e574  -e737 -e750 -e740 -e754 */
/* 574: Signed-unsigned mix with relational */
/* 737: Loss of sign in promotion from int to unsigned int */
/* 740: Unusual pointer cast (incompatible indirect types) */
/* 750: local macro 'PERM_OP' (line 307, file secencarmdes.c) not referenced */
/* 754: local structure member 'des_ks_struct::_' (line 94, file 
        secencarmdes.c) not referenced */


/* DES definitions */
#define DES_KEY_SZ 	(sizeof(des_cblock))
#define DES_ENCRYPT	1
#define DES_DECRYPT	0

#define ALT_ECB
//#define QDSP_COMPATIBLE_SUBKEY  // This mode is not working in krait


typedef uint8 des_cblock[8];

typedef struct des_ks_struct
{
  des_cblock _;
} des_key_schedule[16];

/**
 * Enum for Cipher DES mode
 */
typedef enum 
{
  DES_MODE_ECB          = 0x0,    ///< ECB Mode
  DES_MODE_CBC          = 0x1,    ///< CBC Mode
} des_op_mode;


/*---------------------------------------------------------------------------
  Local function declarations
---------------------------------------------------------------------------*/

int des_cbc_encrypt
(
  des_cblock*                   input,
  des_cblock*                   output,
  uint16                        length,
  des_key_schedule              schedule,
  des_cblock*                   ivec,
  des_op_mode                   op_mode
);

int des_cbc_decrypt
(
  des_cblock*                   input,
  des_cblock*                   output,
  uint16                        length,
  des_key_schedule              schedule,
  des_cblock*                   ivec,
  des_op_mode                   op_mode
);

/*===========================================================================

            LOCAL DEFINITIONS AND DECLARATIONS FOR MODULE

===========================================================================*/

/*---------------------------------------------------------------------------
  Local data defintions
---------------------------------------------------------------------------*/


/**
   Copies four consecutive characters to a long. 
*/
#define c2l(c,l)  (/*lint -e616 */l  = ((uint32)(*((c)++)))      , \
                   l |= ((uint32)(*((c)++))) <<  8,                \
                   l |= ((uint32)(*((c)++))) << 16,                \
                   l |= ((uint32)(*((c)++))) << 24  /*lint -e616 */)

/** 
  Copies one to seven consecutive characters to two longs.
  @note c is not incremented as per c2l. 
*/
#define c2ln(c,l1,l2,n)  {/*lint -e616*/ \
                            c += n;      \
                            l1 = l2 = 0; \
                            switch (n) { \
                             case 7: l2 |= ((uint32)(*(--(c)))) << 16; \
                             case 6: l2 |= ((uint32)(*(--(c)))) <<  8; \
                             case 5: l2 |= ((uint32)(*(--(c))))      ; \
                             case 4: l1 |= ((uint32)(*(--(c)))) << 24; \
                             case 3: l1 |= ((uint32)(*(--(c)))) << 16; \
                             case 2: l1 |= ((uint32)(*(--(c)))) <<  8; \
                             case 1: l1 |= ((uint32)(*(--(c))))      ; \
                             default: break;} \
                            /*lint +e616 */}

/** 
  Copies a long value to four consecutive characters. 
*/
#define l2c(l,c)  (/*lint -e616 */*((c)++) = (uint8)(((l)      ) & 0xff), \
                    *((c)++) = (uint8)(((l) >>  8) & 0xff), \
                    *((c)++) = (uint8)(((l) >> 16) & 0xff), \
                    *((c)++) = (uint8)(((l) >> 24) & 0xff)/*lint +e616 */)

/**
  Copies two long values to one to seven consecutive characters. 
  @note c is not incremented as per l2c.
*/
#define l2cn(l1,l2,c,n)  {/*lint -e616 */ \
                           c += n; \
                           switch (n) { \
                            case 7: *(--(c)) = (uint8)(((l2) >> 16) & 0xff); \
                            case 6: *(--(c)) = (uint8)(((l2) >>  8) & 0xff); \
                            case 5: *(--(c)) = (uint8)(((l2)      ) & 0xff); \
                            case 4: *(--(c)) = (uint8)(((l1) >> 24) & 0xff); \
                            case 3: *(--(c)) = (uint8)(((l1) >> 16) & 0xff); \
                            case 2: *(--(c)) = (uint8)(((l1) >>  8) & 0xff); \
                            case 1: *(--(c)) = (uint8)(((l1)      ) & 0xff); \
                            default: break;  } \
                          /*lint -e616 */}

 


#ifdef QDSP_COMPATIBLE_SUBKEY

/* Key schedule-related tables from FIPS-46 */
/* permuted choice table (key) */
static unsigned char pc1[] = 
{
  57, 49, 41, 33, 25, 17,  9,
  1, 58, 50, 42, 34, 26, 18,
  10,  2, 59, 51, 43, 35, 27,
  19, 11,  3, 60, 52, 44, 36,

  63, 55, 47, 39, 31, 23, 15,
  7, 62, 54, 46, 38, 30, 22,
  14,  6, 61, 53, 45, 37, 29,
  21, 13,  5, 28, 20, 12,  4
};

/* number left rotations of pc1 */
static const unsigned char totrot[] = 
{
  1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28
};

/* permuted choice key (table) */
static unsigned char pc2[] = 
{
  14, 17, 11, 24,  1,  5,
  3, 28, 15,  6, 21, 10,
  23, 19, 12,  4, 26,  8,
  16,  7, 27, 20, 13,  2,
  41, 52, 31, 37, 47, 55,
  30, 40, 51, 45, 33, 48,
  44, 49, 39, 56, 34, 53,
  46, 42, 50, 36, 29, 32
};

/* bit 0 is left-most in byte */
static uint8 bytebit[] = 
{
  0200,0100,040,020,010,04,02,01
};


static unsigned long Spbox[8][64] = 
{
  {0x01010400,0x00000000,0x00010000,0x01010404,
   0x01010004,0x00010404,0x00000004,0x00010000,
   0x00000400,0x01010400,0x01010404,0x00000400,
   0x01000404,0x01010004,0x01000000,0x00000004,
   0x00000404,0x01000400,0x01000400,0x00010400,
   0x00010400,0x01010000,0x01010000,0x01000404,
   0x00010004,0x01000004,0x01000004,0x00010004,
   0x00000000,0x00000404,0x00010404,0x01000000,
   0x00010000,0x01010404,0x00000004,0x01010000,
   0x01010400,0x01000000,0x01000000,0x00000400,
   0x01010004,0x00010000,0x00010400,0x01000004,
   0x00000400,0x00000004,0x01000404,0x00010404,
   0x01010404,0x00010004,0x01010000,0x01000404,
   0x01000004,0x00000404,0x00010404,0x01010400,
   0x00000404,0x01000400,0x01000400,0x00000000,
   0x00010004,0x00010400,0x00000000,0x01010004},

  {0x80108020,0x80008000,0x00008000,0x00108020,
   0x00100000,0x00000020,0x80100020,0x80008020,
   0x80000020,0x80108020,0x80108000,0x80000000,
   0x80008000,0x00100000,0x00000020,0x80100020,
   0x00108000,0x00100020,0x80008020,0x00000000,
   0x80000000,0x00008000,0x00108020,0x80100000,
   0x00100020,0x80000020,0x00000000,0x00108000,
   0x00008020,0x80108000,0x80100000,0x00008020,
   0x00000000,0x00108020,0x80100020,0x00100000,
   0x80008020,0x80100000,0x80108000,0x00008000,
   0x80100000,0x80008000,0x00000020,0x80108020,
   0x00108020,0x00000020,0x00008000,0x80000000,
   0x00008020,0x80108000,0x00100000,0x80000020,
   0x00100020,0x80008020,0x80000020,0x00100020,
   0x00108000,0x00000000,0x80008000,0x00008020,
   0x80000000,0x80100020,0x80108020,0x00108000},

  {0x00000208,0x08020200,0x00000000,0x08020008,
   0x08000200,0x00000000,0x00020208,0x08000200,
   0x00020008,0x08000008,0x08000008,0x00020000,
   0x08020208,0x00020008,0x08020000,0x00000208,
   0x08000000,0x00000008,0x08020200,0x00000200,
   0x00020200,0x08020000,0x08020008,0x00020208,
   0x08000208,0x00020200,0x00020000,0x08000208,
   0x00000008,0x08020208,0x00000200,0x08000000,
   0x08020200,0x08000000,0x00020008,0x00000208,
   0x00020000,0x08020200,0x08000200,0x00000000,
   0x00000200,0x00020008,0x08020208,0x08000200,
   0x08000008,0x00000200,0x00000000,0x08020008,
   0x08000208,0x00020000,0x08000000,0x08020208,
   0x00000008,0x00020208,0x00020200,0x08000008,
   0x08020000,0x08000208,0x00000208,0x08020000,
   0x00020208,0x00000008,0x08020008,0x00020200},

  {0x00802001,0x00002081,0x00002081,0x00000080,
   0x00802080,0x00800081,0x00800001,0x00002001,
   0x00000000,0x00802000,0x00802000,0x00802081,
   0x00000081,0x00000000,0x00800080,0x00800001,
   0x00000001,0x00002000,0x00800000,0x00802001,
   0x00000080,0x00800000,0x00002001,0x00002080,
   0x00800081,0x00000001,0x00002080,0x00800080,
   0x00002000,0x00802080,0x00802081,0x00000081,
   0x00800080,0x00800001,0x00802000,0x00802081,
   0x00000081,0x00000000,0x00000000,0x00802000,
   0x00002080,0x00800080,0x00800081,0x00000001,
   0x00802001,0x00002081,0x00002081,0x00000080,
   0x00802081,0x00000081,0x00000001,0x00002000,
   0x00800001,0x00002001,0x00802080,0x00800081,
   0x00002001,0x00002080,0x00800000,0x00802001,
   0x00000080,0x00800000,0x00002000,0x00802080},

  {0x00000100,0x02080100,0x02080000,0x42000100,
   0x00080000,0x00000100,0x40000000,0x02080000,
   0x40080100,0x00080000,0x02000100,0x40080100,
   0x42000100,0x42080000,0x00080100,0x40000000,
   0x02000000,0x40080000,0x40080000,0x00000000,
   0x40000100,0x42080100,0x42080100,0x02000100,
   0x42080000,0x40000100,0x00000000,0x42000000,
   0x02080100,0x02000000,0x42000000,0x00080100,
   0x00080000,0x42000100,0x00000100,0x02000000,
   0x40000000,0x02080000,0x42000100,0x40080100,
   0x02000100,0x40000000,0x42080000,0x02080100,
   0x40080100,0x00000100,0x02000000,0x42080000,
   0x42080100,0x00080100,0x42000000,0x42080100,
   0x02080000,0x00000000,0x40080000,0x42000000,
   0x00080100,0x02000100,0x40000100,0x00080000,
   0x00000000,0x40080000,0x02080100,0x40000100},

  {0x20000010,0x20400000,0x00004000,0x20404010,
   0x20400000,0x00000010,0x20404010,0x00400000,
   0x20004000,0x00404010,0x00400000,0x20000010,
   0x00400010,0x20004000,0x20000000,0x00004010,
   0x00000000,0x00400010,0x20004010,0x00004000,
   0x00404000,0x20004010,0x00000010,0x20400010,
   0x20400010,0x00000000,0x00404010,0x20404000,
   0x00004010,0x00404000,0x20404000,0x20000000,
   0x20004000,0x00000010,0x20400010,0x00404000,
   0x20404010,0x00400000,0x00004010,0x20000010,
   0x00400000,0x20004000,0x20000000,0x00004010,
   0x20000010,0x20404010,0x00404000,0x20400000,
   0x00404010,0x20404000,0x00000000,0x20400010,
   0x00000010,0x00004000,0x20400000,0x00404010,
   0x00004000,0x00400010,0x20004010,0x00000000,
   0x20404000,0x20000000,0x00400010,0x20004010},

  {0x00200000,0x04200002,0x04000802,0x00000000,
   0x00000800,0x04000802,0x00200802,0x04200800,
   0x04200802,0x00200000,0x00000000,0x04000002,
   0x00000002,0x04000000,0x04200002,0x00000802,
   0x04000800,0x00200802,0x00200002,0x04000800,
   0x04000002,0x04200000,0x04200800,0x00200002,
   0x04200000,0x00000800,0x00000802,0x04200802,
   0x00200800,0x00000002,0x04000000,0x00200800,
   0x04000000,0x00200800,0x00200000,0x04000802,
   0x04000802,0x04200002,0x04200002,0x00000002,
   0x00200002,0x04000000,0x04000800,0x00200000,
   0x04200800,0x00000802,0x00200802,0x04200800,
   0x00000802,0x04000002,0x04200802,0x04200000,
   0x00200800,0x00000000,0x00000002,0x04200802,
   0x00000000,0x00200802,0x04200000,0x00000800,
   0x04000002,0x04000800,0x00000800,0x00200002},

  {0x10001040,0x00001000,0x00040000,0x10041040,
   0x10000000,0x10001040,0x00000040,0x10000000,
   0x00040040,0x10040000,0x10041040,0x00041000,
   0x10041000,0x00041040,0x00001000,0x00000040,
   0x10040000,0x10000040,0x10001000,0x00001040,
   0x00041000,0x00040040,0x10040040,0x10041000,
   0x00001040,0x00000000,0x00000000,0x10040040,
   0x10000040,0x10001000,0x00041040,0x00040000,
   0x00041040,0x00040000,0x10041000,0x00001000,
   0x00000040,0x10040040,0x00001000,0x00041040,
   0x10001000,0x00000040,0x10000040,0x10040000,
   0x10040040,0x10000000,0x00040000,0x10001040,
   0x00000000,0x10041040,0x00040040,0x10000040,
   0x10040000,0x10001000,0x10001040,0x00000000,
   0x10041040,0x00041000,0x00041000,0x00001040,
   0x00001040,0x00040040,0x10000000,0x10041000},
};

#define F(l,r,key){\
        work = ((r >> 4) | (r << 28)) ^ *(key); \
        l ^= Spbox[ 6][ work        & 0x3f];    \
        l ^= Spbox[ 4][(work >> 8 ) & 0x3f];    \
        l ^= Spbox[ 2][(work >> 16) & 0x3f];    \
        l ^= Spbox[ 0][(work >> 24) & 0x3f];    \
        work = r ^ *(key+1);                    \
        l ^= Spbox[ 7][ work        & 0x3f];    \
        l ^= Spbox[ 5][(work >>  8) & 0x3f];    \
        l ^= Spbox[ 3][(work >> 16) & 0x3f];    \
        l ^= Spbox[ 1][(work >> 24) & 0x3f];    \
}

#else /* QDSP_COMPATIBLE_SUBKEY */

#endif /* QDSP_COMPATIBLE_SUBKEY */


#define PERM_OP(a,b,t,n,m) ( (t) = ((((a) >> (n)) ^ (b)) & (m)),     \
                                   (b)^= (t),                        \
                                   (a)^= ((t)<<(n)))

#define HPERM_OP(a,t,n,m) ( (t) = ((((a) << (16-(n))) ^ (a)) & (m)), \
                                  (a) = (a) ^ (t) ^ (t >> (16-(n))) )

#define ITERATIONS 16

/* The changes to this macro may help or hinder, depending on the
 * compiler and the achitecture.  gcc2 always seems to do well :-).  */
#ifdef ALT_ECB

#define D_ENCRYPT(L,R,S)                              \
    u = ((R ^ s[S  ])<<2);                            \
    t =   R ^ s[S+1];                                 \
    t = ((t>>2) + (t<<30));                           \
    L^=                                               \
    *(uint32 *)(des_SP + 0x0100 + ((t    ) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0300 + ((t>> 8) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0500 + ((t>>16) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0700 + ((t>>24) & 0xfc)) + \
    *(uint32 *)(des_SP +          ((u    ) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0200 + ((u>> 8) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0400 + ((u>>16) & 0xfc)) + \
    *(uint32 *)(des_SP + 0x0600 + ((u>>24) & 0xfc)) ;
  
#else /* ALT_ECB original version */

#define D_ENCRYPT(L,R,S)                     \
    u  = (R ^ s[S  ]);                       \
    t  =  R ^ s[S+1];                        \
    t  = ( (t>>4) + (t<<28) );               \
    L ^=  des_SPtrans[1][(t    ) & 0x3f] |   \
          des_SPtrans[3][(t>> 8) & 0x3f] |   \
          des_SPtrans[5][(t>>16) & 0x3f] |   \
          des_SPtrans[7][(t>>24) & 0x3f] |   \
          des_SPtrans[0][(u    ) & 0x3f] |   \
          des_SPtrans[2][(u>> 8) & 0x3f] |   \
          des_SPtrans[4][(u>>16) & 0x3f] |   \
          des_SPtrans[6][(u>>24) & 0x3f] ;
#endif /* ALT_ECB */

#ifdef ALT_ECB

static uint32 des_SPtrans[8][64] =
{
  /* nibble 0 */
  0x00820200, 0x00020000, 0x80800000, 0x80820200,
  0x00800000, 0x80020200, 0x80020000, 0x80800000,
  0x80020200, 0x00820200, 0x00820000, 0x80000200,
  0x80800200, 0x00800000, 0x00000000, 0x80020000,
  0x00020000, 0x80000000, 0x00800200, 0x00020200,
  0x80820200, 0x00820000, 0x80000200, 0x00800200,
  0x80000000, 0x00000200, 0x00020200, 0x80820000,
  0x00000200, 0x80800200, 0x80820000, 0x00000000,
  0x00000000, 0x80820200, 0x00800200, 0x80020000,
  0x00820200, 0x00020000, 0x80000200, 0x00800200,
  0x80820000, 0x00000200, 0x00020200, 0x80800000,
  0x80020200, 0x80000000, 0x80800000, 0x00820000,
  0x80820200, 0x00020200, 0x00820000, 0x80800200,
  0x00800000, 0x80000200, 0x80020000, 0x00000000,
  0x00020000, 0x00800000, 0x80800200, 0x00820200,
  0x80000000, 0x80820000, 0x00000200, 0x80020200,

  /* nibble 1 */
  0x10042004, 0x00000000, 0x00042000, 0x10040000,
  0x10000004, 0x00002004, 0x10002000, 0x00042000,
  0x00002000, 0x10040004, 0x00000004, 0x10002000,
  0x00040004, 0x10042000, 0x10040000, 0x00000004,
  0x00040000, 0x10002004, 0x10040004, 0x00002000,
  0x00042004, 0x10000000, 0x00000000, 0x00040004,
  0x10002004, 0x00042004, 0x10042000, 0x10000004,
  0x10000000, 0x00040000, 0x00002004, 0x10042004,
  0x00040004, 0x10042000, 0x10002000, 0x00042004,
  0x10042004, 0x00040004, 0x10000004, 0x00000000,
  0x10000000, 0x00002004, 0x00040000, 0x10040004,
  0x00002000, 0x10000000, 0x00042004, 0x10002004,
  0x10042000, 0x00002000, 0x00000000, 0x10000004,
  0x00000004, 0x10042004, 0x00042000, 0x10040000,
  0x10040004, 0x00040000, 0x00002004, 0x10002000,
  0x10002004, 0x00000004, 0x10040000, 0x00042000,

  /* nibble 2 */
  0x41000000, 0x01010040, 0x00000040, 0x41000040,
  0x40010000, 0x01000000, 0x41000040, 0x00010040,
  0x01000040, 0x00010000, 0x01010000, 0x40000000,
  0x41010040, 0x40000040, 0x40000000, 0x41010000,
  0x00000000, 0x40010000, 0x01010040, 0x00000040,
  0x40000040, 0x41010040, 0x00010000, 0x41000000,
  0x41010000, 0x01000040, 0x40010040, 0x01010000,
  0x00010040, 0x00000000, 0x01000000, 0x40010040,
  0x01010040, 0x00000040, 0x40000000, 0x00010000,
  0x40000040, 0x40010000, 0x01010000, 0x41000040,
  0x00000000, 0x01010040, 0x00010040, 0x41010000,
  0x40010000, 0x01000000, 0x41010040, 0x40000000,
  0x40010040, 0x41000000, 0x01000000, 0x41010040,
  0x00010000, 0x01000040, 0x41000040, 0x00010040,
  0x01000040, 0x00000000, 0x41010000, 0x40000040,
  0x41000000, 0x40010040, 0x00000040, 0x01010000,

  /* nibble 3 */
  0x00100402, 0x04000400, 0x00000002, 0x04100402,
  0x00000000, 0x04100000, 0x04000402, 0x00100002,
  0x04100400, 0x04000002, 0x04000000, 0x00000402,
  0x04000002, 0x00100402, 0x00100000, 0x04000000,
  0x04100002, 0x00100400, 0x00000400, 0x00000002,
  0x00100400, 0x04000402, 0x04100000, 0x00000400,
  0x00000402, 0x00000000, 0x00100002, 0x04100400,
  0x04000400, 0x04100002, 0x04100402, 0x00100000,
  0x04100002, 0x00000402, 0x00100000, 0x04000002,
  0x00100400, 0x04000400, 0x00000002, 0x04100000,
  0x04000402, 0x00000000, 0x00000400, 0x00100002,
  0x00000000, 0x04100002, 0x04100400, 0x00000400,
  0x04000000, 0x04100402, 0x00100402, 0x00100000,
  0x04100402, 0x00000002, 0x04000400, 0x00100402,
  0x00100002, 0x00100400, 0x04100000, 0x04000402,
  0x00000402, 0x04000000, 0x04000002, 0x04100400,

  /* nibble 4 */
  0x02000000, 0x00004000, 0x00000100, 0x02004108,
  0x02004008, 0x02000100, 0x00004108, 0x02004000,
  0x00004000, 0x00000008, 0x02000008, 0x00004100,
  0x02000108, 0x02004008, 0x02004100, 0x00000000,
  0x00004100, 0x02000000, 0x00004008, 0x00000108,
  0x02000100, 0x00004108, 0x00000000, 0x02000008,
  0x00000008, 0x02000108, 0x02004108, 0x00004008,
  0x02004000, 0x00000100, 0x00000108, 0x02004100,
  0x02004100, 0x02000108, 0x00004008, 0x02004000,
  0x00004000, 0x00000008, 0x02000008, 0x02000100,
  0x02000000, 0x00004100, 0x02004108, 0x00000000,
  0x00004108, 0x02000000, 0x00000100, 0x00004008,
  0x02000108, 0x00000100, 0x00000000, 0x02004108,
  0x02004008, 0x02004100, 0x00000108, 0x00004000,
  0x00004100, 0x02004008, 0x02000100, 0x00000108,
  0x00000008, 0x00004108, 0x02004000, 0x02000008,

  /* nibble 5 */
  0x20000010, 0x00080010, 0x00000000, 0x20080800,
  0x00080010, 0x00000800, 0x20000810, 0x00080000,
  0x00000810, 0x20080810, 0x00080800, 0x20000000,
  0x20000800, 0x20000010, 0x20080000, 0x00080810,
  0x00080000, 0x20000810, 0x20080010, 0x00000000,
  0x00000800, 0x00000010, 0x20080800, 0x20080010,
  0x20080810, 0x20080000, 0x20000000, 0x00000810,
  0x00000010, 0x00080800, 0x00080810, 0x20000800,
  0x00000810, 0x20000000, 0x20000800, 0x00080810,
  0x20080800, 0x00080010, 0x00000000, 0x20000800,
  0x20000000, 0x00000800, 0x20080010, 0x00080000,
  0x00080010, 0x20080810, 0x00080800, 0x00000010,
  0x20080810, 0x00080800, 0x00080000, 0x20000810,
  0x20000010, 0x20080000, 0x00080810, 0x00000000,
  0x00000800, 0x20000010, 0x20000810, 0x20080800,
  0x20080000, 0x00000810, 0x00000010, 0x20080010,

  /* nibble 6 */
  0x00001000, 0x00000080, 0x00400080, 0x00400001,
  0x00401081, 0x00001001, 0x00001080, 0x00000000,
  0x00400000, 0x00400081, 0x00000081, 0x00401000,
  0x00000001, 0x00401080, 0x00401000, 0x00000081,
  0x00400081, 0x00001000, 0x00001001, 0x00401081,
  0x00000000, 0x00400080, 0x00400001, 0x00001080,
  0x00401001, 0x00001081, 0x00401080, 0x00000001,
  0x00001081, 0x00401001, 0x00000080, 0x00400000,
  0x00001081, 0x00401000, 0x00401001, 0x00000081,
  0x00001000, 0x00000080, 0x00400000, 0x00401001,
  0x00400081, 0x00001081, 0x00001080, 0x00000000,
  0x00000080, 0x00400001, 0x00000001, 0x00400080,
  0x00000000, 0x00400081, 0x00400080, 0x00001080,
  0x00000081, 0x00001000, 0x00401081, 0x00400000,
  0x00401080, 0x00000001, 0x00001001, 0x00401081,
  0x00400001, 0x00401080, 0x00401000, 0x00001001,

  /* nibble 7 */
  0x08200020, 0x08208000, 0x00008020, 0x00000000,
  0x08008000, 0x00200020, 0x08200000, 0x08208020,
  0x00000020, 0x08000000, 0x00208000, 0x00008020,
  0x00208020, 0x08008020, 0x08000020, 0x08200000,
  0x00008000, 0x00208020, 0x00200020, 0x08008000,
  0x08208020, 0x08000020, 0x00000000, 0x00208000,
  0x08000000, 0x00200000, 0x08008020, 0x08200020,
  0x00200000, 0x00008000, 0x08208000, 0x00000020,
  0x00200000, 0x00008000, 0x08000020, 0x08208020,
  0x00008020, 0x08000000, 0x00000000, 0x00208000,
  0x08200020, 0x08008020, 0x08008000, 0x00200020,
  0x08208000, 0x00000020, 0x00200020, 0x08008000,
  0x08208020, 0x00200000, 0x08200000, 0x08000020,
  0x00208000, 0x00008020, 0x08008020, 0x08200000,
  0x00000020, 0x08208000, 0x00208020, 0x00000000,
  0x08000000, 0x08200020, 0x00008000, 0x00208020
};

#endif /* ALT_ECB */

static unsigned char odd_parity[256] =
{
  1,  1,  2,  2,  4,  4,  7,  7,  8,  8, 11, 11, 13, 13, 14, 14,
  16, 16, 19, 19, 21, 21, 22, 22, 25, 25, 26, 26, 28, 28, 31, 31,
  32, 32, 35, 35, 37, 37, 38, 38, 41, 41, 42, 42, 44, 44, 47, 47,
  49, 49, 50, 50, 52, 52, 55, 55, 56, 56, 59, 59, 61, 61, 62, 62,
  64, 64, 67, 67, 69, 69, 70, 70, 73, 73, 74, 74, 76, 76, 79, 79,
  81, 81, 82, 82, 84, 84, 87, 87, 88, 88, 91, 91, 93, 93, 94, 94,
  97, 97, 98, 98,100,100,103,103,104,104,107,107,109,109,110,110,
  112,112,115,115,117,117,118,118,121,121,122,122,124,124,127,127,
  128,128,131,131,133,133,134,134,137,137,138,138,140,140,143,143, 
  145,145,146,146,148,148,151,151,152,152,155,155,157,157,158,158,
  161,161,162,162,164,164,167,167,168,168,171,171,173,173,174,174,
  176,176,179,179,181,181,182,182,185,185,186,186,188,188,191,191,
  193,193,194,194,196,196,199,199,200,200,203,203,205,205,206,206,
  208,208,211,211,213,213,214,214,217,217,218,218,220,220,223,223,
  224,224,227,227,229,229,230,230,233,233,234,234,236,236,239,239,
  241,241,242,242,244,244,247,247,248,248,251,251,253,253,254,254
};

#ifndef QDSP_COMPATIBLE_SUBKEY

static uint32 des_skb[8][64] =
{
  /* for C bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
  0x00000000,0x00000010,0x20000000,0x20000010,
  0x00010000,0x00010010,0x20010000,0x20010010,
  0x00000800,0x00000810,0x20000800,0x20000810,
  0x00010800,0x00010810,0x20010800,0x20010810,
  0x00000020,0x00000030,0x20000020,0x20000030,
  0x00010020,0x00010030,0x20010020,0x20010030,
  0x00000820,0x00000830,0x20000820,0x20000830,
  0x00010820,0x00010830,0x20010820,0x20010830,
  0x00080000,0x00080010,0x20080000,0x20080010,
  0x00090000,0x00090010,0x20090000,0x20090010,
  0x00080800,0x00080810,0x20080800,0x20080810,
  0x00090800,0x00090810,0x20090800,0x20090810,
  0x00080020,0x00080030,0x20080020,0x20080030,
  0x00090020,0x00090030,0x20090020,0x20090030,
  0x00080820,0x00080830,0x20080820,0x20080830,
  0x00090820,0x00090830,0x20090820,0x20090830,

  /* for C bits (numbered as per FIPS 46) 7 8 10 11 12 13 */
  0x00000000,0x02000000,0x00002000,0x02002000,
  0x00200000,0x02200000,0x00202000,0x02202000,
  0x00000004,0x02000004,0x00002004,0x02002004,
  0x00200004,0x02200004,0x00202004,0x02202004,
  0x00000400,0x02000400,0x00002400,0x02002400,
  0x00200400,0x02200400,0x00202400,0x02202400,
  0x00000404,0x02000404,0x00002404,0x02002404,
  0x00200404,0x02200404,0x00202404,0x02202404,
  0x10000000,0x12000000,0x10002000,0x12002000,
  0x10200000,0x12200000,0x10202000,0x12202000,
  0x10000004,0x12000004,0x10002004,0x12002004,
  0x10200004,0x12200004,0x10202004,0x12202004,
  0x10000400,0x12000400,0x10002400,0x12002400,
  0x10200400,0x12200400,0x10202400,0x12202400,
  0x10000404,0x12000404,0x10002404,0x12002404,
  0x10200404,0x12200404,0x10202404,0x12202404,

  /* for C bits (numbered as per FIPS 46) 14 15 16 17 19 20 */
  0x00000000,0x00000001,0x00040000,0x00040001,
  0x01000000,0x01000001,0x01040000,0x01040001,
  0x00000002,0x00000003,0x00040002,0x00040003,
  0x01000002,0x01000003,0x01040002,0x01040003,
  0x00000200,0x00000201,0x00040200,0x00040201,
  0x01000200,0x01000201,0x01040200,0x01040201,
  0x00000202,0x00000203,0x00040202,0x00040203,
  0x01000202,0x01000203,0x01040202,0x01040203,
  0x08000000,0x08000001,0x08040000,0x08040001,
  0x09000000,0x09000001,0x09040000,0x09040001,
  0x08000002,0x08000003,0x08040002,0x08040003,
  0x09000002,0x09000003,0x09040002,0x09040003,
  0x08000200,0x08000201,0x08040200,0x08040201,
  0x09000200,0x09000201,0x09040200,0x09040201,
  0x08000202,0x08000203,0x08040202,0x08040203,
  0x09000202,0x09000203,0x09040202,0x09040203,

  /* for C bits (numbered as per FIPS 46) 21 23 24 26 27 28 */
  0x00000000,0x00100000,0x00000100,0x00100100,
  0x00000008,0x00100008,0x00000108,0x00100108,
  0x00001000,0x00101000,0x00001100,0x00101100,
  0x00001008,0x00101008,0x00001108,0x00101108,
  0x04000000,0x04100000,0x04000100,0x04100100,
  0x04000008,0x04100008,0x04000108,0x04100108,
  0x04001000,0x04101000,0x04001100,0x04101100,
  0x04001008,0x04101008,0x04001108,0x04101108,
  0x00020000,0x00120000,0x00020100,0x00120100,
  0x00020008,0x00120008,0x00020108,0x00120108,
  0x00021000,0x00121000,0x00021100,0x00121100,
  0x00021008,0x00121008,0x00021108,0x00121108,
  0x04020000,0x04120000,0x04020100,0x04120100,
  0x04020008,0x04120008,0x04020108,0x04120108,
   0x04021000,0x04121000,0x04021100,0x04121100,
  0x04021008,0x04121008,0x04021108,0x04121108,

  /* for D bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
  0x00000000,0x10000000,0x00010000,0x10010000,
  0x00000004,0x10000004,0x00010004,0x10010004,
  0x20000000,0x30000000,0x20010000,0x30010000,
  0x20000004,0x30000004,0x20010004,0x30010004,
  0x00100000,0x10100000,0x00110000,0x10110000,
  0x00100004,0x10100004,0x00110004,0x10110004,
  0x20100000,0x30100000,0x20110000,0x30110000,
  0x20100004,0x30100004,0x20110004,0x30110004,
  0x00001000,0x10001000,0x00011000,0x10011000,
  0x00001004,0x10001004,0x00011004,0x10011004,
  0x20001000,0x30001000,0x20011000,0x30011000,
  0x20001004,0x30001004,0x20011004,0x30011004,
  0x00101000,0x10101000,0x00111000,0x10111000,
  0x00101004,0x10101004,0x00111004,0x10111004,
  0x20101000,0x30101000,0x20111000,0x30111000,
  0x20101004,0x30101004,0x20111004,0x30111004,

  /* for D bits (numbered as per FIPS 46) 8 9 11 12 13 14 */
  0x00000000,0x08000000,0x00000008,0x08000008,
  0x00000400,0x08000400,0x00000408,0x08000408,
  0x00020000,0x08020000,0x00020008,0x08020008,
  0x00020400,0x08020400,0x00020408,0x08020408,
  0x00000001,0x08000001,0x00000009,0x08000009,
  0x00000401,0x08000401,0x00000409,0x08000409,
  0x00020001,0x08020001,0x00020009,0x08020009,
  0x00020401,0x08020401,0x00020409,0x08020409,
  0x02000000,0x0A000000,0x02000008,0x0A000008,
  0x02000400,0x0A000400,0x02000408,0x0A000408,
  0x02020000,0x0A020000,0x02020008,0x0A020008,
  0x02020400,0x0A020400,0x02020408,0x0A020408,
  0x02000001,0x0A000001,0x02000009,0x0A000009,
  0x02000401,0x0A000401,0x02000409,0x0A000409,
  0x02020001,0x0A020001,0x02020009,0x0A020009,
  0x02020401,0x0A020401,0x02020409,0x0A020409,

  /* for D bits (numbered as per FIPS 46) 16 17 18 19 20 21 */
  0x00000000,0x00000100,0x00080000,0x00080100,
  0x01000000,0x01000100,0x01080000,0x01080100,
  0x00000010,0x00000110,0x00080010,0x00080110,
  0x01000010,0x01000110,0x01080010,0x01080110,
  0x00200000,0x00200100,0x00280000,0x00280100,
  0x01200000,0x01200100,0x01280000,0x01280100,
  0x00200010,0x00200110,0x00280010,0x00280110,
  0x01200010,0x01200110,0x01280010,0x01280110,
  0x00000200,0x00000300,0x00080200,0x00080300,
  0x01000200,0x01000300,0x01080200,0x01080300,
  0x00000210,0x00000310,0x00080210,0x00080310,
  0x01000210,0x01000310,0x01080210,0x01080310,
  0x00200200,0x00200300,0x00280200,0x00280300,
  0x01200200,0x01200300,0x01280200,0x01280300,
  0x00200210,0x00200310,0x00280210,0x00280310,
  0x01200210,0x01200310,0x01280210,0x01280310,

  /* for D bits (numbered as per FIPS 46) 22 23 24 25 27 28 */
  0x00000000,0x04000000,0x00040000,0x04040000,
  0x00000002,0x04000002,0x00040002,0x04040002,
  0x00002000,0x04002000,0x00042000,0x04042000,
  0x00002002,0x04002002,0x00042002,0x04042002,
  0x00000020,0x04000020,0x00040020,0x04040020,
  0x00000022,0x04000022,0x00040022,0x04040022,
  0x00002020,0x04002020,0x00042020,0x04042020,
  0x00002022,0x04002022,0x00042022,0x04042022,
  0x00000800,0x04000800,0x00040800,0x04040800,
  0x00000802,0x04000802,0x00040802,0x04040802,
  0x00002800,0x04002800,0x00042800,0x04042800,
  0x00002802,0x04002802,0x00042802,0x04042802,
  0x00000820,0x04000820,0x00040820,0x04040820,
  0x00000822,0x04000822,0x00040822,0x04040822,
  0x00002820,0x04002820,0x00042820,0x04042820,
  0x00002822,0x04002822,0x00042822,0x04042822,
};

static char shifts2[16] =
{
  0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0
};

#endif /* QDSP_COMPATIBLE_SUBKEY */



