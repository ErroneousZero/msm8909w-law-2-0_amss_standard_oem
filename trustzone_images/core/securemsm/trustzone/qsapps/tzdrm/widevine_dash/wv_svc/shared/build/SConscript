#===============================================================================
#
# Widevine TZ Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2013-2014 by QUALCOMM Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Technologies Inc. Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/securemsm/trustzone/qsapps/tzdrm/widevine_dash/wv_svc/shared/build/SConscript#1 $
#  $DateTime: 2016/06/17 14:31:11 $
#  $Author: pwbldsvc $
#  $Change: 10727476 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains pkwrapperents describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/18/14    rk     Added new path for app_common_svc_handler.h
# 07/15/13    cx     Added pack rules
# 04/08/13    cx     Initial Version
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/widevine_dash/wv_svc/shared"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'SERVICES',
   'SYSTEMDRIVERS',
]

env.RequirePublicApi(CBSP_API)

env.PublishPrivateApi('SECUREMSM', [
   "${INC_ROOT}/core/api/kernel/libstd/stringl",
   "${INC_ROOT}/core/api/services",
   "${INC_ROOT}/core/api/securemsm/trustzone/qsee",
   "${INC_ROOT}/core/api/securemsm/crypto",
   "${COREBSP_ROOT}/securemsm/tzbsp/include/crypto",
   "${COREBSP_ROOT}/securemsm/tzbsp/include/",
   "${INC_ROOT}/core/securemsm/secrsa/shared/inc",
   "${INC_ROOT}/core/securemsm/secrsa/env/sampleapp/inc",
   "${INC_ROOT}/core/securemsm/secmath/shared/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common/src",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/services/src",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/common/app_common_svc/shared/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/tzcommon/crypto/chipset/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/tzcommon/config/shared/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/tzcommon/common/shared/src",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/tzcommon/common/shared/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/tzcommon/common/chipset/${CHIPSET}/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/widevine_dash/wv_svc/shared/inc",
   "${INC_ROOT}/core/securemsm/trustzone/qsapps/tzdrm/widevine_dash/core/shared/inc",
   "${INC_ROOT}/core/api/dal",
])

if env.has_key('USES_NO_DEBUG'):
   env.Replace(DBUG_MODE = "NoDebug")
else:
   env.Replace(DBUG_MODE = "Debug")

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

# do not generate thumb code for inline assembler code
env.Append(ARMCC_OPT = ' --loose_implicit_cast -W')
env.Append(ARMCPP_OPT = ' --loose_implicit_cast -W')


#----------------------------------------------------------------------------
# WIDEVINE Shared Library
#----------------------------------------------------------------------------   

SME_WIDEVINE_DASH_SHARED_LIB_SOURCES = [
        '${BUILDPATH}/src/wv_oemcrypto_dash.c',
        '${BUILDPATH}/src/wv_oemcrypto_prov.c',
        '${BUILDPATH}/src/wv_oemcrypto_rsa.c'
]

sme_widevine_dash_shared_lib = '${BUILDPATH}/sme_widevine_dash_shared'

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
env.AddBinaryLibrary (['WIDEVINE_IMAGE'],sme_widevine_dash_shared_lib, [SME_WIDEVINE_DASH_SHARED_LIB_SOURCES])

#-------------------------------------------------------------------------------
# Pack out files
#-------------------------------------------------------------------------------
NOSHIP_SOURCES = env.FindFiles("*", SRCPATH + "/inc")
env.CleanPack('WIDEVINE_IMAGE', NOSHIP_SOURCES)

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
