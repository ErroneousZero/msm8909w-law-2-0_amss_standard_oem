#===============================================================================
#
# ctzl_proxy
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2013 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header:  $
#  $DateTime: $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/25/14   tp     Changed DRM sconscripts to use the prxy_services 
#                   library instead of linking to qsee_services.
# 10/17/13   ib		Add SECUREMM		
# 05/26/13   sn		Add SECUREUI		
# 10/18/12   ah     initial version
#===============================================================================
Import('env')
env = env.Clone()


#-------------------------------------------------------------------------------
# Set search path for securemsm subsystem files
#-------------------------------------------------------------------------------
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsapps/libs/applib/common/src")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsapps/libs/services/src")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/secmath/shared/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/secrsa/shared/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/secrsa/shared/src")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/shared/ecc/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/core/ecc/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/shared/aes/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/core/aes/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/shared/sha/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/core/sha/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/environment/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/shared/des/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/shared/ecc_generic/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/unifiedcrypto/core/ecc_generic/inc")
env.Append(CCFLAGS = " --restrict  -O3 -OTime -D_TZ_PROXY_LIB ")

#-------------------------------------------------------------------------------
# External depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'SERVICES',
   'MINK',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsapps/libs/applib/proxy/"

#-------------------------------------------------------------------------------
# Let Scons build the object files in $(BUILDPATH} and don't copy over files
#-------------------------------------------------------------------------------
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------



#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
SECMATH_SRC_SHARED = [
  '${BUILDPATH}/src/prxy_secmath.c',
  '${BUILDPATH}/src/prxy_secrsa.c',
  '${BUILDPATH}/src/prxy_services.c',
  '${BUILDPATH}/src/prxy_ecc.c',
  '${BUILDPATH}/src/prxy_qsee_shim.c',
  '${BUILDPATH}/src/prxy_ufaes.c',
  '${BUILDPATH}/src/prxy_ufdes.c',
  '${BUILDPATH}/src/prxy_ufsha.c',
]

# This depends on the random number generator provided by TZ
env.Append(CPPPATH = "${COREBSP_ROOT}/api/dal")
env.Append(CPPPATH = "${COREBSP_ROOT}/api/securemsm/crypto")
env.Append(CPPPATH = "${COREBSP_ROOT}/api/securemsm/trustzone/qsee")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/secmath/env/sampleapp/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/secrsa/env/sampleapp/inc")
env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsee/include")


# SECMATH_PRIV_HEADERS = env.GlobFiles('${BUILDPATH}/secmath/shared/src/*.h')
# SECMATH_PRIV_HEADERS += [ 
#   '${BUILDPATH}/secmath/shared/src/secmath_BIGINT_isprime.c',
# ]
#-------------------------------------------------------------------------------
# Add Libraries to images in the secboot3 boot architecture. Note we don't
# add the library into SBL1 image as SBL1 uses PBL secboot library instead
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

env.AddBinaryLibrary(['KEYMASTER_IMAGE','SAMPLEAPP_IMAGE', 'ASSURANCETEST_IMAGE', 'SECUREUISAMPLE_IMAGE', 'APTSFSTESTAPP_IMAGE', 'APTSFSTESTAPP2_IMAGE', 'APTCRYPTOTESTAPP_IMAGE', 'SECUREMM_IMAGE', 'WIDEVINE_IMAGE', 'PLAYREADY_IMAGE'],
	 '${BUILDPATH}/tzlib_proxy',
	 SECMATH_SRC_SHARED)
#env.CleanPack(['KEYMASTER_IMAGE','SAMPLEAPP_IMAGE','SECUREMM_IMAGE', 'WIDEVINE_IMAGE', 'PLAYREADY_IMAGE'], SECMATH_PRIV_HEADERS)
