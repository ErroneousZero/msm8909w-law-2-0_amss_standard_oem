


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       =====================
    2 00000000         ;
    3 00000000         ;             Scorpion architecture assembly language MM
                       U support
    4 00000000         ;
    5 00000000         ; GENERAL DESCRIPTION
    6 00000000         ;   This file contains the Scorpion hierarchichal cache 
                       and mmu control functions.
    7 00000000         ;   File originaly taken from: 
    8 00000000         ;
    9 00000000         ; Copyright 2011 by Qualcomm Technologies, Incorporated.
                         All Rights Reserved
   10 00000000         ;=======================================================
                       =====================
   11 00000000         ;=======================================================
                       =====================
   12 00000000         ;
   13 00000000         ;                       EDIT HISTORY FOR MODULE
   14 00000000         ;
   15 00000000         ; $Header: 
   16 00000000         ;
   17 00000000         ; This section contains comments describing changes made
                        to the module.
   18 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   19 00000000         ;
   20 00000000         ;
   21 00000000         ; when      who     what, where, why
   22 00000000         ; --------  ---     ------------------------------------
                       ---------------------
   23 00000000         ; 01/25/11  pre     Initial Version
   24 00000000         ;=======================================================
                       =====================
   25 00000000         ;=======================================================
                       =====================
   26 00000000         ;                             MODULE DEFINES
   27 00000000         ;=======================================================
                       =====================
   28 00000000         ;=======================================================
                       =====================
   29 00000000         ;                             MODULE INCLUDES
   30 00000000         ;=======================================================
                       =====================
   31 00000000                 GET              tzbsp_libarm_asm.inc
    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;                 T R U S T Z O N E      A S S E M B L Y
                       
    4 00000000         ;
    5 00000000         ;
    6 00000000         ; GENERAL DESCRIPTION
    7 00000000         ;   Assembly macros and definitions
    8 00000000         ;
    9 00000000         ; EXTERNALIZED SYMBOLS
   10 00000000         ;   None.
   11 00000000         ;
   12 00000000         ; INITIALIZATION AND SEQUENCING REQUIREMENTS



ARM Macro Assembler    Page 2 


   13 00000000         ;   None.
   14 00000000         ;
   15 00000000         ; Copyright (c) 2010 by QUALCOMM, Incorporated. All Righ
                       ts Reserved.
   16 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   17 00000000         
   18 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   19 00000000         ;
   20 00000000         ;                           EDIT HISTORY FOR FILE
   21 00000000         ;
   22 00000000         ; This section contains comments describing changes made
                        to the module.
   23 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   24 00000000         ;
   25 00000000         ;
   26 00000000         ; $Header:  $
   27 00000000         ; when       who     what, where, why
   28 00000000         ; --------   ---     -----------------------------------
                       ---------------------
   29 00000000         ; 05/19/10   tk      Added DMB, DSB and ISB macros.
   30 00000000         ; 05/14/10   tk      Added DMB to WaitForAccess to sync 
                       between cores.
   31 00000000         ; 04/09/10   tk      Initial revision.
   32 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   33 00000000         
   34 00000000         ; Options for DMB/DSB/ISB Barriers, define these manuall
                       y for RVCT < 3.0
   35 00000000                 IF               {ARCHITECTURE} != "7-A" :LAND: 
{ARCHITECTURE} != "7-M"
   40                          ENDIF
   41 00000000         
   42 00000000         ;=======================================================
                       =====================
   43 00000000         ; MACRO mdmb
   44 00000000         ;
   45 00000000         ; ARGS
   46 00000000         ;   NONE
   47 00000000         ;
   48 00000000         ; DESCRIPTION
   49 00000000         ;   Performs a data memory barrier, either using the ARM
                       v7 instruction or the
   50 00000000         ;   legacy coprocessor instruction.
   51 00000000         ;
   52 00000000         ; NOTES
   53 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   54 00000000         ;=======================================================
                       =====================
   55 00000000                 MACRO
   56 00000000                 mdmb
   57 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 00000000                 dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 00000000                 ELSE



ARM Macro Assembler    Page 3 


   60 00000000                 IF               {CONFIG} = 32
   61 00000000                 DCI              0xF57FF050 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   62 00000000                 ELSE
   63 00000000                 DCI              0xF3BF8F50 :OR: SY 
                                                            ; ARMv7 T1 Opcode
   64 00000000                 ENDIF
   65 00000000         ;mcr    p15, 0, r0, c7, c10, 5  ; Legacy Data Memory Bar
                       rier
   66 00000000                 ENDIF
   67 00000000                 MEND
   68 00000000         
   69 00000000         ;=======================================================
                       =====================
   70 00000000         ; MACRO mdsb
   71 00000000         ;
   72 00000000         ; ARGS
   73 00000000         ;   NONE
   74 00000000         ;
   75 00000000         ; DESCRIPTION
   76 00000000         ;   Performs a data synchronization barrier, either usin
                       g the ARMv7 instruction
   77 00000000         ;   or the legacy coprocessor instruction.
   78 00000000         ;
   79 00000000         ; NOTES
   80 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   81 00000000         ;=======================================================
                       =====================
   82 00000000                 MACRO
   83 00000000                 mdsb
   84 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000000                 dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000000                 ELSE
   87 00000000                 IF               {CONFIG} = 32
   88 00000000                 DCI              0xF57FF040 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   89 00000000                 ELSE
   90 00000000                 DCI              0xF3BF8F40 :OR: SY 
                                                            ; ARMv7 T1 Opcode
   91 00000000                 ENDIF
   92 00000000         ;mcr    p15, 0, r0, c7, c10, 4  ; Legacy Data Write Barr
                       ier
   93 00000000                 ENDIF
   94 00000000                 MEND
   95 00000000         
   96 00000000         ;=======================================================
                       =====================
   97 00000000         ; MACRO misb
   98 00000000         ;
   99 00000000         ; ARGS
  100 00000000         ;   NONE
  101 00000000         ;
  102 00000000         ; DESCRIPTION
  103 00000000         ;   Performs an instruction synchronization barrier, eit
                       her using the ARMv7
  104 00000000         ;   instruction or the legacy coprocessor instruction.



ARM Macro Assembler    Page 4 


  105 00000000         ;
  106 00000000         ; NOTES
  107 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
  108 00000000         ;=======================================================
                       =====================
  109 00000000                 MACRO
  110 00000000                 misb
  111 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000000                 isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000000                 ELSE
  114 00000000                 IF               {CONFIG} = 32
  115 00000000                 DCI              0xF57FF060 :OR: SY 
                                                            ; ARMv7 A1 Opcode
  116 00000000                 ELSE
  117 00000000                 DCI              0xF3BF8F60 :OR: SY 
                                                            ; ARMv7 T1 Opcode
  118 00000000                 ENDIF
  119 00000000         ;mcr    p15, 0, r0, c7, c5, 4   ; Legacy Pre-Fetch Flush
                       
  120 00000000                 ENDIF
  121 00000000                 MEND
  122 00000000         
  123 00000000                 MACRO
  124 00000000                 ISB
  125 00000000                 misb
  126 00000000                 MEND
  127 00000000         
  128 00000000                 MACRO
  129 00000000                 DSB
  130 00000000                 mdsb
  131 00000000                 MEND
  132 00000000         
  133 00000000                 END
   32 00000000         ;=======================================================
                       =====================
   33 00000000         ;                             MODULE IMPORTS
   34 00000000         ;=======================================================
                       =====================
   35 00000000         ;=======================================================
                       =====================
   36 00000000         ;                             MODULE EXPORTS
   37 00000000         ;=======================================================
                       =====================
   38 00000000                 EXPORT           tzbsp_cache_flush
   39 00000000                 EXPORT           tzbsp_dcache_enable
   40 00000000                 EXPORT           tzbsp_dcache_disable
   41 00000000                 EXPORT           tzbsp_dcache_is_enabled
   42 00000000                 EXPORT           tzbsp_dcache_clean_all
   43 00000000                 EXPORT           tzbsp_dcache_inval_all
   44 00000000                 EXPORT           tzbsp_dcache_flush_all
   45 00000000                 EXPORT           tzbsp_dcache_clean_region
   46 00000000                 EXPORT           tzbsp_dcache_inval_region
   47 00000000                 EXPORT           tzbsp_dcache_flush_region
   48 00000000                 EXPORT           tzbsp_dcache_inval_l1
   49 00000000                 EXPORT           tzbsp_dcache_inval_l2
   50 00000000                 EXPORT           tzbsp_dcache_clean_lx



ARM Macro Assembler    Page 5 


   51 00000000                 EXPORT           tzbsp_dcache_clean_inv_lx
   52 00000000                 EXPORT           tzbsp_dcache_iterate_set_way
   53 00000000                 EXPORT           tzbsp_icache_enable
   54 00000000                 EXPORT           tzbsp_icache_disable
   55 00000000                 EXPORT           tzbsp_icache_is_enabled
   56 00000000                 EXPORT           tzbsp_icache_inv
   57 00000000                 EXPORT           tzbsp_icache_inv_area
   58 00000000         ;=======================================================
                       =====================
   59 00000000         ;
   60 00000000         ;                        MACROS AND FUNCTIONS
   61 00000000         ;
   62 00000000         ;=======================================================
                       =====================
   63 00000000                 AREA             ARM_CACHE, CODE, READONLY
   64 00000000                 PRESERVE8
   65 00000000                 CODE32
   66 00000000         ;=======================================================
                       =====================
   67 00000000         ; MACRO dcache_granule_size
   68 00000000         ;
   69 00000000         ; ARGS
   70 00000000         ;   $reg - cache granule size in bytes
   71 00000000         ;   $tmp - cache granule size in words used for calculat
                       ion
   72 00000000         ;          of the size in bytes
   73 00000000         ;
   74 00000000         ; DESCRIPTION
   75 00000000         ;   cache_granule_size - get the size of the smallest dc
                       ache/unified
   76 00000000         ;   cache (available on ARMv7+). Note that the value of 
                       $reg and $tmp
   77 00000000         ;   will be modified.
   78 00000000         ;=======================================================
                       =====================
   79 00000000                 MACRO
   80 00000000                 dcache_granule_size
                                                $reg, $tmp
   81 00000000                 mrc              p15, 0, $tmp, c0, c0, 1 
                                                            ; read CTR
   82 00000000                 lsr              $tmp, #16
   83 00000000                 and              $tmp, #0xF  ; $tmp = CTR[DminLi
                                                            ne]
   84 00000000                 mov              $reg, #4    ; CTR[DminLine] = l
                                                            og2 num words
   85 00000000                 lsl              $reg, $reg, $tmp ; cache writeb
                                                            ack granule size in
                                                             bytes
   86 00000000                 MEND
   87 00000000         ; void tzbsp_dcache_enable(void)
   88 00000000         tzbsp_dcache_enable
                               FUNCTION
   89 00000000                 mdsb
   84 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000000 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000004                 ELSE



ARM Macro Assembler    Page 6 


   93                          ENDIF
   90 00000004                 misb
  111 00000004                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000004 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000008                 ELSE
  120                          ENDIF
   91 00000008 EE110F10        mrc              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR.
   92 0000000C E3800004        orr              r0, r0, #(1 << 2) ; SCTLR[C]=1.
                                                            
   93 00000010 EE010F10        mcr              p15, 0, r0, c1, c0, 0 
                                                            ; Write SCTLR.
   94 00000014                 mdsb
   84 00000014                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000014 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000018                 ELSE
   93                          ENDIF
   95 00000018                 misb
  111 00000018                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000018 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 0000001C                 ELSE
  120                          ENDIF
   96 0000001C E12FFF1E        bx               lr
   97 00000020                 ENDFUNC
   98 00000020         ; void tzbsp_dcache_disable(void)
   99 00000020         tzbsp_dcache_disable
                               FUNCTION
  100 00000020                 mdsb
   84 00000020                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000020 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000024                 ELSE
   93                          ENDIF
  101 00000024                 misb
  111 00000024                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000024 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000028                 ELSE
  120                          ENDIF
  102 00000028 EE110F10        mrc              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR.
  103 0000002C E3C00004        and              r0, r0, #~(1 << 2) 
                                                            ; SCTLR[C]=0.
  104 00000030 EE010F10        mcr              p15, 0, r0, c1, c0, 0 
                                                            ; Write SCTLR.
  105 00000034                 mdsb



ARM Macro Assembler    Page 7 


   84 00000034                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000034 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000038                 ELSE
   93                          ENDIF
  106 00000038                 misb
  111 00000038                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000038 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 0000003C                 ELSE
  120                          ENDIF
  107 0000003C E12FFF1E        bx               lr
  108 00000040                 ENDFUNC
  109 00000040         ; boolean tzbsp_dcache_is_enabled(void)
  110 00000040         tzbsp_dcache_is_enabled
                               FUNCTION
  111 00000040                 misb
  111 00000040                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000040 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000044                 ELSE
  120                          ENDIF
  112 00000044 EE110F10        mrc              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR.
  113 00000048 E2000004        and              r0, r0, #(1 << 2) 
                                                            ; Extract SCTLR[C].
                                                            
  114 0000004C E1A00120        lsr              r0, r0, #2  ; Move bit to posit
                                                            ion 0.
  115 00000050 E12FFF1E        bx               lr
  116 00000054                 ENDFUNC
  117 00000054         ;=======================================================
                       =====================
  118 00000054         ; tzbsp_dcache_iterate_set_way
  119 00000054         ;
  120 00000054         ; DESCRIPTION -
  121 00000054         ;   Iterates through the set/way and calls function pass
                       ed in
  122 00000054         ;=======================================================
                       =====================
  123 00000054         tzbsp_dcache_iterate_set_way
                               FUNCTION
  124 00000054 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  125 00000058 E1A06000        mov              r6, r0
  126 0000005C F57FF04F        DSB                          ; ensure ordering w
                                                            ith previous
  127 00000060         ; memory  accesses
  128 00000060 EE30BF30        mrc              p15, 1, r11, c0, c0, 1 
                                                            ; read clidr
  129 00000064 E21B3407        ands             r3, r11, #0x7000000 ; extract l
                                                            oc from clidr
  130 00000068 E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field



ARM Macro Assembler    Page 8 


  131 0000006C 0A00001B        beq              iterate_finished ; if loc is 0,
                                                             then no need to cl
                                                            ean
  132 00000070 E3A0A000        mov              r10, #0     ; start clean at ca
                                                            che level 0
  133 00000074         iterate_loop1
  134 00000074 E08A20AA        add              r2, r10, r10, lsr #1 ; work out
                                                             3x current cache l
                                                            evel
  135 00000078 E1A0123B        mov              r1, r11, lsr r2 ; extract cache
                                                             type bits from cli
                                                            dr
  136 0000007C E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache o
                                                            nly
  137 00000080 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this level
                                                            
  138 00000084 BA000011        blt              iterate_skip ; skip if no cache
                                                            , or just i-cache
  139 00000088 EE40AF10        mcr              p15, 2, r10, c0, c0, 0 ; select
                                                             current cache leve
                                                            l in cssr
  140 0000008C F57FF06F        ISB                          ; isb to sych the n
                                                            ew cssr&csidr
  141 00000090 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  142 00000094 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache line
                                                            s
  143 00000098 E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)
  144 0000009C E30043FF        ldr              r4, =0x3ff
  145 000000A0 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y size
  146 000000A4 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size increm
                                                            ent
  147 000000A8 E3077FFF        ldr              r7, =0x7fff
  148 000000AC E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex size
  149 000000B0         iterate_loop2
  150 000000B0 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way size
  151 000000B4         iterate_loop3
  152 000000B4 E18A0519        orr              r0, r10, r9, lsl r5 ; factor wa
                                                            y and cache number 
                                                            into r0
  153 000000B8 E1800217        orr              r0, r0, r7, lsl r2 ; factor ind
                                                            ex number into r0
  154 000000BC E12FFF36        blx              r6          ; Jump to function 
                                                            for given cache lin
                                                            e
  155 000000C0 E2599001        subs             r9, r9, #1  ; decrement the way
                                                            
  156 000000C4 AAFFFFFA        bge              iterate_loop3
  157 000000C8 E2577001        subs             r7, r7, #1  ; decrement the ind



ARM Macro Assembler    Page 9 


                                                            ex
  158 000000CC AAFFFFF7        bge              iterate_loop2
  159 000000D0         iterate_skip
  160 000000D0 F57FF04F        DSB                          ; A7 errata 814220
  161 000000D4 E28AA002        add              r10, r10, #2 ; increment cache 
                                                            number
  162 000000D8 E153000A        cmp              r3, r10
  163 000000DC CAFFFFE4        bgt              iterate_loop1
  164 000000E0         iterate_finished
  165 000000E0 E3A0A000        mov              r10, #0     ; swith back to cac
                                                            he level 0
  166 000000E4 EE40AF10        mcr              p15, 2, r10, c0, c0, 0 ; select
                                                             current cache leve
                                                            l in cssr
  167 000000E8 F57FF04F        DSB
  168 000000EC F57FF06F        ISB
  169 000000F0 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  170 000000F4                 ENDFUNC
  171 000000F4         ;=======================================================
                       =====================
  172 000000F4         ; tzbsp_cache_flush
  173 000000F4         ;
  174 000000F4         ; DESCRIPTION -
  175 000000F4         ;  Flush the entire cache system.  The data cache flush 
                       is achieved
  176 000000F4         ;  using atomic clean / invalidates working outwards fro
                       m L1
  177 000000F4         ;  cache. This is done using Set/Way based cache maintai
                       nance
  178 000000F4         ;  instructions.  The instruction cache can still be inv
                       alidated back
  179 000000F4         ;  to the point of unification in a single instruction. 
                        This also
  180 000000F4         ;  flushes the branch target cache.
  181 000000F4         ;=======================================================
                       =====================
  182 000000F4         tzbsp_cache_flush
                               FUNCTION
  183 000000F4 E52DE004        push             {lr}
  184 000000F8 EBFFFFFE        bl               tzbsp_dcache_flush_all
  185 000000FC E3A00000        mov              r0, #0
  186 00000100 EE070F15        mcr              p15, 0, r0, c7, c5, 0 ; ICIALLU
                                                            : instruction & bra
                                                            nch target
  187 00000104         ; invalidate
  188 00000104 E8BD8000        ldmfd            sp!, {pc}
  189 00000108                 ENDFUNC
  190 00000108         ;=======================================================
                       =====================
  191 00000108         ; tzbsp_dcache_clean_line
  192 00000108         ;
  193 00000108         ; DESCRIPTION -
  194 00000108         ;   Flush a single cache line by set/way
  195 00000108         ;=======================================================
                       =====================
  196 00000108         tzbsp_dcache_clean_line
                               FUNCTION
  197 00000108 EE070F5A        mcr              p15, 0, r0, c7, c10, 2 
                                                            ; clean by set/way



ARM Macro Assembler    Page 10 


  198 0000010C E12FFF1E        bx               lr
  199 00000110                 ENDFUNC
  200 00000110         ;=======================================================
                       =====================
  201 00000110         ; tzbsp_dcache_clean_all
  202 00000110         ;
  203 00000110         ; DESCRIPTION -
  204 00000110         ;   Clean the whole D-cache.
  205 00000110         ;=======================================================
                       =====================
  206 00000110         tzbsp_dcache_clean_all
                               FUNCTION
  207 00000110 E52DE004        push             {lr}
  208 00000114 F57FF04F        DSB
  209 00000118 E59F03E0        ldr              r0, =tzbsp_dcache_clean_line
  210 0000011C EBFFFFFE        bl               tzbsp_dcache_iterate_set_way
  211 00000120 E8BD8000        ldmfd            sp!, {pc}
  212 00000124                 ENDFUNC
  213 00000124         ;=======================================================
                       =====================
  214 00000124         ; tzbsp_dcache_flush_line
  215 00000124         ;
  216 00000124         ; DESCRIPTION -
  217 00000124         ;   Flush a single cache line by set/way
  218 00000124         ;=======================================================
                       =====================
  219 00000124         tzbsp_dcache_flush_line
                               FUNCTION
  220 00000124 EE070F5E        mcr              p15, 0, r0, c7, c14, 2 ; clean 
                                                            & invalidate by set
                                                            /way
  221 00000128 E12FFF1E        bx               lr
  222 0000012C                 ENDFUNC
  223 0000012C         ;=======================================================
                       =====================
  224 0000012C         ; tzbsp_dcache_flush_all
  225 0000012C         ;
  226 0000012C         ; DESCRIPTION -
  227 0000012C         ;   Flush the whole D-cache.
  228 0000012C         ;=======================================================
                       =====================
  229 0000012C         tzbsp_dcache_flush_all
                               FUNCTION
  230 0000012C E52DE004        push             {lr}
  231 00000130 F57FF04F        DSB
  232 00000134 E59F03C8        ldr              r0, =tzbsp_dcache_flush_line
  233 00000138 EBFFFFFE        bl               tzbsp_dcache_iterate_set_way
  234 0000013C E8BD8000        ldmfd            sp!, {pc}
  235 00000140                 ENDFUNC
  236 00000140         ;=======================================================
                       =====================
  237 00000140         ; tzbsp_dcache_inval_line
  238 00000140         ;
  239 00000140         ; DESCRIPTION -
  240 00000140         ;   Invalidate a single cache line by set/way
  241 00000140         ;=======================================================
                       =====================
  242 00000140         tzbsp_dcache_inval_line
                               FUNCTION



ARM Macro Assembler    Page 11 


  243 00000140 EE070F56        mcr              p15, 0, r0, c7, c6, 2 ; invalid
                                                            ate by set/way
  244 00000144 E12FFF1E        bx               lr
  245 00000148                 ENDFUNC
  246 00000148         ;=======================================================
                       =====================
  247 00000148         ; tzbsp_dcache_inval_all
  248 00000148         ;
  249 00000148         ; DESCRIPTION -
  250 00000148         ;   Invalidate the whole D-cache.
  251 00000148         ;=======================================================
                       =====================
  252 00000148         tzbsp_dcache_inval_all
                               FUNCTION
  253 00000148 E52DE004        push             {lr}
  254 0000014C F57FF04F        DSB
  255 00000150 E59F03B0        ldr              r0, =tzbsp_dcache_inval_line
  256 00000154 EBFFFFFE        bl               tzbsp_dcache_iterate_set_way
  257 00000158 E8BD8000        ldmfd            sp!, {pc}
  258 0000015C                 ENDFUNC
  259 0000015C         ;=======================================================
                       =====================
  260 0000015C         ; tzbsp_dcache_inval_l1
  261 0000015C         ;
  262 0000015C         ; DESCRIPTION -
  263 0000015C         ;   Invalidate the l1 section of the D-cache.
  264 0000015C         ;=======================================================
                       =====================
  265 0000015C         tzbsp_dcache_inval_l1
                               FUNCTION
  266 0000015C F57FF04F        DSB
  267 00000160 E92D03FF        stmfd            sp!, {r0-r9}
  268 00000164 EE306F30        mrc              p15, 1, r6, c0, c0, 1 
                                                            ; read clidr
  269 00000168 E2163407        ands             r3, r6, #0x7000000 ; extract lo
                                                            c from clidr
  270 0000016C E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field
  271 00000170 0A000017        beq              il1_finished ; if loc is 0, the
                                                            n no need to clean
  272 00000174 E3A08000        mov              r8, #0      ; start clean at ca
                                                            che level 0
  273 00000178 E0882088        add              r2, r8, r8, lsl #1 ; work out 3
                                                            x current cache lev
                                                            el
  274 0000017C E1A01236        mov              r1, r6, lsr r2 ; extract cache 
                                                            type bits from clid
                                                            r
  275 00000180 E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache o
                                                            nly
  276 00000184 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this level
                                                            
  277 00000188 BA000011        blt              il1_finished ; skip if no cache
                                                            , or just i-cache
  278 0000018C EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr



ARM Macro Assembler    Page 12 


  279 00000190 F57FF06F        ISB                          ; isb to sych the n
                                                            ew cssr&csidr
  280 00000194 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  281 00000198 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache line
                                                            s
  282 0000019C E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)
  283 000001A0 E30043FF        ldr              r4, =0x3ff
  284 000001A4 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y size
  285 000001A8 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size increm
                                                            ent
  286 000001AC E3077FFF        ldr              r7, =0x7fff
  287 000001B0 E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex size
  288 000001B4         il1_loop2
  289 000001B4 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way size
  290 000001B8         il1_loop3
  291 000001B8 E1880519        orr              r0, r8, r9, lsl r5 ; factor way
                                                             and cache number i
                                                            nto r0
  292 000001BC E1800217        orr              r0, r0, r7, lsl r2 ; factor ind
                                                            ex number into r0
  293 000001C0 EE070F56        mcr              p15, 0, r0, c7, c6, 2 ; invalid
                                                            ate by set/way
  294 000001C4 E2599001        subs             r9, r9, #1  ; decrement the way
                                                            
  295 000001C8 AAFFFFFA        bge              il1_loop3
  296 000001CC E2577001        subs             r7, r7, #1  ; decrement the ind
                                                            ex
  297 000001D0 AAFFFFF7        bge              il1_loop2
  298 000001D4         il1_finished
  299 000001D4 E3A08000        mov              r8, #0      ; swith back to cac
                                                            he level 0
  300 000001D8 EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  301 000001DC F57FF04F        DSB
  302 000001E0 F57FF06F        ISB
  303 000001E4 E8BD03FF        ldmfd            sp!, {r0-r9}
  304 000001E8 E12FFF1E        bx               lr
  305 000001EC                 ENDFUNC
  306 000001EC         ;=======================================================
                       ================
  307 000001EC         ; tzbsp_dcache_inval_l2
  308 000001EC         ;
  309 000001EC         ; DESCRIPTION -
  310 000001EC         ;   Invalidate the l2 section of the D-cache.
  311 000001EC         ;=======================================================
                       ================
  312 000001EC         tzbsp_dcache_inval_l2
                               FUNCTION
  313 000001EC F57FF04F        DSB



ARM Macro Assembler    Page 13 


  314 000001F0 E92D03FF        stmfd            sp!, {r0-r9}
  315 000001F4 EE306F30        mrc              p15, 1, r6, c0, c0, 1 
                                                            ; read clidr
  316 000001F8 E2163407        ands             r3, r6, #0x7000000 ; extract lo
                                                            c from clidr
  317 000001FC E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field
  318 00000200 0A000017        beq              il2_finished ; if loc is 0, the
                                                            n no need to clean
  319 00000204 E3A08001        mov              r8, #1      ; start clean at ca
                                                            che level 1
  320 00000208 E0882088        add              r2, r8, r8, lsl #1 ; work out 3
                                                            x current cache lev
                                                            el
  321 0000020C E1A01236        mov              r1, r6, lsr r2 ; extract cache 
                                                            type bits from clid
                                                            r
  322 00000210 E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache
  323 00000214 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this lev
  324 00000218 BA000011        blt              il2_finished ; skip if no cache
                                                            , or just i-cache
  325 0000021C EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  326 00000220 F57FF06F        ISB                          ; isb to sych the n
                                                            ew cssr&csidr
  327 00000224 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  328 00000228 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache li
  329 0000022C E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)
  330 00000230 E30043FF        ldr              r4, =0x3ff
  331 00000234 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y siz
  332 00000238 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size incr
  333 0000023C E3077FFF        ldr              r7, =0x7fff
  334 00000240 E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex si
  335 00000244         il2_loop2
  336 00000244 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way siz
  337 00000248         il2_loop3
  338 00000248 E1880519        orr              r0, r8, r9, lsl r5 ; factor way
                                                             and cache number i
                                                            nto r
  339 0000024C E1800217        orr              r0, r0, r7, lsl r2 ; factor ind
                                                            ex number into r0
  340 00000250 EE070F56        mcr              p15, 0, r0, c7, c6, 2 ; invalid
                                                            ate by set/way
  341 00000254 E2599001        subs             r9, r9, #1  ; decrement the way
                                                            
  342 00000258 AAFFFFFA        bge              il2_loop3
  343 0000025C E2577001        subs             r7, r7, #1  ; decrement the ind



ARM Macro Assembler    Page 14 


                                                            ex
  344 00000260 AAFFFFF7        bge              il2_loop2
  345 00000264         il2_finished
  346 00000264 E3A08000        mov              r8, #0      ; swith back to cac
                                                            he level 0
  347 00000268 EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  348 0000026C F57FF04F        DSB
  349 00000270 F57FF06F        ISB
  350 00000274 E8BD03FF        ldmfd            sp!, {r0-r9}
  351 00000278 E12FFF1E        bx               lr
  352 0000027C                 ENDFUNC
  353 0000027C         ;=======================================================
                       ================
  354 0000027C         ; tzbsp_dcache_clean_lx
  355 0000027C         ;
  356 0000027C         ; DESCRIPTION -
  357 0000027C         ;   Clean L1/L2 D-cache.
  358 0000027C         ;   r0: 0 for L1 & 1 for L2
  359 0000027C         ;=======================================================
                       ================
  360 0000027C         tzbsp_dcache_clean_lx
                               FUNCTION
  361 0000027C F57FF04F        DSB
  362 00000280 E92D03FF        stmfd            sp!, {r0-r9}
  363 00000284 EE306F30        mrc              p15, 1, r6, c0, c0, 1 
                                                            ; read clidr
  364 00000288 E2163407        ands             r3, r6, #0x7000000 ; extract lo
                                                            c from clidr
  365 0000028C E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field
  366 00000290 0A000017        beq              ilx_finished ; if loc is 0, the
                                                            n no need to clean
  367 00000294 E1A08000        mov              r8, r0      ; start clean at ca
                                                            che level r0
  368 00000298 E0882088        add              r2, r8, r8, lsl #1 ; work out 3
                                                            x current cache lev
                                                            el
  369 0000029C E1A01236        mov              r1, r6, lsr r2 ; extract cache 
                                                            type bits from clid
                                                            r
  370 000002A0 E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache
  371 000002A4 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this lev
  372 000002A8 BA000011        blt              ilx_finished ; skip if no cache
                                                            , or just i-cache
  373 000002AC EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  374 000002B0 F57FF06F        ISB                          ; isb to sych the n
                                                            ew cssr&csidr
  375 000002B4 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  376 000002B8 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache li
  377 000002BC E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)



ARM Macro Assembler    Page 15 


  378 000002C0 E30043FF        ldr              r4, =0x3ff
  379 000002C4 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y siz
  380 000002C8 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size incr
  381 000002CC E3077FFF        ldr              r7, =0x7fff
  382 000002D0 E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex si
  383 000002D4         ilx_loop2
  384 000002D4 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way siz
  385 000002D8         ilx_loop3
  386 000002D8 E1880519        orr              r0, r8, r9, lsl r5 ; factor way
                                                             and cache number i
                                                            nto r
  387 000002DC E1800217        orr              r0, r0, r7, lsl r2 ; factor ind
                                                            ex number into r0
  388 000002E0 EE070F5A        mcr              p15, 0, r0, c7, c10, 2 
                                                            ; clean by set/way
  389 000002E4 E2599001        subs             r9, r9, #1
  390 000002E8 AAFFFFFA        bge              ilx_loop3
  391 000002EC E2577001        subs             r7, r7, #1  ; decrement the ind
                                                            ex
  392 000002F0 AAFFFFF7        bge              ilx_loop2
  393 000002F4         ilx_finished
  394 000002F4 E3A08000        mov              r8, #0      ; swith back to cac
                                                            he level 0
  395 000002F8 EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  396 000002FC F57FF04F        DSB
  397 00000300 F57FF06F        ISB
  398 00000304 E8BD03FF        ldmfd            sp!, {r0-r9}
  399 00000308 E12FFF1E        bx               lr
  400 0000030C                 ENDFUNC
  401 0000030C         ;=======================================================
                       ================
  402 0000030C         ; tzbsp_dcache_clean_inv_lx
  403 0000030C         ;
  404 0000030C         ; DESCRIPTION -
  405 0000030C         ;   Clean and invalidate L1/L2 D-cache.
  406 0000030C         ;   r0: 0 for L1 & 1 for L2
  407 0000030C         ;=======================================================
                       ================
  408 0000030C         tzbsp_dcache_clean_inv_lx
                               FUNCTION
  409 0000030C F57FF04F        DSB
  410 00000310 E92D03FF        stmfd            sp!, {r0-r9}
  411 00000314 EE306F30        mrc              p15, 1, r6, c0, c0, 1 
                                                            ; read clidr
  412 00000318 E2163407        ands             r3, r6, #0x7000000 ; extract lo
                                                            c from clidr
  413 0000031C E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field
  414 00000320 0AFFFFF3        beq              ilx_finished ; if loc is 0, the
                                                            n no need to clean
  415 00000324 E1A08000        mov              r8, r0      ; start clean at ca



ARM Macro Assembler    Page 16 


                                                            che level r0
  416 00000328 E0882088        add              r2, r8, r8, lsl #1 ; work out 3
                                                            x current cache lev
                                                            el
  417 0000032C E1A01236        mov              r1, r6, lsr r2 ; extract cache 
                                                            type bits from clid
                                                            r
  418 00000330 E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache
  419 00000334 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this lev
  420 00000338 BA000011        blt              inv_ilx_finished ; skip if no c
                                                            ache, or just i-cac
                                                            he
  421 0000033C EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  422 00000340 F57FF06F        ISB                          ; isb to sych the n
                                                            ew cssr&csidr
  423 00000344 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  424 00000348 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache li
  425 0000034C E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)
  426 00000350 E30043FF        ldr              r4, =0x3ff
  427 00000354 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y siz
  428 00000358 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size incr
  429 0000035C E3077FFF        ldr              r7, =0x7fff
  430 00000360 E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex si
  431 00000364         inv_ilx_loop2
  432 00000364 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way siz
  433 00000368         inv_ilx_loop3
  434 00000368 E1880519        orr              r0, r8, r9, lsl r5 ; factor way
                                                             and cache number i
                                                            nto r
  435 0000036C E1800217        orr              r0, r0, r7, lsl r2 ; factor ind
                                                            ex number into r0
  436 00000370 EE070F5E        mcr              p15, 0, r0, c7, c14, 2 ; clean 
                                                            & invalidate by set
                                                            /way
  437 00000374 E2599001        subs             r9, r9, #1
  438 00000378 AAFFFFFA        bge              inv_ilx_loop3
  439 0000037C E2577001        subs             r7, r7, #1  ; decrement the ind
                                                            ex
  440 00000380 AAFFFFF7        bge              inv_ilx_loop2
  441 00000384         inv_ilx_finished
  442 00000384 E3A08000        mov              r8, #0      ; swith back to cac
                                                            he level 0
  443 00000388 EE408F10        mcr              p15, 2, r8, c0, c0, 0 ; select 
                                                            current cache level
                                                             in cssr
  444 0000038C F57FF04F        DSB



ARM Macro Assembler    Page 17 


  445 00000390 F57FF06F        ISB
  446 00000394 E8BD03FF        ldmfd            sp!, {r0-r9}
  447 00000398 E12FFF1E        bx               lr
  448 0000039C                 ENDFUNC
  449 0000039C         ;=======================================================
                       =====================
  450 0000039C         ; tzbsp_dcache_flush_region
  451 0000039C         ;
  452 0000039C         ; PROTOTYPE
  453 0000039C         ;   void tzbsp_dcache_flush_region(void *addr, unsigned 
                       int length);
  454 0000039C         ;
  455 0000039C         ; ARGS
  456 0000039C         ;   void *addr            - Start address of memory regi
                       on
  457 0000039C         ;   unsigned int length   - Length of memory region
  458 0000039C         ;
  459 0000039C         ; DESCRIPTION
  460 0000039C         ;   Cleans and invalidates a memory region in the cache.
                        Please note that the
  461 0000039C         ;   data in the cache would be written back to main memo
                       ry if dirty and the
  462 0000039C         ;   region invalidated. So any further access to the dat
                       a would result in a
  463 0000039C         ;   cache-miss.
  464 0000039C         ;=======================================================
                       =====================
  465 0000039C         tzbsp_dcache_flush_region
                               FUNCTION
  466 0000039C E92D4001        stmfd            sp!, {r0, lr}
  467 000003A0 F57FF04F        DSB                          ; data barrier befo
                                                            re flushing
  468 000003A4 E0801001        add              r1, r0, r1  ; get the end addre
                                                            ss
  469 000003A8                 dcache_granule_size
                                                r2, r3      ; r2 = cache granul
                                                            e in bytes
   81 000003A8 EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR
   82 000003AC E1A03823        lsr              r3, #16
   83 000003B0 E203300F        and              r3, #0xF    ; $tmp = CTR[DminLi
                                                            ne]
   84 000003B4 E3A02004        mov              r2, #4      ; CTR[DminLine] = l
                                                            og2 num words
   85 000003B8 E1A02312        lsl              r2, r2, r3  ; cache writeback g
                                                            ranule size in byte
                                                            s
  470 000003BC E2423001        sub              r3, r2, #1  ; r3 = (cache granu
                                                            le size - 1)
  471 000003C0 E1C00003        bic              r0, r0, r3  ; r0 = start addres
                                                            s with cache granul
                                                            e
  472 000003C4         ;      size bits removed
  473 000003C4         flush_loop
  474 000003C4 EE070F3E        mcr              p15, 0, r0, c7, c14, 1 ; clean 
                                                            & invalidate line
  475 000003C8 E0800002        add              r0, r0, r2  ; r0 = (r0 + cache 
                                                            granule size)
  476 000003CC E1500001        cmp              r0, r1      ; r0 > "end of regi



ARM Macro Assembler    Page 18 


                                                            on" ?
  477 000003D0 BAFFFFFB        blt              flush_loop
  478 000003D4 F57FF04F        DSB                          ; ensure all memory
                                                             operations are com
                                                            plete
  479 000003D8 E8BD8001        ldmfd            sp!, {r0, pc}
  480 000003DC                 ENDFUNC
  481 000003DC         ;=======================================================
                       =====================
  482 000003DC         ; tzbsp_dcache_inval_region
  483 000003DC         ;
  484 000003DC         ; PROTOTYPE
  485 000003DC         ;   void tzbsp_dcache_inval_region(void *addr, unsigned 
                       int length);
  486 000003DC         ;
  487 000003DC         ; ARGS
  488 000003DC         ;   void *addr            - Start address of memory regi
                       on
  489 000003DC         ;   unsigned int length   - Length of memory region
  490 000003DC         ;
  491 000003DC         ; DESCRIPTION
  492 000003DC         ;   Invalidate a memory region in the cache. Please note
                        that the data in
  493 000003DC         ;   the cache will not be written back to the main memor
                       y. However, any
  494 000003DC         ;   further accesses to data in this region would result
                        in a cache-miss.
  495 000003DC         ;=======================================================
                       =====================
  496 000003DC         tzbsp_dcache_inval_region
                               FUNCTION
  497 000003DC E92D4000        stmfd            sp!, {lr}
  498 000003E0 F57FF04F        DSB                          ; data barrier befo
                                                            re flushing
  499 000003E4 E0801001        add              r1, r0, r1  ; r1 = end address
  500 000003E8                 dcache_granule_size
                                                r2, r3      ; r2 = cache granul
                                                            e size in bytes
   81 000003E8 EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR
   82 000003EC E1A03823        lsr              r3, #16
   83 000003F0 E203300F        and              r3, #0xF    ; $tmp = CTR[DminLi
                                                            ne]
   84 000003F4 E3A02004        mov              r2, #4      ; CTR[DminLine] = l
                                                            og2 num words
   85 000003F8 E1A02312        lsl              r2, r2, r3  ; cache writeback g
                                                            ranule size in byte
                                                            s
  501 000003FC E2423001        sub              r3, r2, #1  ; r3 = (cache granu
                                                            le size - 1)
  502 00000400 E1C00003        bic              r0, r0, r3  ; r0 = start addres
                                                            s with cache granul
                                                            e
  503 00000404         ;      size bits removed
  504 00000404         inval_loop
  505 00000404 EE070F36        mcr              p15, 0, r0, c7, c6, 1 ; invalid
                                                            ate dcache granule
  506 00000408 E0800002        add              r0, r0, r2  ; r0 += dcache gran
                                                            ule size



ARM Macro Assembler    Page 19 


  507 0000040C E1500001        cmp              r0, r1
  508 00000410 BAFFFFFB        blt              inval_loop
  509 00000414 F57FF04F        DSB                          ; ensure all memory
                                                             operations are com
                                                            plete
  510 00000418 E8BD8000        ldmfd            sp!, {pc}
  511 0000041C                 ENDFUNC
  512 0000041C         ;=======================================================
                       =====================
  513 0000041C         ; tzbsp_dcache_clean_region
  514 0000041C         ;
  515 0000041C         ; PROTOTYPE
  516 0000041C         ;   void tzbsp_dcache_clean_region(void *addr, unsigned 
                       int length);
  517 0000041C         ;
  518 0000041C         ; ARGS
  519 0000041C         ;   void *addr            - Start address of memory regi
                       on
  520 0000041C         ;   unsigned int length   - Length of memory region
  521 0000041C         ;
  522 0000041C         ; DESCRIPTION
  523 0000041C         ;   Cleans a memory region in the cache. Please note tha
                       t this will write
  524 0000041C         ;   back any data that is dirty but it will not invalida
                       te the cache region.
  525 0000041C         ;   So any further accesses to data in this region would
                        result in a cache-hit.
  526 0000041C         ;=======================================================
                       =====================
  527 0000041C         tzbsp_dcache_clean_region
                               FUNCTION
  528 0000041C E92D4000        stmfd            sp!, {lr}
  529 00000420 F57FF04F        DSB                          ; data barrier befo
                                                            re flushing
  530 00000424 E0801001        add              r1, r0, r1  ; get the end addre
                                                            ss
  531 00000428                 dcache_granule_size
                                                r2, r3
   81 00000428 EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR
   82 0000042C E1A03823        lsr              r3, #16
   83 00000430 E203300F        and              r3, #0xF    ; $tmp = CTR[DminLi
                                                            ne]
   84 00000434 E3A02004        mov              r2, #4      ; CTR[DminLine] = l
                                                            og2 num words
   85 00000438 E1A02312        lsl              r2, r2, r3  ; cache writeback g
                                                            ranule size in byte
                                                            s
  532 0000043C E2423001        sub              r3, r2, #1
  533 00000440 E1C00003        bic              r0, r0, r3
  534 00000444         clean_loop
  535 00000444 EE070F3A        mcr              p15, 0, r0, c7, c10, 1 
                                                            ; clean D / U line
  536 00000448 E0800002        add              r0, r0, r2
  537 0000044C E1500001        cmp              r0, r1
  538 00000450 BAFFFFFB        blt              clean_loop
  539 00000454 F57FF04F        DSB                          ; ensure all memory
                                                             operations are com
                                                            plete



ARM Macro Assembler    Page 20 


  540 00000458 E8BD8000        ldmfd            sp!, {pc}
  541 0000045C                 ENDFUNC
  542 0000045C         ; void tzbsp_icache_enable(void)
  543 0000045C         tzbsp_icache_enable
                               FUNCTION
  544 0000045C                 mdsb
   84 0000045C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 0000045C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000460                 ELSE
   93                          ENDIF
  545 00000460                 misb
  111 00000460                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000460 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000464                 ELSE
  120                          ENDIF
  546 00000464 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read fr
                                                            om CP15 Control Reg
                                                            ister
  547 00000468 E3800A01        orr              r0, r0, #(1 << 12) ; Enable L1 
                                                            Instruction Cache
  548 0000046C EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write b
                                                            ack to CP15 Control
                                                             Register
  549 00000470                 mdsb
   84 00000470                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000470 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000474                 ELSE
   93                          ENDIF
  550 00000474                 misb
  111 00000474                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000474 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000478                 ELSE
  120                          ENDIF
  551 00000478 E12FFF1E        bx               lr
  552 0000047C                 ENDFUNC
  553 0000047C         ; void tzbsp_icache_disable(void)
  554 0000047C         tzbsp_icache_disable
                               FUNCTION
  555 0000047C                 mdsb
   84 0000047C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 0000047C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000480                 ELSE
   93                          ENDIF
  556 00000480                 misb



ARM Macro Assembler    Page 21 


  111 00000480                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000480 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000484                 ELSE
  120                          ENDIF
  557 00000484 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read fr
                                                            om CP15 Control Reg
                                                            ister
  558 00000488 E3C00A01        and              r0, r0, #~(1 << 12) ; Disable L
                                                            1 Instruction Cache
                                                            
  559 0000048C EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write b
                                                            ack to CP15 Control
                                                             Register
  560 00000490                 mdsb
   84 00000490                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000490 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000494                 ELSE
   93                          ENDIF
  561 00000494                 misb
  111 00000494                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000494 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000498                 ELSE
  120                          ENDIF
  562 00000498 E12FFF1E        bx               lr
  563 0000049C                 ENDFUNC
  564 0000049C         ; boolean tzbsp_icache_is_enabled(void)
  565 0000049C         tzbsp_icache_is_enabled
                               FUNCTION
  566 0000049C                 misb
  111 0000049C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 0000049C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 000004A0                 ELSE
  120                          ENDIF
  567 000004A0 EE110F10        mrc              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR.
  568 000004A4 E2000A01        and              r0, r0, #(1 << 12) 
                                                            ; Extract SCTLR[I].
                                                            
  569 000004A8 E1A00620        lsr              r0, r0, #12 ; Move bit to posit
                                                            ion 0.
  570 000004AC E12FFF1E        bx               lr
  571 000004B0                 ENDFUNC
  572 000004B0         ; void tzbsp_icache_inv(void)
  573 000004B0         tzbsp_icache_inv
                               FUNCTION
  574 000004B0                 mdsb
   84 000004B0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A



ARM Macro Assembler    Page 22 


RCHITECTURE} = "7-M"
   85 000004B0 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 000004B4                 ELSE
   93                          ENDIF
  575 000004B4                 misb
  111 000004B4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 000004B4 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 000004B8                 ELSE
  120                          ENDIF
  576 000004B8         ; ICIALLUIS (PoU, Inner Shareable)
  577 000004B8 EE070F11        mcr              p15, 0, r0, c7, c1, 0 ; r0 is i
                                                            gnored by ICIALLUIS
                                                            
  578 000004BC                 mdsb
   84 000004BC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 000004BC F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 000004C0                 ELSE
   93                          ENDIF
  579 000004C0                 misb
  111 000004C0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 000004C0 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 000004C4                 ELSE
  120                          ENDIF
  580 000004C4 E12FFF1E        bx               lr
  581 000004C8                 ENDFUNC
  582 000004C8         ; void tzbsp_icache_inv_area(void* start, void* end)
  583 000004C8         tzbsp_icache_inv_area
                               FUNCTION
  584 000004C8                 mdsb
   84 000004C8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 000004C8 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 000004CC                 ELSE
   93                          ENDIF
  585 000004CC                 misb
  111 000004CC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 000004CC F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 000004D0                 ELSE
  120                          ENDIF
  586 000004D0 E1500001        cmp              r0, r1
  587 000004D4 9A000002        bls              %f0         ; start <= end
  588 000004D8 E1A02000        mov              r2, r0      ; start > end, need
                                                             to swap



ARM Macro Assembler    Page 23 


  589 000004DC E1A00001        mov              r0, r1      ; Not swapping by X
                                                            ORing, plenty of re
                                                            gs
  590 000004E0 E1A01002        mov              r1, r2
  591 000004E4         ; ICIMVAU addresses in range [start, end] (PoU)
  592 000004E4 EE070F35 
                       0       mcr              p15, 0, r0, c7, c5, 1
  593 000004E8 E2800004        add              r0, r0, #4
  594 000004EC E1500001        cmp              r0, r1
  595 000004F0 9AFFFFFB        bls              %b0         ; if(r0 <= r1) then
                                                             invalidate(r0)
  596 000004F4                 mdsb
   84 000004F4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 000004F4 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 000004F8                 ELSE
   93                          ENDIF
  597 000004F8                 misb
  111 000004F8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 000004F8 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 000004FC                 ELSE
  120                          ENDIF
  598 000004FC E12FFF1E        bx               lr
  599 00000500                 ENDFUNC
  600 00000500                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --dwarf2 --diag_suppress=1480,1786,2523 --cpu=Cortex-A7 -
-fpu=SoftVFP --apcs=/noswst/interwork -o/local/mnt/workspace/CRMBuilds/TZ.BF.2.
5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/
trustzone/qsee/arch/armv7/build/tz/cortexA7/MATAANAA/tzbsp_cache.o -I/local/mnt
/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/tru
stzone_images/core/securemsm/trustzone/qsee/arch/armv7/build -I/local/mnt/works
pace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone
_images/build/cust -I. -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M89
09AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/
include -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_2
0161130_222454/b/trustzone_images/core/api/dal -I/local/mnt/workspace/CRMBuilds
/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/s
ecuremsm/trustzone/qsee/arch/msm8909/cfg/mmu -I/local/mnt/workspace/CRMBuilds/T
Z.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/sec
uremsm/trustzone/qsee/arch/msm8909/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2
.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm
/trustzone/qsee/arch/common/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-
00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustz
one/qsee/arch/armv7/include -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-0000
4-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/
qsee/arch/msm8909w/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M89
09AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/services -I/local/mnt
/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/tru
stzone_images/core/api/rapi/services/inc --list=/local/mnt/workspace/CRMBuilds/
TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/se
curemsm/trustzone/qsee/arch/armv7/build/tz/cortexA7/MATAANAA/tzbsp_cache.o.lst 



ARM Macro Assembler    Page 24 


--sitelicense /local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT
-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/arch/armv7/
build/tz/cortexA7/MATAANAA/tzbsp_cache.o.i
