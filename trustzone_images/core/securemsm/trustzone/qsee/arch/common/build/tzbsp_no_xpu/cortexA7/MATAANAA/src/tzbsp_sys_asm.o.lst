


ARM Macro Assembler    Page 1 


    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*
    2 00000000         ;
    3 00000000         ;                 T R U S T Z O N E      S Y S
    4 00000000         ;
    5 00000000         ;
    6 00000000         ; GENERAL DESCRIPTION
    7 00000000         ;   Cache coherency, and managment for armv7.
    8 00000000         ;
    9 00000000         ;   Assumptions:
   10 00000000         ;   - The scope of barriers/operations is Inner Shareabl
                       e (ISH).
   11 00000000         ;   - D-cache operations are done to the Point of Cohere
                       ncy (PoC).
   12 00000000         ;   - Memory is flat mapped -> MVA == VA == PA.
   13 00000000         ;
   14 00000000         ; Copyright (c) 2010-2012 by Qualcomm Technologies, Inco
                       rporated.All Rights Reserved.
   15 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*
   16 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*
   17 00000000         ;
   18 00000000         ;                           EDIT HISTORY FOR FILE
   19 00000000         ;
   20 00000000         ; This section contains comments describing changes made
                        to the module.
   21 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   22 00000000         ;
   23 00000000         ; $Header: 
   24 00000000         ;
   25 00000000         ; when       who     what, where, why
   26 00000000         ; --------   ---     -----------------------------------
                       ----------------
   27 00000000         ; 05/19/10   tk      Initial version.
   28 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*
   29 00000000                 GET              tzbsp_libarm_asm.inc
    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;                 T R U S T Z O N E      A S S E M B L Y
                       
    4 00000000         ;
    5 00000000         ;
    6 00000000         ; GENERAL DESCRIPTION
    7 00000000         ;   Assembly macros and definitions
    8 00000000         ;
    9 00000000         ; EXTERNALIZED SYMBOLS
   10 00000000         ;   None.
   11 00000000         ;
   12 00000000         ; INITIALIZATION AND SEQUENCING REQUIREMENTS
   13 00000000         ;   None.
   14 00000000         ;
   15 00000000         ; Copyright (c) 2010 by QUALCOMM, Incorporated. All Righ
                       ts Reserved.
   16 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*



ARM Macro Assembler    Page 2 


   17 00000000         
   18 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   19 00000000         ;
   20 00000000         ;                           EDIT HISTORY FOR FILE
   21 00000000         ;
   22 00000000         ; This section contains comments describing changes made
                        to the module.
   23 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   24 00000000         ;
   25 00000000         ;
   26 00000000         ; $Header:  $
   27 00000000         ; when       who     what, where, why
   28 00000000         ; --------   ---     -----------------------------------
                       ---------------------
   29 00000000         ; 05/19/10   tk      Added DMB, DSB and ISB macros.
   30 00000000         ; 05/14/10   tk      Added DMB to WaitForAccess to sync 
                       between cores.
   31 00000000         ; 04/09/10   tk      Initial revision.
   32 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   33 00000000         
   34 00000000         ; Options for DMB/DSB/ISB Barriers, define these manuall
                       y for RVCT < 3.0
   35 00000000                 IF               {ARCHITECTURE} != "7-A" :LAND: 
{ARCHITECTURE} != "7-M"
   40                          ENDIF
   41 00000000         
   42 00000000         ;=======================================================
                       =====================
   43 00000000         ; MACRO mdmb
   44 00000000         ;
   45 00000000         ; ARGS
   46 00000000         ;   NONE
   47 00000000         ;
   48 00000000         ; DESCRIPTION
   49 00000000         ;   Performs a data memory barrier, either using the ARM
                       v7 instruction or the
   50 00000000         ;   legacy coprocessor instruction.
   51 00000000         ;
   52 00000000         ; NOTES
   53 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   54 00000000         ;=======================================================
                       =====================
   55 00000000                 MACRO
   56 00000000                 mdmb
   57 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 00000000                 dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 00000000                 ELSE
   60 00000000                 IF               {CONFIG} = 32
   61 00000000                 DCI              0xF57FF050 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   62 00000000                 ELSE
   63 00000000                 DCI              0xF3BF8F50 :OR: SY 
                                                            ; ARMv7 T1 Opcode



ARM Macro Assembler    Page 3 


   64 00000000                 ENDIF
   65 00000000         ;mcr    p15, 0, r0, c7, c10, 5  ; Legacy Data Memory Bar
                       rier
   66 00000000                 ENDIF
   67 00000000                 MEND
   68 00000000         
   69 00000000         ;=======================================================
                       =====================
   70 00000000         ; MACRO mdsb
   71 00000000         ;
   72 00000000         ; ARGS
   73 00000000         ;   NONE
   74 00000000         ;
   75 00000000         ; DESCRIPTION
   76 00000000         ;   Performs a data synchronization barrier, either usin
                       g the ARMv7 instruction
   77 00000000         ;   or the legacy coprocessor instruction.
   78 00000000         ;
   79 00000000         ; NOTES
   80 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   81 00000000         ;=======================================================
                       =====================
   82 00000000                 MACRO
   83 00000000                 mdsb
   84 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 00000000                 dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000000                 ELSE
   87 00000000                 IF               {CONFIG} = 32
   88 00000000                 DCI              0xF57FF040 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   89 00000000                 ELSE
   90 00000000                 DCI              0xF3BF8F40 :OR: SY 
                                                            ; ARMv7 T1 Opcode
   91 00000000                 ENDIF
   92 00000000         ;mcr    p15, 0, r0, c7, c10, 4  ; Legacy Data Write Barr
                       ier
   93 00000000                 ENDIF
   94 00000000                 MEND
   95 00000000         
   96 00000000         ;=======================================================
                       =====================
   97 00000000         ; MACRO misb
   98 00000000         ;
   99 00000000         ; ARGS
  100 00000000         ;   NONE
  101 00000000         ;
  102 00000000         ; DESCRIPTION
  103 00000000         ;   Performs an instruction synchronization barrier, eit
                       her using the ARMv7
  104 00000000         ;   instruction or the legacy coprocessor instruction.
  105 00000000         ;
  106 00000000         ; NOTES
  107 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
  108 00000000         ;=======================================================
                       =====================
  109 00000000                 MACRO



ARM Macro Assembler    Page 4 


  110 00000000                 misb
  111 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000000                 isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000000                 ELSE
  114 00000000                 IF               {CONFIG} = 32
  115 00000000                 DCI              0xF57FF060 :OR: SY 
                                                            ; ARMv7 A1 Opcode
  116 00000000                 ELSE
  117 00000000                 DCI              0xF3BF8F60 :OR: SY 
                                                            ; ARMv7 T1 Opcode
  118 00000000                 ENDIF
  119 00000000         ;mcr    p15, 0, r0, c7, c5, 4   ; Legacy Pre-Fetch Flush
                       
  120 00000000                 ENDIF
  121 00000000                 MEND
  122 00000000         
  123 00000000                 MACRO
  124 00000000                 ISB
  125 00000000                 misb
  126 00000000                 MEND
  127 00000000         
  128 00000000                 MACRO
  129 00000000                 DSB
  130 00000000                 mdsb
  131 00000000                 MEND
  132 00000000         
  133 00000000                 END
   30 00000000                 GET              tzbsp_asm.inc
    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;                 T R U S T Z O N E      A S S E M B L Y
                       
    4 00000000         ;
    5 00000000         ;
    6 00000000         ; GENERAL DESCRIPTION
    7 00000000         ;   Assembly macros and definitions common to TZ monitor
                        and TZBSP.
    8 00000000         ;
    9 00000000         ; EXTERNALIZED SYMBOLS
   10 00000000         ;   None.
   11 00000000         ;
   12 00000000         ; INITIALIZATION AND SEQUENCING REQUIREMENTS
   13 00000000         ;   None.
   14 00000000         ;
   15 00000000         ; Copyright (c) 2010-2012 by QUALCOMM, Incorporated. All
                        Rights Reserved.
   16 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   17 00000000         
   18 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   19 00000000         ;
   20 00000000         ;                           EDIT HISTORY FOR FILE
   21 00000000         ;
   22 00000000         ; This section contains comments describing changes made



ARM Macro Assembler    Page 5 


                        to the module.
   23 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   24 00000000         ;
   25 00000000         ;
   26 00000000         ; $Header:  $
   27 00000000         ; when       who     what, where, why
   28 00000000         ; --------   ---     -----------------------------------
                       ---------------------
   29 00000000         ; 05/19/10   tk      Added DMB, DSB and ISB macros.
   30 00000000         ; 05/14/10   tk      Added DMB to WaitForAccess to sync 
                       between cores.
   31 00000000         ; 04/09/10   tk      Initial revision.
   32 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   33 00000000         
   34 00000000         ; ------------------------------------------------------
                       -----------------------
   35 00000000         ; MACRO: WaitForAccess
   36 00000000         ; ------------------------------------------------------
                       -----------------------
   37 00000000         ; Multicore safe spinlock implementation. Waits until th
                       e monitor lock
   38 00000000         ; is cleared and the lock is successfully claimed.
   39 00000000                 MACRO
   40 00000000                 WaitForAccess    $work, $addr, $cpu, $lock
   41 00000000                 ldr              $addr, =$lock ; Load lock state
                                                             address.
   42 00000000                 mrc              p15, 0, $cpu, c0, c0, 5 
                                                            ; Current MPIDR.
   43 00000000                 and              $cpu, $cpu, #0xFF ; AFFL0 is th
                                                            e CPU number.
   44 00000000                 add              $cpu,  #0x1 ; (cpu num + 1) = T
                                                            Z is locked
   45 00000000         42      ldrex            $work, [$addr] ; Load the curre
                                                            nt lock status.
   46 00000000                 cmp              $work, #0   ; Is TZ locked?
   47 00000000                 strexeq          $work, $cpu, [$addr] ; Not lock
                                                            ed: try to claim th
                                                            e lock.
   48 00000000                 cmpeq            $work, #0   ; Not locked: Did w
                                                            e get the lock?
   49 00000000                 bne              %b42        ; Locked or claimin
                                                            g lock failed, retr
                                                            y.
   50 00000000                 mdmb                         ; Ensure other obse
                                                            rvers see lock clai
                                                            m.
   51 00000000                 MEND
   52 00000000         
   53 00000000         ; ------------------------------------------------------
                       -----------------------
   54 00000000         ; MACRO: ReleaseAccess
   55 00000000         ; ------------------------------------------------------
                       -----------------------
   56 00000000         ; Releases a lock acquired by WaitForAccess
   57 00000000                 MACRO
   58 00000000                 ReleaseAccess    $zero, $addr, $lock
   59 00000000         ; Ensure all reads/writes are visible to other observers



ARM Macro Assembler    Page 6 


                        before
   60 00000000         ; releasing the lock.
   61 00000000                 mdmb
   62 00000000                 ldr              $addr, =$lock ; Load lock state
                                                             address.
   63 00000000                 mov              $zero, #0   ; Zero equals unloc
                                                            ked.
   64 00000000                 str              $zero, [$addr] ; Clear the lock
                                                            
   65 00000000                 mdmb
   66 00000000                 MEND
   67 00000000         
   68 00000000         ; ------------------------------------------------------
                       -----------------------
   69 00000000         ; MACRO: CheckIORange
   70 00000000         ; ------------------------------------------------------
                       -----------------------
   71 00000000         ; $reg_addr      - register containing address to check 
                       against range
   72 00000000         ; $reg_tmp       - temp register to use
   73 00000000         ; $range_low     - constant value of low address of rang
                       e to check
   74 00000000         ; $range_high    - constant value of high address of ran
                       ge to check
   75 00000000         ; $success_label - Text name of label to execute if addr
                        is within range
   76 00000000                 MACRO
   77 00000000                 CheckIORange     $reg_addr, $reg_tmp, $range_low
, $range_high, $success_label
   78 00000000                 movw             $reg_tmp, #($range_low & 0xFFFF
) 
                                                            ; load range_low
   79 00000000                 movt             $reg_tmp, #(($range_low >> 16) 
& 0xFFFF) 
                                                            ; into reg_tmp
   80 00000000                 cmp              $reg_addr, $reg_tmp ; Check add
                                                            ress against range_
                                                            low
   81 00000000                 blo              %f20        ; addr < range_low,
                                                             illegal range
   82 00000000         
   83 00000000                 movw             $reg_tmp, #($range_high & 0xFFF
F) 
                                                            ; load range_high
   84 00000000                 movt             $reg_tmp, #(($range_high >> 16)
 & 0xFFFF) 
                                                            ; into reg_tmp
   85 00000000                 cmp              $reg_addr, $reg_tmp ; Check if 
                                                            address <= range_hi
                                                            gh
   86 00000000                 bls              $success_label ; addr <= range_
                                                            high, success
   87 00000000         
   88 00000000         20
   89 00000000                 MEND
   90 00000000         
   91 00000000         ; ------------------------------------------------------
                       -----------------------
   92 00000000         ; MACRO: CheckIOAddress



ARM Macro Assembler    Page 7 


   93 00000000         ; ------------------------------------------------------
                       -----------------------
   94 00000000         ; $reg_addr      - register containing address to check 
                       against range
   95 00000000         ; $reg_tmp       - temp register to use
   96 00000000         ; $address       - constant value of low address of rang
                       e to check
   97 00000000         ; $success_label - Text name of label to execute if addr
                        is within range
   98 00000000                 MACRO
   99 00000000                 CheckIOAddress   $reg_addr, $reg_tmp, $address, 
$success_label
  100 00000000                 movw             $reg_tmp, #($address & 0xFFFF) 
                                                            ; load address into
                                                            
  101 00000000                 movt             $reg_tmp, #(($address >> 16) & 
0xFFFF) 
                                                            ; reg_addr
  102 00000000                 cmp              $reg_addr, $reg_tmp ; check add
                                                            ress against consta
                                                            nt addr
  103 00000000                 beq              $success_label 
                                                            ; if equal, success
                                                            
  104 00000000         
  105 00000000                 MEND
  106 00000000         
  107 00000000         ; ------------------------------------------------------
                       -----------------------
  108 00000000         ; MACRO: SetCpuStateMilestoneVar
  109 00000000         ; ------------------------------------------------------
                       -----------------------
  110 00000000         ; Setting Milestone variable for PC & Warm Boot.
  111 00000000         ; $work0      - Work register, will be corrupted
  112 00000000         ; $work1      - Work register, will be corrupted
  113 00000000         ; $value      - Milestone value per cpu basis
  114 00000000         ; $address    - Variable that will hold value.
  115 00000000                 MACRO
  116 00000000                 SetCpuStateMilestoneVar
                                                $work0, $work1, $value, $addr
  117 00000000         ; NOT IMPLEMENTED.
  118 00000000         
  119 00000000                 MEND
  120 00000000         
  121 00000000         ; Mode values
  122 00000000 00000013 
                       TZBSP_Mode_SVC
                               EQU              0x13
  123 00000000 00000017 
                       TZBSP_Mode_ABT
                               EQU              0x17
  124 00000000 0000001B 
                       TZBSP_Mode_UND
                               EQU              0x1b
  125 00000000 00000010 
                       TZBSP_Mode_USR
                               EQU              0x10
  126 00000000 00000011 
                       TZBSP_Mode_FIQ



ARM Macro Assembler    Page 8 


                               EQU              0x11
  127 00000000 00000012 
                       TZBSP_Mode_IRQ
                               EQU              0x12
  128 00000000         
  129 00000000         ; CPSE I/F mask bits
  130 00000000 00000080 
                       TZBSP_I_Bit
                               EQU              0x80
  131 00000000 00000040 
                       TZBSP_F_Bit
                               EQU              0x40
  132 00000000         
  133 00000000                 END
   31 00000000                 EXPORT           tzbsp_mutex_init
   32 00000000                 EXPORT           tzbsp_mutex_trylock
   33 00000000                 EXPORT           tzbsp_mutex_lock
   34 00000000                 EXPORT           tzbsp_mutex_unlock
   35 00000000                 EXPORT           tzbsp_enable_branch_prediction
   36 00000000                 EXPORT           tzbsp_bp_invalidate_all
   37 00000000                 EXPORT           tzbsp_int_enable
   38 00000000                 EXPORT           tzbsp_int_disable
   39 00000000                 EXPORT           tzbsp_int_read
   40 00000000                 EXPORT           tzbsp_int_disable_all
   41 00000000                 EXPORT           tzbsp_int_restore
   42 00000000                 EXPORT           tzbsp_dmb
   43 00000000                 EXPORT           memory_barrier ; Alias for dsb,
                                                             needed by DMOV.
   44 00000000                 EXPORT           tzbsp_dsb
   45 00000000                 EXPORT           tzbsp_isb
   46 00000000                 EXPORT           wcp15_csselr
   47 00000000                 EXPORT           rcp15_ccsidr
   48 00000000                 EXPORT           rcp15_ttbr0
   49 00000000                 EXPORT           wcp15_ttbr0_safe
   50 00000000                 EXPORT           wcp15_vbar_safe
   51 00000000                 EXPORT           wcp15_scr
   52 00000000                 IMPORT           tzbsp_milestone_complete
   53 00000000                 IMPORT           tzbsp_cpu_count_per_cluster
   54 00000000                 CODE32
   55 00000000                 PRESERVE8
   56 00000000                 AREA             TZBSP_SYS_ASM, align=4, CODE, R
EADONLY
   57 00000000         ; void tzbsp_enable_branch_prediction
   58 00000000         tzbsp_enable_branch_prediction
   59 00000000         ;SCTLR
   60 00000000 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read fr
                                                            om CP15 Control Reg
                                                            ister
   61 00000004 E3800B02        orr              r0, r0, # (1 << 11 ) ; Enable b
                                                            ranch prediction
   62 00000008         ;SCTLR
   63 00000008 EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write b
                                                            ack to CP15 Control
                                                             Register
   64 0000000C E3A00000        mov              r0, #0      ; Return success
   65 00000010 E12FFF1E        bx               lr
   66 00000014         ; void tzbsp_bp_invalidate_all(void)
   67 00000014         tzbsp_bp_invalidate_all
                               FUNCTION



ARM Macro Assembler    Page 9 


   68 00000014 EE070FD5        mcr              p15, 0, r0, c7, c5, 6
   69 00000018 F57FF04F        dsb
   70 0000001C F57FF06F        isb
   71 00000020 E12FFF1E        bx               lr
   72 00000024                 ENDFUNC
   73 00000024         ; void tzbsp_int_enable(uint32 flags)
   74 00000024         tzbsp_int_enable
                               FUNCTION
   75 00000024 E2000D07        and              r0, r0, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Only care about A
                                                            /I/F bits.
   76 00000028 E10F1000        mrs              r1, cpsr    ; Read the status r
                                                            egister.
   77 0000002C E1C11000        bic              r1, r1, r0  ; Clear requested A
                                                            /I/F bits
   78 00000030 E123F001        msr              cpsr_cx, r1 ; Write control & e
                                                            xtension field
   79 00000034 E12FFF1E        bx               lr
   80 00000038                 ENDFUNC
   81 00000038         ; void tzbsp_int_disable(uint32 flags)
   82 00000038         tzbsp_int_disable
                               FUNCTION
   83 00000038 E2000D07        and              r0, r0, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Only care about A
                                                            /I/F bits.
   84 0000003C E10F1000        mrs              r1, cpsr    ; Read the status r
                                                            egister.
   85 00000040 E1811000        orr              r1, r1, r0  ; Set requested A/I
                                                            /F bits
   86 00000044 E123F001        msr              cpsr_cx, r1 ; Write control & e
                                                            xtension field
   87 00000048 E12FFF1E        bx               lr
   88 0000004C                 ENDFUNC
   89 0000004C         ; int tzbsp_int_read(void)
   90 0000004C         tzbsp_int_read
                               FUNCTION
   91 0000004C E10F0000        mrs              r0, cpsr
   92 00000050 E2000D07        and              r0, r0,  #(1<<6):OR:(1<<7):OR:(
1<<8)
   93 00000054 E12FFF1E        bx               lr
   94 00000058                 ENDFUNC
   95 00000058         ; uint32 tzbsp_int_disable_all(void)
   96 00000058         tzbsp_int_disable_all
                               FUNCTION
   97 00000058 E10F1000        mrs              r1, cpsr    ; Read the status r
                                                            egister.
   98 0000005C E2010D07        and              r0, r1, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Only care about A
                                                            /I/F bits.
   99 00000060 E3811D07        orr              r1, r1, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Set A/I/F bits.
  100 00000064 E123F001        msr              cpsr_cx, r1 ; Apply the new int
                                                             mask.
  101 00000068         ; R0 contains the A/I/F bits before masking
  102 00000068 E12FFF1E        bx               lr



ARM Macro Assembler    Page 10 


  103 0000006C                 ENDFUNC
  104 0000006C         ; void tzbsp_int_restore(uint32 flags)
  105 0000006C         tzbsp_int_restore
                               FUNCTION
  106 0000006C E2000D07        and              r0, r0, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Only care about A
                                                            /I/F bits.
  107 00000070 E10F1000        mrs              r1, cpsr    ; Read the status r
                                                            egister.
  108 00000074 E3C11D07        bic              r1, r1, #(1<<6):OR:(1<<7):OR:(1
<<8) 
                                                            ; Clear A/I/F bits.
                                                            
  109 00000078 E1811000        orr              r1, r1, r0  ; Set requested A/I
                                                            /F bits.
  110 0000007C E123F001        msr              cpsr_cx, r1 ; Write control & e
                                                            xtension field
  111 00000080 E12FFF1E        bx               lr
  112 00000084                 ENDFUNC
  113 00000084         ; void tzbsp_dmb(void)
  114 00000084         tzbsp_dmb
                               FUNCTION
  115 00000084                 mdmb
   57 00000084                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 00000084 F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 00000088                 ELSE
   66                          ENDIF
  116 00000088 E12FFF1E        bx               lr
  117 0000008C                 ENDFUNC
  118 0000008C         memory_barrier                       ; Alias for tzbsp_d
                                                            sb
  119 0000008C         ; void tzbsp_dsb(void)
  120 0000008C         tzbsp_dsb
                               FUNCTION
  121 0000008C                 mdsb
   84 0000008C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   85 0000008C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   86 00000090                 ELSE
   93                          ENDIF
  122 00000090 E12FFF1E        bx               lr
  123 00000094                 ENDFUNC
  124 00000094         ; void tzbsp_isb(void)
  125 00000094         tzbsp_isb
                               FUNCTION
  126 00000094                 misb
  111 00000094                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000094 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  113 00000098                 ELSE
  120                          ENDIF



ARM Macro Assembler    Page 11 


  127 00000098 E12FFF1E        bx               lr
  128 0000009C                 ENDFUNC
  129 0000009C         ; int _mutex_initialize(mutex *m)
  130 0000009C         ; uint32 tzbsp_mutex_init(tzbsp_mutex_t* mutex)
  131 0000009C         ;
  132 0000009C         ; r0 - Address of the mutex structure
  133 0000009C         _mutex_initialize                    ; Alias for ARM C l
                                                            ibrary
  134 0000009C         tzbsp_mutex_init
                               FUNCTION
  135 0000009C                 mdmb
   57 0000009C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 0000009C F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 000000A0                 ELSE
   66                          ENDIF
  136 000000A0 E3A01000        mov              r1, #0
  137 000000A4 E5801000        str              r1, [r0]
  138 000000A8         ; Return non-zero to tell the ARM C libraries that we ar
                       e running
  139 000000A8         ; multithreaded code.
  140 000000A8 E3A00001        mov              r0, #1
  141 000000AC E12FFF1E        bx               lr
  142 000000B0                 ENDFUNC
  143 000000B0         ; void _mutex_acquire(mutex *m)
  144 000000B0         ; void tzbsp_mutex_lock(tzbsp_mutex_t* mutex)
  145 000000B0         ;
  146 000000B0         ; Waits until the provided mutex lock has been reclaimed
                       .
  147 000000B0         ;
  148 000000B0         ; r0 - Address of the mutex structure
  149 000000B0         _mutex_acquire                       ; Alias for ARM C l
                                                            ibrary
  150 000000B0         tzbsp_mutex_lock
                               FUNCTION
  151 000000B0         ; Check milestone complete flag
  152 000000B0 E59F10C8        ldr              r1, =tzbsp_milestone_complete
  153 000000B4 E5D12000        ldrb             r2, [r1]
  154 000000B8 E3520000        cmp              r2, #0
  155 000000BC 0A000006        beq              %f43        ; ... no need to gr
                                                            ab the lock
  156 000000C0 E3A01001        mov              r1, #1
  157 000000C4 E1902F9F 
                       42      ldrex            r2, [r0]    ; Load the current 
                                                            lock status.
  158 000000C8 E3520000        cmp              r2, #0      ; Is locked?
  159 000000CC 01802F91        strexeq          r2, r1, [r0] ; Not locked: try 
                                                            to claim the lock.
  160 000000D0 03520000        cmpeq            r2, #0      ; Not locked: Did w
                                                            e get the lock?
  161 000000D4 1AFFFFFA        bne              %b42        ; Locked or claimin
                                                            g lock failed, retr
                                                            y.
  162 000000D8                 mdmb                         ; Ensure other obse
                                                            rvers see lock clai
                                                            m.
   57 000000D8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A



ARM Macro Assembler    Page 12 


RCHITECTURE} = "7-M"
   58 000000D8 F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 000000DC                 ELSE
   66                          ENDIF
  163 000000DC E12FFF1E 
                       43      bx               lr
  164 000000E0                 ENDFUNC
  165 000000E0         ; void _mutex_acquire(mutex *m)
  166 000000E0         ; void tzbsp_mutex_trylock(tzbsp_mutex_t* mutex)
  167 000000E0         ;
  168 000000E0         ; Waits until the provided mutex lock has been reclaimed
                       .
  169 000000E0         ;
  170 000000E0         ; r0 - Address of the mutex structure
  171 000000E0         tzbsp_mutex_trylock
                               FUNCTION
  172 000000E0         ; Check milestone complete flag
  173 000000E0 E59F1098        ldr              r1, =tzbsp_milestone_complete
  174 000000E4 E5D12000        ldrb             r2, [r1]
  175 000000E8 E3520000        cmp              r2, #0
  176 000000EC 0A000006        beq              %f43        ; ... no need to gr
                                                            ab the lock
  177 000000F0 E3A01001        mov              r1, #1
  178 000000F4 E1902F9F        ldrex            r2, [r0]    ; Load the current 
                                                            lock status.
  179 000000F8 E3520000        cmp              r2, #0      ; Is locked?
  180 000000FC 01802F91        strexeq          r2, r1, [r0] ; Not locked: try 
                                                            to claim the lock.
  181 00000100 03520000        cmpeq            r2, #0      ; Not locked: Did w
                                                            e get the lock?
  182 00000104 1A000002        bne              %f42        ; Locked or claimin
                                                            g lock failed, retr
                                                            y.
  183 00000108                 mdmb                         ; Ensure other obse
                                                            rvers see lock clai
                                                            m.
   57 00000108                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 00000108 F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 0000010C                 ELSE
   66                          ENDIF
  184 0000010C E3A00001 
                       43      mov              r0, #1
  185 00000110 E12FFF1E        bx               lr
  186 00000114 E3A00000 
                       42      mov              r0, #0
  187 00000118 E12FFF1E        bx               lr
  188 0000011C                 ENDFUNC
  189 0000011C         ; void _mutex_release(mutex *m)
  190 0000011C         ; void tzbsp_mutex_unlock(tzbsp_mutex_t* mutex)
  191 0000011C         ;
  192 0000011C         ; r0 - Address of the mutex structure
  193 0000011C         _mutex_release                       ; Alias for ARM C l
                                                            ibrary
  194 0000011C         tzbsp_mutex_unlock



ARM Macro Assembler    Page 13 


                               FUNCTION
  195 0000011C         ; Make sure other CPU's observe any writes before releas
                       ing the lock.
  196 0000011C                 mdmb
   57 0000011C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 0000011C F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 00000120                 ELSE
   66                          ENDIF
  197 00000120 E3A01000        mov              r1, #0      ; Zero equals unloc
                                                            ked.
  198 00000124 E5801000        str              r1, [r0]    ; Clear the lock
  199 00000128 E12FFF1E        bx               lr
  200 0000012C         ; Make sure other CPU's observe any writes after releasi
                       ng the lock.
  201 0000012C                 mdmb
   57 0000012C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
   58 0000012C F57FF05F        dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   59 00000130                 ELSE
   66                          ENDIF
  202 00000130                 ENDFUNC
  203 00000130         ; void wcp15_csselr(uint32 val)
  204 00000130         wcp15_csselr
                               FUNCTION
  205 00000130 EE400F10        mcr              p15, 2, r0, c0, c0, 0 
                                                            ; Write CSSELR
  206 00000134 E12FFF1E        bx               lr
  207 00000138                 ENDFUNC
  208 00000138         ; uint32 rcp15_ccsidr(void)
  209 00000138         rcp15_ccsidr
                               FUNCTION
  210 00000138 EE300F10        mrc              p15, 1, r0, c0, c0, 0 
                                                            ; Read CCSIDR
  211 0000013C E12FFF1E        bx               lr
  212 00000140                 ENDFUNC
  213 00000140         ;uint32 rcp15_ttbr0(void);
  214 00000140         rcp15_ttbr0
                               FUNCTION
  215 00000140 EE120F10        mrc              p15, 0, r0, c2, c0, 0
  216 00000144 E12FFF1E        bx               lr
  217 00000148                 ENDFUNC
  218 00000148         ; void wcp15_ttbr0_safe(uint32)
  219 00000148         wcp15_ttbr0_safe
                               FUNCTION
  220 00000148 F57FF04F        dsb
  221 0000014C EE020F10        mcr              p15, 0, r0, c2, c0, 0
  222 00000150 F57FF06F        isb
  223 00000154 EE080F17        mcr              p15, 0, r0, c8, c7, 0
  224 00000158 F57FF04F        dsb
  225 0000015C F57FF06F        isb
  226 00000160                 misb
  111 00000160                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M"
  112 00000160 F57FF06F        isb                          ; RVDS >= 3.0 suppo



ARM Macro Assembler    Page 14 


                                                            rts ARMv7 instructi
                                                            ons
  113 00000164                 ELSE
  120                          ENDIF
  227 00000164 E12FFF1E        bx               lr
  228 00000168                 ENDFUNC
  229 00000168         ; void wcp15_vbar_safe(uint32 val)
  230 00000168         wcp15_vbar_safe
                               FUNCTION
  231 00000168 EE0C0F10        mcr              p15, 0, r0, c12, c0, 0
  232 0000016C F57FF04F        dsb
  233 00000170 F57FF06F        isb
  234 00000174 E12FFF1E        bx               lr
  235 00000178                 ENDFUNC
  236 00000178         ; void wcp15_scr(uint32)
  237 00000178         wcp15_scr
                               FUNCTION
  238 00000178 EE010F11        mcr              p15, 0, r0, c1, c1, 0
  239 0000017C E12FFF1E        bx               lr
  240 00000180                 ENDFUNC
  241 00000180                 END
              00000000 
Command Line: --debug --dwarf2 --diag_suppress=1480,1786,2523 --cpu=Cortex-A7 -
-fpu=SoftVFP --apcs=/noswst/interwork -o/local/mnt/workspace/CRMBuilds/TZ.BF.2.
5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/
trustzone/qsee/arch/common/build/tzbsp_no_xpu/cortexA7/MATAANAA/src/tzbsp_sys_a
sm.o -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_2016
1130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/arch/common/build 
-I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_
222454/b/trustzone_images/build/cust -I. -I/local/mnt/workspace/CRMBuilds/TZ.BF
.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securem
sm/trustzone/qsee/include -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-
M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/boot -I/local/mnt/
workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trus
tzone_images/core/api/boot/qfprom -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c1
0-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/securemsm 
-I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_
222454/b/trustzone_images/core/api/securemsm/crypto -I/local/mnt/workspace/CRMB
uilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/c
ore/api/securemsm/tzos -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M89
09AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/rapi/securemsm/inc -I
/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_22
2454/b/trustzone_images/core/buses/api/spmi -I/local/mnt/workspace/CRMBuilds/TZ
.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/buse
s/api/spi -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2
_20161130_222454/b/trustzone_images/core/buses/api/icb -I/local/mnt/workspace/C
RMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_image
s/core/buses/api/i2c -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909
AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/dal -I/local/mnt/worksp
ace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_
images/core/api/debugtools -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004
-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/hwengines -I/loca
l/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/
b/trustzone_images/core/api/mproc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c1
0-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/power -I/l
ocal/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_2224
54/b/trustzone_images/core/api/services -I/local/mnt/workspace/CRMBuilds/TZ.BF.
2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/rapi
/services/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANA



ARM Macro Assembler    Page 15 


ZT-2_20161130_222454/b/trustzone_images/core/api/storage -I/local/mnt/workspace
/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_ima
ges/core/api/systemdrivers -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004
-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/api/systemdrivers/pmi
c -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_2016113
0_222454/b/trustzone_images/core/api/systemdrivers/hwio/msm8909w -I/local/mnt/w
orkspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trust
zone_images/core/api/systemdrivers/hwio/msm8909w/phys -I/local/mnt/workspace/CR
MBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images
/core/api/kernel -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAA
ANAZT-2_20161130_222454/b/trustzone_images/core/api/kernel/libstd -I/local/mnt/
workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trus
tzone_images/core/boot/mibib/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10
-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/boot/secboot3/s
rc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_201611
30_222454/b/trustzone_images/core/boot/qfprom/hw/core_2_0 -I/local/mnt/workspac
e/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_im
ages/core/boot/qfprom/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-
M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/unifiedcrypt
o/shared/sha/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAA
ANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/unifiedcrypto/shared/
sha/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_2
0161130_222454/b/trustzone_images/core/securemsm/unifiedcrypto/environment/inc 
-I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_
222454/b/trustzone_images/core/securemsm/unifiedcrypto/core/sha/inc -I/local/mn
t/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/tr
ustzone_images/core/securemsm/cryptodrivers/ce/shared/inc -I/local/mnt/workspac
e/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_im
ages/core/securemsm/trustzone/qsee/include -I/local/mnt/workspace/CRMBuilds/TZ.
BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/secur
emsm/trustzone/qsee/arch/armv7/include -I/local/mnt/workspace/CRMBuilds/TZ.BF.2
.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm
/secmath/shared/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909A
AAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/secrsa/shared/inc 
-I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_
222454/b/trustzone_images/core/securemsm/secrsa/shared/src -I/local/mnt/workspa
ce/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_i
mages/core/securemsm/secboot/api -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10
-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/dal/framework/i
nc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_201611
30_222454/b/trustzone_images/core/dal/framework/sys/inc -I/local/mnt/workspace/
CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_imag
es/core/dal/config -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AA
AAANAZT-2_20161130_222454/b/trustzone_images/core/debugtools/version/src -I/loc
al/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454
/b/trustzone_images/core/hwengines/bam/inc -I/local/mnt/workspace/CRMBuilds/TZ.
BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/mproc
/smem/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2
_20161130_222454/b/trustzone_images/core/power/dcvs/inc -I/local/mnt/workspace/
CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_imag
es/core/services/utils/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004
-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/storage/sd_mgr/inc -I
/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_22
2454/b/trustzone_images/core/systemdrivers/busywait/inc -I/local/mnt/workspace/
CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_imag
es/core/systemdrivers/clk/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00
004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/systemdrivers/hal/
qgic/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_
20161130_222454/b/trustzone_images/core/kernel/lk/kernel/inc -I/local/mnt/works



ARM Macro Assembler    Page 16 


pace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone
_images/core/kernel/lk/arch/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-
00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/kernel/lk/platfo
rm/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20
161130_222454/b/trustzone_images/core/kernel/vmidmt/hal/inc -I/local/mnt/worksp
ace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_
images/core/kernel/vmidmt/hal/inc/8909w -I/local/mnt/workspace/CRMBuilds/TZ.BF.
2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/kernel/x
pu2/hal/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT
-2_20161130_222454/b/trustzone_images/core/kernel/xpu2/hal/inc/8909w -I/local/m
nt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/t
rustzone_images/core/kernel/mmu/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.
c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/kernel/hyper
visor/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2
_20161130_222454/b/trustzone_images/core/kernel/hypervisor/inc/8909w -I/local/m
nt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/t
rustzone_images/core/kernel/smmu/smmu500 -I/local/mnt/workspace/CRMBuilds/TZ.BF
.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/kernel/
smmu/smmu500/8909w/tz -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M890
9AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/s
ervices/img_auth/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909
AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/ar
ch/msm8909/cfg/mmu -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AA
AAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/arch
/msm8909/src -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZ
T-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/arch/commo
n/inc -I/local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_201
61130_222454/b/trustzone_images/core/securemsm/trustzone/image_version/inc -I/l
ocal/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_2224
54/b/trustzone_images/core/securemsm/trustzone/qsee/arch/msm8909w/src -I/local/
mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/
trustzone_images/core/securemsm/trustzone/qsee/arch/msm8909w/cfg/common --prede
fine="SYSINI_STUBS SETL {TRUE}" --list=/local/mnt/workspace/CRMBuilds/TZ.BF.2.5
.c10-00004-M8909AAAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/t
rustzone/qsee/arch/common/build/tzbsp_no_xpu/cortexA7/MATAANAA/src/tzbsp_sys_as
m.o.lst --sitelicense /local/mnt/workspace/CRMBuilds/TZ.BF.2.5.c10-00004-M8909A
AAAANAZT-2_20161130_222454/b/trustzone_images/core/securemsm/trustzone/qsee/arc
h/common/build/tzbsp_no_xpu/cortexA7/MATAANAA/src/tzbsp_sys_asm.o.i
