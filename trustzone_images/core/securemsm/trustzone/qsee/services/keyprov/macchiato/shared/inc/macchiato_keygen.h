/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

                      TrustZone MACCIATO KEYGEN

General Description
  Implement Macchiato ECC private Keygen function used within TZ

Copyright (c) 2014-2015 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/

/*===========================================================================

                           Edit History

  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/securemsm/trustzone/qsee/services/keyprov/macchiato/shared/inc/macchiato_keygen.h#1 $
  $DateTime: 2016/06/17 14:31:11 $
  $Author: pwbldsvc $

when         who     what, where, why
--------     ---     -------------------------------------------------------
02/24/15     bh      Change return type; removed unused defines
09/24/14     cz      Added Auto encrypt/sign enum
08/14/14     qxu     Initial Revision
===========================================================================*/

#ifndef MACCHIATO_KEYGEN_H
#define MACCHIATO_KEYGEN_H

/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include "tzbsp_cipher.h"
#include "ecc_core.h"
#include "qsee_macchiato.h"

/* 
 * bit 0: 0 = signing, 1 = encryption
 * bit 12: 00 = AUTO select 
 *         01 = HW key
 *         10 = SW key 
 */
#define MACCHIATO_KEY_TYPE_ECC_AUTO_SIGNING        (0x0)
#define MACCHIATO_KEY_TYPE_ECC_HWKEY_SIGNING       (0x1)
#define MACCHIATO_KEY_TYPE_ECC_SWKEY_SIGNING       (0x2)
#define MACCHIATO_KEY_TYPE_ECC_AUTO_ENCRYPTION     (0x3)
#define MACCHIATO_KEY_TYPE_ECC_HWKEY_ENCRYPTION    (0x4)
#define MACCHIATO_KEY_TYPE_ECC_SWKEY_ENCRYPTION    (0x5)

/* 
 * For P256 bigval_t types hold 288-bit 2's complement numbers (9
 * 32-bit words).  For P192 they hold 224-bit 2's complement numbers
 * (7 32-bit words).
 * 
 * The representation is little endian by word and native endian
 * within each word.
 */

/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/

// ////////////////////////////////////////////////////////////////////

/* Seed computation routine. Generates a ECC private key.
 * Output privkey is a pointer to a 256 bit number between 1 and the order
 * of the underlying elliptic curve. This number is generated deterministically
 * from the BPK.
 * The public key is then generated by the following call:
 * ECDH_mult_basepoint(&public_point, &privkey);
 * where public_point is an elliptic curve point in affine coordinates.
 * 
 * The routine includes two different magic texts for the signing and encryption
 * keys. The first four bytes of the magic texts are in fact initially zero and
 * represent counters. The key generator repeatedly encrypts the magic text using
 * AES-CBC and the BPK as the AES-256 key, increasing the counter, until a value
 * is obtained that, as an integer represents an integer between 1 and the
 * order of the base point on the curve, minus one.
 * 
 * @param[in]    type   keytype	is used to establish whether the private key generated
 *                      will be	the one used for signing or for encryption.	
 * 						– MACCHIATO_KEY_TYPE_ECC_SIGNING, or
 *  					– MACCHIATO_KEY_TYPE_ECC_ENCRYPTION or
 *                        MACCHIATO_KEY_TYPE_SWKEY_ECC_SIGNING or
 *                        MACCHIATO_KEY_TYPE_SWKEY_ECC_ENCRYPTION
  
 * @param[out]   privkey  Output privkey is a pointer to a 256 bit number between
 *                        1 and the order of the underlying elliptic curve. Memory
 *                        must be allocated by caller. 
 *
 * @return 
 * 0     - Function executes successfully.
 * errors can depend on the actual implementation of the AES_set_key routine,
 * in general CE_ERROR_INVALID_ARG
 */
macchiato_err_t macchiato_gen_ecc_privkey(int type, bigval_t *privkey, uint32 keylen);

#endif //MACCHIATO_KEYGEN_H

