#ifndef TZBSP_H
#define TZBSP_H

/**
@file TZBSP.h
@brief Trustzone OS Main header file

Contains common defintion used by TZBSP module.

*/
/*===========================================================================
   Copyright (c) 2010 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
===========================================================================*/
/*===========================================================================

                           EDIT HISTORY FOR FILE

This section contains comments describing changes made to this file.
Notice that changes are listed in reverse chronological order.

$Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/securemsm/trustzone/qsee/include/tzbsp.h#1 $

when         who     what, where, why
----------   ---     ----------------------------------------------------------
11/19/2012    yh     TZ application ID
============================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
#include <comdef.h>
#include "tzbsp_errno.h"

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/
#define TZBSP_MAJOR_VERSION   0x1
#define TZBSP_MINOR_VERSION   0x0

#define TZBSP_APP_ID_LEN 8
extern uint8 global_tz_app_id[TZBSP_APP_ID_LEN];

/** Context information for ns and secure*/
typedef struct tzbsp_regs_s
{
   uint32   pc;
   uint32   cpsr;
   uint32   reg[14];
   /* add neon context here */
} tzbsp_regs_t;

/** Possible reasons for the ERR_FATAL call 
 *  NOTE: New entries should be added to the end, and old entries never removed.
 *        These values are used across multiple generations of TZ.
 */
enum tzbsp_err_fatal_enum {
  TZBSP_ERR_FATAL_NONE = 0,
  TZBSP_ERR_FATAL_NON_SECURE_WDT, 
  TZBSP_ERR_FATAL_SECURE_WDT, 
  TZBSP_ERR_FATAL_AHB_TIMEOUT,
  TZBSP_ERR_FATAL_RPM_WDOG,
  TZBSP_ERR_FATAL_RPM_ERR,
  TZBSP_ERR_FATAL_NOC_ERROR,
  TZBSP_ERR_FATAL_SMEM,
  TZBSP_ERR_FATAL_XPU_VIOLATION,
  TZBSP_ERR_FATAL_SMMU_FAULT,
  TZBSP_ERR_FATAL_QSEE,
  TZBSP_ERR_FATAL_BIMC_ERROR,
  TZBSP_ERR_FATAL_BAD_IMAGE = 0xFF,

};
typedef uint32 tzbsp_err_fatal_e;

/*---------------------------------------------------------------------------
  Symbols generated by linker with "$".  These symbols define the
  Read/Write data area in boot ROM and RAM, and the Zero Init data area in
  RAM.  Base addresses and length in bytes are given.
---------------------------------------------------------------------------*/
extern uint32  Load$$TZBSP_RAM_RW$$Base;
extern uint32  Image$$TZBSP_RAM_RW$$Base;
extern uint32  Image$$TZBSP_RAM_RW$$Length;
extern uint32  Image$$TZBSP_RAM_ZI$$Base;
extern uint32  Image$$TZBSP_RAM_ZI$$ZI$$Length;

typedef int (*tzbsp_init_func_t) (void);

typedef struct tzbsp_init_entry_s
{
  uint32 flags;              ///< flags for special handling
  tzbsp_init_func_t func;    ///< Initialization function
} tzbsp_init_entry_t;

#define TZBSP_INIT_ENTRY() \
  struct \
  { \
    uint32                flags; \
    tzbsp_init_func_t     func; \
  }

#define TZBSP_INIT_COLD_BOOT    0x0001
#define TZBSP_INIT_WARM_BOOT    0x0002
#define TZBSP_INIT_BOOT         (TZBSP_INIT_COLD_BOOT | TZBSP_INIT_WARM_BOOT)

/* Put all system calls in a specific memory section */
#define TZBSP_DEFINE_INIT(flags, func) \
   static TZBSP_INIT_ENTRY() init_ ##func \
   __attribute__((section("_tz_init"))) = { flags, func }

/* The names of the external sections */
extern void * _tz_init$$Base;
extern void * _tz_init$$Limit;

/* Section to place specific functions in non-paged memory */
#define TZBSP_NON_PAGED_SEC   __attribute__((section("NON_PAGED")))

#ifndef TZBSP_WITH_TBASE
extern int g_tzbsp_mmu_enable;
#endif
/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/

/**
  @brief The TZBSP Init Handler called once during cold boot time by TZBSP reset
   vector.

   This routine performs all the TrustZone related initializations for
   (a) Hardware
   (b) Services
   (c) Secure Channel Manager
*/
void tzbsp_init(void);

/**
  @brief Configure the hardware. This functions setups the QGIC, FIQ handlers,
  XPU's M2VMIDs, and static security settings.

  @param[in] debug TZ was loaded with a debug image. This is necessary to
              provide fuse overide.

  @return 0 on success, negative on failure

  @note Eventually MMU support and setup will be done here.
*/
int tzbsp_configure_hw(uint32 debug);

/**
  This function is called by tzbsp_error_handler only. We perform
  clean up of the registers and loop until JTAG is connected.
*/
void tzbsp_loop_here(void);

/**
  This function is called by secure code to signal
  a fatal error requiring a reset

  @param[in]  err   The category of error requiring the reset

  @sideeffects  This function does not return since it resets the
                processor
*/
void tzbsp_err_fatal(tzbsp_err_fatal_e err);

#endif /* TZBSP_H */
