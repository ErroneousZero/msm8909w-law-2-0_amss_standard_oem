#===============================================================================
#
# cryptoLibs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2015 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/tz.bf/2.5.c10/trustzone_images/core/securemsm/cryptodrivers/ce/chipset/msm8909/build/SConscript#1 $
#  $DateTime: 2016/06/17 14:31:11 $
#  $Author: pwbldsvc $
#  $Change: 10727476 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/10/10   ejt     Added boot images from CE1
#
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Publish Private APIs
#-------------------------------------------------------------------------------
env.PublishPrivateApi('CECL', [
   '${INC_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8909/inc',
   '${INC_ROOT}/core/securemsm/cryptodrivers/ce/environment/inc', 
   '${INC_ROOT}/core/securemsm/cryptodrivers/ce/environment/src',
])

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8909/src"
HDRPATH = "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8909/inc"

if env.has_key('USES_NO_DEBUG'):
   env.Replace(DBUG_MODE = "NoDebug")
else:
   env.Replace(DBUG_MODE = "Debug")

if env.has_key('IMAGE_NAME'):
   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}/${DBUG_MODE}'
else:
   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}/${DBUG_MODE}'

#env.Replace(SECUREMSMLIBPATH = SECUREMSMLIBPATH)
#env.VariantDir('${SECUREMSMLIBPATH}', SRCPATH, duplicate=0)
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsee/arch/${CHIPSET}/cfg/common")

env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/qsee/arch/${CHIPSET}/src")

env.Append(CPPPATH = "${COREBSP_ROOT}/securemsm/trustzone/armlib/v7/inc")


if env.has_key('USES_NO_CP'):
	env.Append(CCFLAGS = ' -DUSES_NO_CP ')

#-------------------------------------------------------------------------------
# External depends outside CoreBSP
#-------------------------------------------------------------------------------
env.RequireExternalApi([
   'BREW',
   'CS',
   'DSM',
])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'SECUREMSM',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   'WIREDCONNECTIVITY',
   'BOOT',
   'HWENGINES',
   'POWER',
   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------
env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS}")
env.Replace(ARMLD_NOREMOVE_CMD = "")

env.Append(CPPDEFINES = ['_ARM_', '__arm', 'ARM', 'ARM_BREW_BUILD'])
if env.has_key('BUILD_BOOT_CHAIN'):
   env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

CECL_LIB_SOURCES = [
        '${BUILDPATH}/CeCL.c',
        '${BUILDPATH}/CeCL_Ce0.c',
]

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/mdm9x25/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8x10/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*.h", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8x26/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8974/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/mdm9x35/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/apq8084/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8962/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/msm8916/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

CLEAN_SOURCES = env.FindFiles("*", "${BUILD_ROOT}/core/securemsm/cryptodrivers/ce/chipset/mdm9x07/")

env.CleanPack(['TZOS_IMAGE'], CLEAN_SOURCES)

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddBinaryLibrary(['TZOS_IMAGE'], '${BUILDPATH}/CeCL', CECL_LIB_SOURCES)


