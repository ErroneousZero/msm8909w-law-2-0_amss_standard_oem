/*!
  @file
  lte_rrc_config.h

  @brief
  Header file internal to RRC Config Module

  @detail
  This header contains the constants definition and external function prototype 
  declarations used by the Config module and its UTF test cases.

*/

/*===========================================================================

  Copyright (c) 2008 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/lte/RRC/src/lte_rrc_configi.h#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
06/09/10   aramani Ported code to Objective Systems 
04/05/10   da      Added dd_ptr in priv data for usage with dymically allocated mem.
08/06/08   da      Initial Version
12/02/08   mm      Added t304 related to fields to Config modules's private data 
                   to implement Phase II features
===========================================================================*/

#ifndef LTE_RRC_CONFIG_IH
#define LTE_RRC_CONFIG_IH

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

#include "lte_variation.h"
#include <__lte_rrc_config.h>
#include "lte_rrc_osys_asn1util.h"
#include "lte_rrc_osys_asn1util.h"
#include "lte_rrc_utils.h"
#include "lte_rrc_config.h"
#include "lte_rrc_ext_msg.h"
#include "lte_rrc_int_msg.h"
#include <npa.h>

/*===========================================================================

                         LOCAL VARIABLES

===========================================================================*/

#define LTE_RRC_CONFIG_INITIAL_VALUE_UINT8 0xFF

#define LTE_RRC_RECONFIG_WAIT_TIMER_VAL 30000 /* ms */

#define LTE_RRC_CONFIG_RF_UNAVAIL_THRESH 40 /*percentage*/

#define LTE_RRC_CONFIG_MAX_T304_RESTART_VAL_TA 200 /*ms*/

#define LTE_RRC_CONFIG_MAX_T304_RESTART_ATTEMPT_TA 3


/*! @brief enumeration to identify the type of DLM being processed 
*/
typedef enum
{
  LTE_RRC_CONFIG_DLM_TYPE_NONE = 0,   
  LTE_RRC_CONFIG_DLM_TYPE_RECFG,
  LTE_RRC_CONFIG_DLM_TYPE_MOBILITY_TO_W,
  LTE_RRC_CONFIG_DLM_TYPE_MOBILITY_TO_TDS,
  LTE_RRC_CONFIG_DLM_TYPE_MOBILITY_TO_G,
  LTE_RRC_CONFIG_DLM_TYPE_MOBILITY_TO_1X,
  LTE_RRC_CONFIG_DLM_TYPE_MOBILITY_TO_HDR,
  LTE_RRC_CONFIG_DLM_TYPE_HO_TO_LTE

} lte_rrc_config_dlm_type_e;

/*! @brief Structure for private data variables that can be allocated dynamically
     from the heap when LTE is activated, and deallocated when LTE is deactivated  
*/
typedef struct
{
  /*! Pointer to Decoded DL DCCH msg */
  lte_rrc_osys_DL_DCCH_Message *dl_dcch_msg_ptr;

  /*! Pointer to decoded RRC Connection Reconfiguration msg */
  lte_rrc_osys_RRCConnectionReconfiguration *recfg_msg_ptr; 

  /*! Transaction ID generated by LLC, for use within RRC */
  uint32 llc_trans_id;

  /*! ASN.1 encode status for reconfig complete msg - 0 means SUCCESS */
  uint8 encode_status; 

  /*! DLM type that is being processed by Config */
  lte_rrc_config_dlm_type_e dlm_type;

  /*! Indicates if this is the first reconfig msg after connection re-establishment */
  boolean config_after_cre; 

  /*! Indicates if PSHO was aborted during LLC Config or RACH */
  boolean psho_aborted; 

  /*! T304 timer */
  lte_rrc_tmr_s t304_tmr;

  /*! Reconfig wait timer */
  lte_rrc_tmr_s reconfig_wait_tmr;

  /*! Flag to be set for intra-cell HO */
  boolean intra_cell_ho;

  #ifdef FEATURE_LTE_REL11
  /*! SFN in which DCCH SIB1 was received */
  lte_sfn_s dcch_sib1_sfn;
  #endif

  /*! HO Source cell Info */
  lte_rrc_cell_info_s ho_source_cell_info; 

  /*! Ho Failure during Closing state*/
  boolean ho_failure_in_closing_state;

  #ifdef FEATURE_LTE_ELS_ENABLED
  /*! Pointer to Decoded ELS DL DCCH msg */
  lte_rrc_osys_ELS_DL_DCCH_Message *els_dl_dcch_msg_ptr;

  /*! Flag to be set if RLF is due to Invalid ELS IEs*/
  boolean rlf_due_to_els_ies;
  #endif

  /*! Flag to indicate if RF is unavailable*/
  boolean is_rf_unavailable;

  /*! T304 Restart attempt for Tune away*/
  uint8 t304_restart_attempt_ta;

} lte_rrc_config_dd_s;

/*! @brief Structure for private data variables that are statically allocated
*/
typedef struct
{
  /*! Remove the field below when no longer needed */
  /*! Temporary EFS item - If security validation is enabled or not */
  uint8 sec_validation_enabled;

  /*! To determine whether to allow NAS PDU in empty recfg message */
  uint8 nas_pdu_in_recfg_chk_enabled;

  /*! To determine whether to allow CQI/RI configuration when NRIOffset falls outside CQI periodicity (Npd) */
  uint8 cqi_ri_periodicity_check_disabled;

  /*! Timer value for Reconfig wait timer */
  uint32 reconfig_wait_tmr_value;

  /*! To determine whether to allow CQI-r8 to r10 or other way with out full config*/
  uint8 allow_cqi_ant_rel_change_without_full_cfg;
  
  /*! NPA client handle */
  npa_client_handle npa_client;

  #ifdef FEATURE_LTE_REL11
  /*! To determine whether FeICIC is supported or not*/
  boolean feicic_supported;
  #endif

  /*! To determine whether Scell CQI needs to be released during HO or not*/
  boolean rel_scell_cqi_during_ho;

  /*! Timer value for T304 */
  uint32 t304_value;

  /*! T304 value for which RF was unavailable
          If it is >= 40% of actual T304 then OOS indication due to T304 expiry
          will not be indicated to the user
  */
  uint32 t304_tmr_rf_unavail;
} lte_rrc_config_sd_s;

/*! @brief Structure for state-machine per-instance local variables
*/
typedef struct
{
  /*!< Dynamically allocated part of private data */
  lte_rrc_config_dd_s *dd_ptr;

  /*!< Statically allocated part of private data */
  lte_rrc_config_sd_s *sd_ptr;

} lte_rrc_config_s;



/*===========================================================================

                    EXTERNAL FUNCTION PROTOTYPES

===========================================================================*/

STATIC void lte_rrc_config_send_config_failure_indi
(
  lte_rrc_conn_mode_failure_cause_e config_failure_cause, /*!< Config failure cause */
  lte_rrc_ho_failure_cause_e ho_failure_cause  /*!< HO Failure cause */
);

#endif /* LTE_RRC_CONFIG_IH */
