/*!
  @file
  lte_rrc_crei.h

  @brief
  Header file internal to RRC CRE Module

  @detail
  This header contains the constants definition and external function prototype 
  declarations used by the CRE module and its UTF test cases.

*/

/*===========================================================================

  Copyright (c) 2009 Qualcomm Technologies Incorporated. All Rights Reserved

  Qualcomm Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/lte/RRC/src/lte_rrc_crei.h#1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
01/06/11   mm      Added a new CRE cause for misc RLF
04/05/10   da      Added dd_ptr in priv data for usage with dymically allocated mem.
05/28/09   mm      Added RLF 2.0 changes
02/10/09   da      Initial Version

===========================================================================*/

#ifndef LTE_RRC_CREI_H
#define LTE_RRC_CREI_H

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

#include <__lte_rrc_cre.h>
#include "lte_rrc_osys_asn1util.h"
#include "lte_rrc_utils.h"
#include "lte_rrc_ext_msg.h"

/*===========================================================================

                         LOCAL VARIABLES

===========================================================================*/

/*! Default T311 value based on 36.331 */
#define LTE_RRC_DEFAULT_T311_VALUE 1000
#define NUM_OF_REPEATED_RLF_CELLS 3
#define DEFAULT_REPEATED_RLF_THRESHOLD 6
#define MAX_SHORT_BARRING_ATTEMPTS 1
#define SHORT_DURATION_RESET_TIME_IN_SEC 900
#define NUM_OF_CDRX_COLLISIONS 3
#ifdef FEATURE_LTE_ELS_ENABLED
#define LTE_RRC_CRE_DEFAULT_NUM_ELS_RLF 4
#define LTE_RRC_CRE_DEFAULT_NUM_ELS_RLF_VOLTE 2
#define LTE_RRC_CRE_DEFAULT_ELS_RLF_TIME_WINDOW_SEC 300
// ELS Error handle timer default is 72hrs (i.e. 4320 mins)
#define LTE_RRC_CRE_DEFAULT_ELS_ERROR_HANDLE_TMR_MINS 4320
#define LTE_RRC_CRE_MAX_ELS_TAC_LIST 2
#endif

/*! @brief enumeration to identify the reason for sending CFG_REQI to LLC 
*/
typedef enum
{
  LTE_RRC_CRE_CFG_REASON_SUSPEND_RB,   /*!< To suspend RBs when CRE starts */
  LTE_RRC_CRE_CFG_REASON_SRB1,   /*!< SRB1 being resumed after CRE mesg arrives */
  LTE_RRC_CRE_CFG_REASON_MAX          /*!< Invalid */

} lte_rrc_cre_cfg_reason_e;

/*! @brief Structure for keeping track of repeated rlf cells 
*/
typedef struct
{
  uint32 rlf_timestamps[DEFAULT_REPEATED_RLF_THRESHOLD]; /*! every rlf corresponds to a timestamp lte_get_current_time*/
  uint8 rlf_count; /*! counter */
  uint8 short_barring_used; /*! count to see how many times short duration barring has been used */
  lte_rrc_global_cell_id_t cell_identity; /*! cgi info of connected cell */
} lte_rrc_cre_repeated_rlf_cell_info_s;

#ifdef FEATURE_LTE_ELS_ENABLED
/*! @brief Structure for ELS Error handle parameters
*/
typedef struct
{
  uint8 rlf_count; /*! Number of allowable ELS RLFs*/
  uint16 rlf_time_window; /*! ELS RLFs time window in seconds*/
  uint32 error_handle_tmr; /*! ELS Error handling timer value in mins*/
} lte_rrc_cre_els_error_handle_params_s;
#endif

/*! @brief Structure for private data variables that can be allocated dynamically
     from the heap when LTE is activated, and deallocated when LTE is deactivated
*/
typedef struct
{
  /*! Trans id rcvd in Conn Reestablishment msg. */ 
  lte_rrc_osys_RRC_TransactionIdentifier cre_transaction_id;

  /*! Trans ID generated by LLC for use within CFG_REQI */
  uint32 llc_trans_id;

  /*! Reason for CFG_REQI sent to LLC */
  lte_rrc_cre_cfg_reason_e cfg_reason; 

  /*! Cell where CRE was triggered */
  lte_rrc_cell_info_s source_cell_info; 

  /*! Source cell C-RNTI */
  lte_rnti_val_t source_cell_crnti; 

  /*! T311 timer */
  lte_rrc_tmr_s t311_tmr; 

  /*! Timer value for T311 */
  uint32 t311_value;  

  /*! CRE Cause */
  lte_rrc_cre_cause_e cre_cause; 

  /*! T301 timer */
  lte_rrc_tmr_s t301_tmr; 

  /*! Timer value for T301 */
  uint32 t301_value;  

  /*! No. of RLFs encountered since LTE stack activation */
  uint16 rlf_count_since_lte_active; 

  /*! No. of RLFs encountered since RRC went into CONNECTED state */
  uint16 rlf_count_since_rrc_connected; 

  /*! Reason Reestablishment did not complete, if applicable */
  lte_rrc_cre_failure_cause_e cre_failure_cause;

  /*! Encoded ReestablishmentRequest ptr */
  uint8 *encoded_cre_req_ptr;  

  /*! ASN.1 encode status - 0 means success */
  uint8 encode_status; 

  /*! Boolean to indicate if meas config needs to be reverted */
  boolean revert_meas_config; 

  /*! Boolean to indicate if conn release was received in middle of suspending RBs */
  boolean conn_rel_during_suspend; 

  /*! Pointer to Decoded DL CCCH msg */
  lte_rrc_osys_DL_CCCH_Message *dl_ccch_msg_ptr;

  /*Boolean to indicate RLF during CLOSING state*/
  boolean rlf_in_closing_state;
  /*! CDRX  Collision Count*/
  uint8 cdrx_collision_count;

}lte_rrc_cre_dd_s;


typedef struct
{
  /*! Array of RLF cells*/
  lte_rrc_cre_repeated_rlf_cell_info_s rlf_cell_info[NUM_OF_REPEATED_RLF_CELLS];

  /*! Struct to customize CDRX Collision parameters via EFS*/
  lte_l1_cdrx_collision_params_s cdrx_collision_params;
  
  /*! Boolean to indicate if UE should assert upon RLF (configured via EFS)*/
  boolean assert_on_rlf;
  
  #ifdef FEATURE_LTE_ELS_ENABLED
  /*! Struct to customize ELS error handling parameters via EFS*/
  lte_rrc_cre_els_error_handle_params_s els_error_handle_params;

  /*! Number of ELS TACs in which UE encountered RLF due to ELS IEs*/
  uint8 num_els_tac;

  /*! TACs in which UE encountered RLF due to invalid ELS DL DCCH message*/
  uint16 els_tac[LTE_RRC_CRE_MAX_ELS_TAC_LIST];

  /*! Number of RLFs due to invalid ELS DL DCCH message*/
  uint8 num_els_rlf;

  /*! Time stamp at which UE encountered RLF due to invalid ELS DL DCCH message*/
  uint32 first_els_rlf_time_stamp;

  /*! Latest Time stamp at which UE encountered RLF due to invalid ELS DL DCCH message*/
  uint32 last_els_rlf_time_stamp;

  /*! ELS Error handling time stamp*/
  uint32 els_error_handle_time_stamp; 
  #endif
  
}lte_rrc_cre_sd_s;

/*! @brief Structure for state-machine per-instance local variables
*/
typedef struct
{
  /*!< Dynamically allocated part of private data */
  lte_rrc_cre_dd_s *dd_ptr;
  lte_rrc_cre_sd_s *sd_ptr;

} lte_rrc_cre_s;

/*===========================================================================

                    EXTERNAL FUNCTION PROTOTYPES

===========================================================================*/

#endif /* LTE_RRC_CREI_H */
