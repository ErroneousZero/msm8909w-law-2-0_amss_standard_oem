#===============================================================================
#
# NAS MM SCons 
#
# GENERAL DESCRIPTION
#    SCons build script
#
# Copyright (c) 2010 - 2011 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/mmcp/nas/mm/build/nas_mm.scons#1 $
#  $DateTime: 2016/12/13 08:00:05 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 04/28/11   pm      Update for MSGR_DEFINE_UMID() calls
# 04/12/11   pm      Set MSG_BT_SSID_DFLT to map legacy messages to your SSID name
# 09/15/10   pm      Initial file
#
#===============================================================================
#from glob import glob
#from os.path import join, basename

Import('env')
env = env.Clone()

if 'USES_GSM' not in env and ('USES_UMTS' not in env or 'USES_WPLT' in env):
   Return()

# --------------------------------------------------------------------------- #
# Turn off/on debug if requested 			      
# --------------------------------------------------------------------------- # 
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")

if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
    'MSG_BT_SSID_DFLT=MSG_SSID_NAS_MM',
])

#-------------------------------------------------------------------------------
# For MSGR_DEFINE_UMID() calls
#-------------------------------------------------------------------------------
if 'USES_MSGR' in env:
    env.AddUMID('${BUILDPATH}/emm_esm_if.umid', ['../inc/emm_esm_if_msg.h'])
    env.AddUMID('${BUILDPATH}/emm_ext.umid', ['../../../api/emm_ext_msg.h'])
    env.AddUMID('${BUILDPATH}/emm_irat_if.umid', ['../../../api/emm_irat_if_msg.h'])

#-------------------------------------------------------------------------------
# Publish our Private API
#-------------------------------------------------------------------------------
env.PublishPrivateApi('NAS', ["${INC_ROOT}/mmcp/nas/mm/inc"])

#-------------------------------------------------------------------------------
# Necessary Public API's
#-------------------------------------------------------------------------------
REQUIRED_PUBLIC_APIS = [
    'DATA',
    'DATACOMMON',
    'GERAN',
    'GPS',
    'HDR',
    'LTE',
    'MCS',
    'MMODE',
    'NAS',
    'ONEX',
    'RFA',
    'UIM',
    'UTILS',
    'WCDMA',
    ]

REQUIRED_RESTRICTED_APIS = [
    'DATA',
    'FW',
    'GERAN',
    'GPS',
    'HDR',
    'LTE',
    'MCS',
    'MDSP',
    'MMODE',
    'NAS',
    'RFA',
    'UIM',
    'UTILS',
    'WCDMA',
    'TDSCDMA',
    ]

CORE_APIS = [
    'DAL',
    'DEBUGTOOLS',
    'MPROC',
    'SERVICES',
    'STORAGE',
    'SYSTEMDRIVERS',
    'SECUREMSM',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

MULTIMEDIA_APIS = [
    'MVS',
    ]

env.RequirePublicApi(CORE_APIS, area='core')

env.RequirePublicApi('AUDIO', area='MULTIMEDIA') 
env.RequirePublicApi(MULTIMEDIA_APIS, area='MULTIMEDIA')

env.RequirePublicApi(REQUIRED_PUBLIC_APIS) 
env.RequireRestrictedApi(REQUIRED_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# External API's not built with SCons
#-------------------------------------------------------------------------------
env.RequireExternalApi([
    'BREW',
    'MULTIMEDIA_AUDIO',
])

env.PublishPrivateApi('VIOLATIONS', ['${INC_ROOT}/core/securemsm/cryptodrivers/prng/shared/inc ',
                                     ])
#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------

# Construct the list of source files by looking for *.c
#MM_C_SOURCES = ['${BUILDPATH}/' + basename(fname)
#                 for fname in glob(join(env.subst(SRCPATH), '*.c'))]

MM_C_SOURCES = [
	'${BUILDPATH}/mmabort.c',
	'${BUILDPATH}/mmact.c',
	'${BUILDPATH}/mmcm.c',
	'${BUILDPATH}/mmconn.c',
	'${BUILDPATH}/mmcoord.c',
	'${BUILDPATH}/mmdeact.c',
	'${BUILDPATH}/mmforbid.c',
	'${BUILDPATH}/mmglbl.c',
	'${BUILDPATH}/mm_gstk.c',
	'${BUILDPATH}/mmidentity.c',
	'${BUILDPATH}/mminfo.c',
	'${BUILDPATH}/mmlu.c',
	'${BUILDPATH}/mmmain.c',
	'${BUILDPATH}/mmpaging.c',
	'${BUILDPATH}/mmparse.c',
	'${BUILDPATH}/mmplmnsel.c',
	'${BUILDPATH}/mmplmnsrch.c',
	'${BUILDPATH}/mmrat.c',
	'${BUILDPATH}/mmregister.c',
	'${BUILDPATH}/mmrrcconn.c',
	'${BUILDPATH}/mmsecurity.c',
	'${BUILDPATH}/mmsend.c',
	'${BUILDPATH}/mmsim.c',
	'${BUILDPATH}/mmstate.c',
	'${BUILDPATH}/mmsubstate.c',
	'${BUILDPATH}/mmsysinfo.c',
	'${BUILDPATH}/mmtask.c',
	'${BUILDPATH}/mmtimers.c',
	'${BUILDPATH}/mmtmsi.c',
	'${BUILDPATH}/mmumts.c',
	'${BUILDPATH}/mmutils.c',
	'${BUILDPATH}/gmm_main.c',
	'${BUILDPATH}/gmmconn.c',
	'${BUILDPATH}/gmminfo.c',
	'${BUILDPATH}/gmmllcm.c',
	'${BUILDPATH}/gmmmsg.c',
	'${BUILDPATH}/gmmreg.c',
	'${BUILDPATH}/gmmsecurity.c',
	'${BUILDPATH}/gmmsuspend.c',
	'${BUILDPATH}/gmmutils.c',
	'${BUILDPATH}/mmauth.c',
 	'${BUILDPATH}/mm_lsm.c',
 	'${BUILDPATH}/nasdiag.c',
]

MM_LTE_SOURCES = [
	'${BUILDPATH}/emm_cnm_handler.c',
	'${BUILDPATH}/emm_connection_handler.c',
	'${BUILDPATH}/emm_csfb_handler.c',
	'${BUILDPATH}/emm_database.c',
	'${BUILDPATH}/emm_esm_handler.c',
	'${BUILDPATH}/emm_mem.c',
	'${BUILDPATH}/emm_procedure_reject_handler.c',
	'${BUILDPATH}/emm_reg_handler.c',
	'${BUILDPATH}/emm_rrc_handler.c',
	'${BUILDPATH}/emm_rrc_if.c',
	'${BUILDPATH}/emm_security.c',
	'${BUILDPATH}/emm_service_request_lib.c',
	'${BUILDPATH}/emm_sim_handler.c',
	'${BUILDPATH}/emm_update_lib.c',
	'${BUILDPATH}/emm_utility.c',
	'${BUILDPATH}/emm_gps_handler.c',
	'${BUILDPATH}/emm_gps_lib.c',
	'${BUILDPATH}/lte_nas_msg_parse.c',
	'${BUILDPATH}/msg_lib_declarations.c',
	'${BUILDPATH}/msg_lib_decode_common_emm_ie.c',
	'${BUILDPATH}/msg_lib_decode_common_esm_ie.c',
	'${BUILDPATH}/msg_lib_decode_emm.c',
	'${BUILDPATH}/msg_lib_decode_esm.c',
	'${BUILDPATH}/msg_lib_encode_common_emm_ie.c',
	'${BUILDPATH}/emm_tlb_handler.c',
	'${BUILDPATH}/msg_lib_encode_common_esm_ie.c',
	'${BUILDPATH}/msg_lib_encode_emm.c',
	'${BUILDPATH}/msg_lib_encode_esm.c',
	'${BUILDPATH}/mm_multimode_handler.c',
	'${BUILDPATH}/msg_lib_parse_nas_hdr.c',
]

if 'USES_LTE' in env: 
    MM_C_SOURCES += MM_LTE_SOURCES

# Add our library to the ModemApps image
env.AddLibrary( ['MODEM_MODEM'], '${BUILDPATH}/nas_mm', [MM_C_SOURCES] )


# Build image for which this task belongs
RCINIT_MM = ['MODEM_MODEM']

# RC Init Function Dictionary
RCINIT_INIT_MM = {
            'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
            'init_name'           : 'mm_init',
            'init_function'       : 'mm_init_before_task_start',
            'policy_optin'        : ['default', 'ftm', ],
    }

# RC Init Function Dictionary
RCINIT_EXT_INIT_MM = {
            'sequence_group'      : 'RCINIT_GROUP_3',
            'init_name'           : 'mm_extern_init',
            'init_function'       : 'mm_extern_init',
            'policy_optin'        : ['default', 'ftm', ],
    }
# RC Init Task Dictionary
RCINIT_TASK_MM = {
            'thread_name'         : 'mm',
            'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
            'stack_size_bytes'    : env.subst('$MM_STKSZ'),
            'priority_amss_order' : 'MM_PRI_ORDER',
            'stack_name'          : 'mm_stack',
            'thread_entry'        : 'mm_main',
            'tcb_name'            : 'mm_tcb',
            'cpu_affinity'        : env.subst('$MODEM_NAS_CPU_AFFINITY'),
            'policy_optin'        : ['default', 'ftm', ],
    }
    
# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
            env.AddRCInitFunc(RCINIT_MM, RCINIT_EXT_INIT_MM)
            env.AddRCInitFunc(RCINIT_MM, RCINIT_INIT_MM)
            env.AddRCInitTask(RCINIT_MM, RCINIT_TASK_MM)


