#ifndef HDRSRCH_TYPES_H
#define HDRSRCH_TYPES_H

/*===*====*====*====*====*====*====*====*====*====*====*====*====*====*====*


                H D R   S E A C H E R    D E C L A R A T I O N S

DESCRIPTION
  This header file contains general types and macros that are specific to
  the HDR searcher.

INITIALIZATION AND SEQUENCING REQUIREMENTS

  Copyright (c) 2000- 2016 by Qualcomm Technologies, Incorporated.  All Rights Reserved.

*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

============================================================================

                        EDIT HISTORY FOR MODULE

$Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/hdr/srch/api/hdrsrchtypes.h#1 $
$DateTime: 2016/12/13 07:58:05 $ $Author: mplcsds1 $

when       who     what, where, why
--------   ---     --------------------------------------------------------- 
04/05/16   vko     FR 33944: Back port FR26160:3G back to LTE as fast as possible
02/02/15   vko     Add srch window param for D2L CGI
01/06/15   mbs     Updated delay of HDR RF path to precisely identify srch
                   peak position
09/09/14   vke     Redesign fix for connection close during QTA gap
08/22/14   vke     Delay connection close during QTA gap
08/07/14   mbs     Added support for trm lock exchange during IRAT procedures
02/26/14   vko     FR 17879: Extended EARFCN
05/05/14   ljl     Added HDRSRCH_CHANNEL_CHANGE_AND_NSET_UPDATE_CMD.
04/07/14   vke     Report different indication to CP when searcher moves from 
                   3a to 3f when compared with 3a to 3
10/31/13   ukl     Keep NSET updated for system avoidance.
08/08/13   vke     Added handling of sync substate callback
03/31/13   cnx     Support LTE deprioritization.
02/16/13   arm     Do default search if enabling div for reacq timeouts
                   or current rtc and pilot pos are not within 1 ms.
06/04/12   dsp     Added HDRSRCH_PA_STATE_INFO_INVALID_VALUE. 
04/02/12   arm     Supported diversity in reacq. 
05/02/12   mbs     Added D2L RSRQ parameters.
04/09/12   smd     Added two new SU APIs.
03/08/12   wsh     Merged NLB support
02/02/12   arm     Changed idle div to record only max 255 psinr for any
                   idle wakeup.
02/03/12   ljl     Checked RF cal before acquisition.
01/09/12   smd     Supported dynamic acquisition diversity.
12/14/11   rmg     Fixed a compiler warning generated by the last check in.
12/09/11   rmg     Added support for sending pointer to tx stop confirmation
                   callback as an argument in hdrsrch_acmac_stop_cb_type.
11/11/11   arm     HDR idle and access state diversity implemetation.
10/25/11   ljl     Handled the failure cases during optimized HO.
10/21/11   smd     Added HDRSRCH_IRAT_HDR_RTC_COMPENSATION. 
10/19/11   smd     SU API cleanup update.
10/10/11   arm     Supported second chain test call feature. 
09/30/11   ljl     Supported active HO.
09/23/11   smd     SU API cleanup.
09/07/11   lyl     Added HDRSRCH_INVALID_ASP_IDX_VALUE macro..
04/12/11   smd     Added a typedef for fw state. 
03/31/11   smd     Moved typedef of pn_phase to hdrsrch_msg.h. 
03/23/11   vlc     Added HDRSRCH_ORNL_CYCLE_NO_UPDATE.
03/05/11   arm     New API added to provide Rx and Tx power info to CM.   
03/03/11   arm     Fixed NPA crash due to overlapping NPA calls.   
02/22/11   smd     Supported FTM for IRAT connected mode measurement.
01/21/11   ljl     Declared system lost if FW requests reset.
09/28/10   vlc     Added callback function to notify upper layer of LTE 
                   reselection. 
09/01/10   vlc     Added support for DO->LTE pilot measurements/reselection.
04/23/10   rmg     Shifted HDRSRCH_MAX_NUM_CARRIERS outside RevB feature.
04/21/10   smd     Increased HDRSRCH_RUP_SECTOR_LIST_MAX_SIZE to 32.
04/15/10   smd     Added dump_sclk field in hdrsrch_cdma_and_lte_time_struc.
03/24/10   pxu     Removed FEATURE_HDR_QSM features  
03/10/10   smd     Redefined message structures as command param structures.
02/09/10   smd     Added feature for LTE to DO pilot measurement
12/29/09   ljl     Added API to enable firmware HDR App.
08/17/09   etv     Changed definition of hdrsrch_fl_carrier_info_type.
06/30/09   lyl     Updated for generic responses process.
05/18/09   ljl     Updated for firmware MSGR interface.
03/20/09   rkc     Added HDRSRCH_UNIQUE_PILOT_GID and HDRSRCH_PILOT_GID0,
                   and changed HDRSRCH_NOT_INCLUDED_PILOT_GID to 0xFF.
03/09/09   smd     Added support for pilot measurement velcro solution.
03/06/09   ljl     Added HDRSRCH_INVALID_ASP_INDEX.
03/11/09   wsh     Moved hdrsrch_pilot_gid_type out of FEATURE_HDR_REVB
07/21/08   ljl     Set the max number of scheduler tag to 127.
06/11/08   cc      Added aux_drc_cover.
05/08/08   ljl     Added HDRSRCH_AVOIDED_CHAN_MAX_SIZE.
04/18/08   mpa     Cleaned up mode from hdrsrch_nset_pilot_type struct
03/05/08   jyw     Reduced the size of scheduler group id pool from 64 to 63.
12/18/07   rkc     Added HDR REVB FLL related macros
12/12/07   sju     Renamed ChannelRecord structure and SystemType enum
10/31/07   ljl     Merged from Rev B branch.
07/11/07   jyw     Fixed the overflow bug for dynamic RUP threshold.
04/10/07   mt      Added structure definitions for RUP processing. 
02/07/07   rmg     Added support for TxT2P adjust (DeltaT2P).
11/21/06   jyw     Modified hdrsrch_pilot_rpt_type to include MSTR.
11/14/06   jyw     Added HDRSRCH_MON_LINK_ID and HDRSRCH_NO_LINK_ID.
09/19/06   grl     Added support for DDARF.
08/28/06   sq      Added support for FEATURE_HDR_QSM
05/03/06   ljl     Added support for hybrid access
04/05/06   sq      Added code review comments
03/06/06   sq      Added hdrsrchsleep wake-up reason definitions
09/19/05   sq      Added system loss reason HDRSRCH_SYSLOST_DSP_NOT_READY
09/10/05   grl     Added dynamic TC mode support for HPTS mode.
08/18/05   ljl     Added definition HDRSRCH_MAX_CACHE_RECORDS
08/18/05   ljl     Added code to check weak HDR coverage at sync state
07/28/05   ds      Added max hash channel list size definition
07/12/05   sq      Removed definition of HDRSRCH_SLEEP_UNTIL_ENUM_TYPE
05/16/05   dna     Add support for Rel. A TCA message fields
11/03/04   mpa     Removed dependency on std.h (merged with sys.h)
08/18/04   aaj     Added enum type for bcmcs status update
06/30/04   dna     Added a typedef for deactivate_done_cb
06/09/04   sq      Added new typedefs: asp_to_pn and pn_ecio 
04/08/04   aaj     Add a new enum type for suspend callback
11/18/03   aaj     Support for usability API between SRCH and LMAC
10/09/03   ajn     Added support for "Advise Unlock RF" command
03/11/03   ajn     Updated Copyright notice
02/21/03   aaj     Changed max nset size to 32 from 20.
01/06/03   ajn     Added "Reselect" as a SysLost reason, for weak coverage
12/19/02   ajn     Added system lost reason to SysLost callback.
05/01/02   aaj     Added HDR traffic tune away selection enum type
04/02/02   aaj     Added support for additional syslost codes
02/16/02   aaj     Add support for SLEEP_MAX_CCCS for HDR Parking State
02/06/02   ajn     hdrerrno -> errno; callbacks/defines moved from hdrsrch.h
09/13/01   aaj     Added PN roll callback function typedef
09/04/01   ajn     Added sleep duration enum.
02/27/01   ajn     Deprecated type removed.
11/30/00   ajn     Structure reorg / New enum types for parameters
11/22/00   ajn     Code review changes
11/10/00   ajn     Split hdrsrch_params into search and chan_mgmt params.
10/31/00   ajn     Added RAB values to ASET pilot type
08/22/00   vas     Created module.

==========================================================================*/


/*==========================================================================

                     INCLUDE FILES FOR MODULE

==========================================================================*/

#include "hdr_variation.h"
#include "comdef.h"
#include "sys.h"

#ifdef FEATURE_CMI
#include "sys_v.h"
#endif

#include "hdrmac.h"
#include "qw.h"
#include "hdrsrch_msg.h"
#ifndef FEATURE_RF_SVDO_API 
#include "hdrfw_msg.h"
#endif /* FEATURE_RF_SVDO_API */
#include "hdrl1_api.h"

/* <EJECT> */
/*==========================================================================

                            Data Declarations

==========================================================================*/



/*--------------------------------------------------------------------------
  Sundry
--------------------------------------------------------------------------*/
             

typedef uint8 hdrsrch_pilot_gid_type;
  /* Pilot group id type */

#ifdef FEATURE_HDR_REVB

#define HDRSRCH_NOT_INCLUDED_PILOT_GID   0xFF
  /* Pilot group id is not included in the current SP or NL.
     Only used in passing PGID from CP to SRCH. */

#define HDRSRCH_UNIQUE_PILOT_GID         0xFF
  /* Pilot group id used for unique or "differnet from any other" PGID */

#define HDRSRCH_PILOT_GID0               0
  /* Use this if REVB sector but Pilot group id is unknown and no previous
     valid 0-7 PGID. */

typedef enum 
{ 
  HDRSRCH_RUP_SUBTYPE_DEFAULT,
  HDRSRCH_RUP_SUBTYPE_1,
} hdrsrch_rup_subtype_type;
  /* RUP subtype type */
#endif /* FEATURE_HDR_REVB */

#define HDRSRCH_REF_LINK_ID       0xFF
  /* Current reference pilot link id */

#define HDRSRCH_NO_LINK_ID        0xFE 
  /* No pilot id assigned */

#define HDRSRCH_MON_LINK_ID       0xFD
  /* Current CC monitoring pilot link id */

#define HDRSRCH_NO_CCC_HASH       0xFF
  /* No control channel capsule hash */

#define HDRSRCH_INVALID_ASP_INDEX    ( ( hdrsrch_demod_idx_type ) -1 )
  /* Invalid asp index */

#define HDRSRCH_INVALID_SUBASET_INDEX  ( ( hdrsrch_subaset_idx_type ) -1 )
  /* Invalid Sub ASET Index */

#ifdef FEATURE_HDR_REVB
#define HDRSRCH_MAX_NUM_ASPS         HDRSRCH_ASET_MAX_SIZE                    
  /* Maximum number of Active Serving Pilots per carrier. The micro is used for
     ASP index allocation. The valid ASP index ranges from 0 to HDRSRCH_NUM_ASPS-1 */

#define HDRSRCH_MAX_NUM_CELLS        HDRSRCH_ASET_MAX_SIZE                    
  /* Maximum number of cells per carrier. The valid number of cells ranges from 
     0 to HDRSRCH_NUM_CELLS-1 */

#define HDRSRCH_RPC_IDX_NOT_ASSIGNED 0xFE
  /* The macro indicate the RPC index has been not assigned  */

#define HDRSRCH_NOT_ASSIGNED_DSC     0xFE
  /* The macro indicate the RPC index has been not assigned  */
#endif /* FEATURE_HDR_REVB */

#define HDRSRCH_NSET_MAX_SIZE       32
  /* Maximum number of Neighbour Set pilots */

#define HDRSRCH_MAX_CACHE_RECORDS   6
  /* The same as HDROVHD_MAX_CACHE_RECORDS (6) */

#define HDRSRCH_HASH_CHAN_MAX_SIZE  32
  /* Maximum number of hash channels on a sector's channel list */

#define HDRSRCH_AVOIDED_CHAN_MAX_SIZE  32
  /* Maximum number of avoided channels */

#define HDRSRCH_MAX_DEMOD_CARRIERS_CNT          3
  /* Maximum number of demod carriers */


#define HDRSRCH_RUP_SECTOR_LIST_MAX_SIZE        32
  /* Maximum number of sectors listed in RUP request */

#define HDRSRCH_1X_DEFAULT_PILOT_ADD            28
  /* corresponds to -14 dB Ec/Io */

#define HDRSRCH_1X_DEFAULT_PILOT_INCREMENT       1

#define HDRSRCH_PILOT_MEAS_SECTOR_LIST_MAX_SIZE    16
  /* Maximum number of sectors listed in pilot measument request */


#define HDRSRCH_LTE_TO_HDR_CHIP_RATE  25
  /* LTE chip rate is 30.72 MHZ, CDMA chip rate is 1.2288 MHZ. 
    1.2288 * 25 = 30.72 */

#define HDRSRCH_INVALID_ASP_IDX_VALUE 0x7
  /* invalid ASP index value */

#ifdef FEATURE_HDR_THOR_MODEM
#define HDRSRCH_IRAT_HDR_RTC_COMPENSATION  32
#elif defined FEATURE_HDR_JOLOKIA_MODEM
#define HDRSRCH_IRAT_HDR_RTC_COMPENSATION  39
#else
#define HDRSRCH_IRAT_HDR_RTC_COMPENSATION  25
#endif /* FEATURE_HDR_THOR_MODEM */
  /* This is the delay of HDR RF path. LTE gets its time at antena, DO gets its
     time after demod. The difference is RF path delay. Need to compensate this
     delay in IRAT time transfer
  */

typedef enum
{
  HDRSRCH_SYSTYPE_DO = 0x0,
  HDRSRCH_SYSTYPE_1X = 0x1
} 
hdrsrch_system_enum_type;

#ifdef FEATURE_HDR_BCMCS
/*--------------------------------------------------------------------------
  HDR Gold Broadcast Enable Enum Type
--------------------------------------------------------------------------*/

typedef enum
{
  BCMCS_DISABLED = 0,
  BCMCS_ENABLED
}
hdrsrch_bcmcs_enum_type;

#endif /* FEATURE_HDR_BCMCS */

/*--------------------------------------------------------------------------
  Search Window Offsets
    From: Table 6.6.6.5-2. Search Window Offset
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_WINOFFSET_NONE,
  HDRSRCH_WINOFFSET_PLUS_50_PERCENT,
  HDRSRCH_WINOFFSET_PLUS_100_PERCENT,
  HDRSRCH_WINOFFSET_PLUS_150_PERCENT,
  HDRSRCH_WINOFFSET_MINUS_50_PERCENT,
  HDRSRCH_WINOFFSET_MINUS_100_PERCENT,
  HDRSRCH_WINOFFSET_MINUS_150_PERCENT,

  HDRSRCH_WINOFFSET_MAX_SIZE,
    /* Number of elements in WinOffset Table */

  HDRSRCH_WINOFFSET_DEFAULT = HDRSRCH_WINOFFSET_MAX_SIZE
    /* Default window offset */
}
hdrsrch_winoffset_enum_type;



/*--------------------------------------------------------------------------
  Search Window Offsets
    From: Table 6.6.6.5.1-1. Pilot Drop Timer Values
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_DROPTIMER_100_MS,
  HDRSRCH_DROPTIMER_1_SEC,
  HDRSRCH_DROPTIMER_2_SEC,
  HDRSRCH_DROPTIMER_4_SEC,
  HDRSRCH_DROPTIMER_6_SEC,
  HDRSRCH_DROPTIMER_9_SEC,
  HDRSRCH_DROPTIMER_13_SEC,
  HDRSRCH_DROPTIMER_19_SEC,
  HDRSRCH_DROPTIMER_27_SEC,
  HDRSRCH_DROPTIMER_39_SEC,
  HDRSRCH_DROPTIMER_55_SEC,
  HDRSRCH_DROPTIMER_79_SEC,
  HDRSRCH_DROPTIMER_112_SEC,
  HDRSRCH_DROPTIMER_159_SEC,
  HDRSRCH_DROPTIMER_225_SEC,
  HDRSRCH_DROPTIMER_319_SEC,

  HDRSRCH_DROPTIMER_MAX_SIZE
    /* Number of elements in Pilot Drop Timer Table */
}
hdrsrch_drop_timer_enum_type;



/*--------------------------------------------------------------------------
  Neighbour list window size/offset source information
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_NSET_UPDATE_BROADCAST,
    /* NSET Update information from a Control Channel broadcast message */

  HDRSRCH_NSET_UPDATE_DIRECTED
    /* NSET Update information from AT directed message.
       Non-null fields override HDRSRCH_NSET_UPDATE_BROADCAST data */
#ifdef FEATURE_HDR_REMOVE_AVOIDED_NSET_CHANNELS
  ,
  HDRSRCH_NSET_AVOID_LIST_UPDATED
    /* NSET Update information due to avoidance timer expiration */
#endif /* FEATURE_HDR_REMOVE_AVOIDED_NSET_CHANNELS */
}
hdrsrch_nset_update_enum_type;



/*--------------------------------------------------------------------------
  HDRSRCHSLEEP sleep sub-states
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_NOT_IN_SLEEP_PREPROCESSING,
    /* AT is not in sleep  preprocessing*/

  HDRSRCH_IN_SLEEP_PREPROCESSING,
    /* Still in sleep processing */

  HDRSRCH_SLEEP_CTL_ARMED,
    /* Armed the sleep ctl */

  HDRSRCH_IN_NPA_CALL
    /* Inside a NPA call */
}
hdrsrch_sleep_sub_state_enum_type;


/*--------------------------------------------------------------------------
  Search Parameters
    From: 6.6.6.5.1.1 SearchParameters Attribute
--------------------------------------------------------------------------*/

typedef struct
{
  sys_pilot_pn_type               pilot_inc;
    /* All pilots must be multiples of this value.  Range: 1 .. 15 */

  hdrsrch_winsize_enum_type       aset_win_size;
    /* Active Set window search size */

  hdrsrch_winsize_enum_type       nset_win_size;
    /* Neighbour set window search size */

  hdrsrch_winsize_enum_type       rset_win_size;
    /* Candidate set window search size */
}
hdrsrch_search_params_struct_type;



/*--------------------------------------------------------------------------
  Acquisition success/failure indication
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_ACQUIRE_FAILED,
  HDRSRCH_ACQUIRED
}
hdrsrch_acquire_enum_type;


/*--------------------------------------------------------------------------
  HDR Traffic Tune Away Selection
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_TUNE_AWAY_IS2000,
    /* Permit RF tune aways to monitor IS2000 pages during HDR traffic */

  HDRSRCH_TUNE_AWAY_NONE
    /* No Tune aways allowed during HDR traffic connection */
}
hdrsrch_traffic_tune_away_enum_type;


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

typedef
void (*hdrsrch_acquire_cb_type)
(
  const sys_channel_type *        channel,
    /* Channel acquisition was attempted on */

  hdrsrch_acquire_enum_type       acq_result
    /* Acquisition success or failure status */
);

/*--------------------------------------------------------------------------
  Acquisition reasons
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_ACQ_NORMAL,
  HDRSRCH_ACQ_REDIRECTION
} hdrsrch_acq_reason_enum_type;

/*--------------------------------------------------------------------------
  Fast Acquisition reasons
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_FAST_ACQ_RESELECTION,
  HDRSRCH_FAST_ACQ_ACTIVE_HO
}
hdrsrch_fast_acq_reason_enum_type;


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

typedef
void (*hdrsrch_fast_acq_cb_type)
(
  hdrsrch_fast_acq_enum_type       fast_acq_result
    /* Fast Acquisition success or failure status */
);

typedef
void (*hdrsrch_tran_sys_time_cb_type)
(
  hdrsrch_tran_sys_time_enum_type       tran_sys_time_result
    /* Time transfer success or failure status */
);

/*--------------------------------------------------------------------------
  System Lost
--------------------------------------------------------------------------*/


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

typedef
void (*hdrsrch_system_lost_cb_type)
(
  hdrsrch_system_lost_enum_type   reason
    /* System lost explanation */
);

/*--------------------------------------------------------------------------
  HDR Usable
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_USABLE_TRUE,
    /* HDR signal strength is strong enough to be usable */

  HDRSRCH_USABLE_FALSE
    /* HDR signal strength is not strong enough to be usable */

}
hdrsrch_system_usable_enum_type;


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


typedef
void (*hdrsrch_system_usable_cb_type)
(
  hdrsrch_system_usable_enum_type   usability
    /* HDR System usability */
);

/*--------------------------------------------------------------------------
  Sync sub-states
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_SYNC_RESUME,
    /* RF resources are back regained */

  HDRSRCH_SYNC_SUSPEND
    /* RF resources are now gone */
    
}
hdrsrch_sync_substate_enum_type;

/*--------------------------------------------------------------------------
  callback to return sync substate value
--------------------------------------------------------------------------*/

/* Function pointer to point to cb */
typedef
void (*hdrsrch_sync_substate_cb_type)
(
  hdrsrch_sync_substate_enum_type srch_sync_substate
);

/*--------------------------------------------------------------------------
  callback to return cdma system timing
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_return_timing_cb_type)
(
  boolean         succeed,
    /* Whether reverse time transfer succeeded*/
  uint32          lte_stmr,
    /* lte stmr value */
  uint64          cdma_sys_time
    /* cdma system time */
);

/*--------------------------------------------------------------------------
  Deactivate command processing done callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_deactivate_done_cb_type) (void);


/*--------------------------------------------------------------------------
  Idle State Handoff Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_idle_ho_cb_type)
(
  hdrsrch_link_id_type            link_id,
    /* Link Id of pilot the HDR Searcher just handed off to */

  const sys_link_type *           link_ptr
    /* Pilot the HDR Searcher just handed off to */
);



/*--------------------------------------------------------------------------
  Channel Change Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_chan_change_rpt_cb_type)
(
  hdrsrch_link_id_type            link_id,
    /* Link ID of new ASET pilot on new channel. */

  const sys_link_type *           link_ptr
    /* New ASET pilot on new channel. */
);


/*--------------------------------------------------------------------------
  Wakeup Reacquisiton Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_wakeup_cb_type)
(
  hdrsrch_link_id_type            link_id,
    /* Link Id of pilot the ReAcquisition pilot, or
       HDRSRCH_REF_LINK_ID if no handoff on wakeup. */

  const sys_link_type *           link_ptr,
    /* Pilot the HDR Searcher woke up on */

  hdrsrch_wakeup_reason_enum_type reason,
    /* the reason for this wake-up  */

  boolean                         reacq_succeeded
    /* whether the reacq succeeded during this wakeup. */
);



/*--------------------------------------------------------------------------
  Access Mode Entered (Handoffs suspended) Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_suspend_ho_cb_type) (void);



/*--------------------------------------------------------------------------
  Access Mode: Request Handoff Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_request_ho_cb_type)
(
  const sys_link_type *           req_link_ptr
    /* Pilot which the HDR Searcher desires to handoff to. */
);



/*--------------------------------------------------------------------------
  Access Mode: Access Handoff Completed Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_access_ho_cb_type)
(
  hdrsrch_link_id_type            link_id,
    /* Link ID of pilot which the HDR Searcher performed a handoff to. */

  const sys_link_type *           link_ptr
    /* Pilot which the HDR Searcher performed a handoff to. */
);

#ifdef FEATURE_HDR_HYBRID_ACCESS
/*--------------------------------------------------------------------------
  Access Mode: ACMAC ready callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_acmac_ta_time_cb_type)
(
  boolean                         no_tune_away,
    /* Whether tune away or not */

  qword                           ta_time
    /* Tune away time in slot */
);

/*--------------------------------------------------------------------------
  Access Mode: ACMAC stop callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_acmac_stop_cb_type)
(
  void (*)(void)
);
#endif /* FEATURE_HDR_HYBRID_ACCESS */

typedef enum
{
  HDRSRCH_TCA_SUCCEEDED,
    /* TCA succeeded */
  HDRSRCH_TCA_FAILED
    /* TCA failed */
}
hdrsrch_tca_result_type;

/*--------------------------------------------------------------------------
  Traffic Channel Assignment Complete Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_tca_cb_type)
(
  hdrsrch_tca_result_type result
);


/*--------------------------------------------------------------------------
  Enable fimware HDR App Complete Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_enable_fw_hdr_app_cb_type)(boolean);

#ifdef FEATURE_HDR_REVC
typedef
void (*hdrsrch_aset_update_cb_type) (void);
#endif /* FEATURE_HDR_REVC */



/*--------------------------------------------------------------------------
  Pilot Report Callback
--------------------------------------------------------------------------*/

typedef
void (*hdrsrch_pilot_rpt_cb_type)(void);


typedef
void (*hdrsrch_opmode_indication_cb_type)(void);

typedef
void (*hdrsrch_voip_outage_notify_cb_type)
(
  uint16 time_to_outage_ms,
    /* time to VOIP outage in ms */
  
  uint16 outage_duration_ms
    /* duration of VOIP outage in ms */
);

/*--------------------------------------------------------------------------
  Idle & Traffic Suspend State
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_SUSPEND_NONE,
    /* There is no entry to the suspended state. This is called when 
       terminal enters normal idle monitor state with RF lock */

  HDRSRCH_SUSPEND_STARTING,
    /* RF resources are about to be lost - no new Tx packets, please. */

  HDRSRCH_SUSPEND_STARTED,
    /* RF resources are now gone */

  HDRSRCH_SUSPEND_STILL_SUSPENDED,
    /* Currently suspended (Traffic suspended to Idle suspended) */

  HDRSRCH_SUSPEND_ENDING,
    /* RF resources are being regained, re-enable Tx */

  HDRSRCH_SUSPEND_ENDED,
    /* RF resources are back regained */

  HDRSRCH_SUSPEND_TO_REACQ
    /* Transition from 3A to 3F state */
}
hdrsrch_suspend_enum_type;


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

typedef
void (*hdrsrch_suspend_cb_type)
(
  hdrsrch_suspend_enum_type       suspend_event
    /* Event in transition to/from suspend state */
);


/*--------------------------------------------------------------------------
  Channel Management Parameters
    From: 6.6.6.5.1.2 SetManagementSameChannelParameters Attribute
          6.6.6.5.1.3 SetManagementDifferentChannelParameters Attribute
--------------------------------------------------------------------------*/

/* Channel Management Parameters */
typedef struct
{
  hdrsrch_pilot_strength_type     pilot_add;
    /* Pilot detecting threshold (in -0.5 dB) */

  hdrsrch_pilot_strength_type     pilot_drop;
    /* Threshold to start drop timer (in -0.5 dB) */

  hdrsrch_pilot_strength_type     pilot_compare;
    /* Comparison threshold for Route Update message (in 0.5 dB) */

  hdrsrch_drop_timer_enum_type    pilot_drop_timer;
    /* Expiration time of the Drop timer (lookup table) */

  boolean                         dynamic_thresholds;
    /* Flag to indicate if following 3 parameters are valid */

  uint8                           soft_slope;
    /* */

  int8                            add_intercept;
    /* (in dB) */

  int8                            drop_intercept;
    /* (in dB) */

  uint8                           nset_max_age;
    /* Maximum age for NSET pilots.  Pilots this old are dropped first. */
}
hdrsrch_chan_mgmt_params_struct_type;



/*--------------------------------------------------------------------------
  Active Set Pilot Type
    From: 6.6.6.2 TrafficChannelAssignment
--------------------------------------------------------------------------*/

typedef struct
{
  sys_pilot_pn_type               pilot_pn;
    /* Pilot PN Offset.  Range: 0 .. 511 */

  boolean                         softer_handoff;
    /* Reverse Power Control (RPC) is in softer handoff with prev pilot */

  hdrmac_mac_index_type           mac_index;
    /* MAC Index is 6 bits for Rev 0, 7 bits for Rev A, 10 bits for rev B */

  hdrmac_drc_cover_type           drc_cover;
    /* DRC Cover */

  hdrmac_drc_cover_type           aux_drc_cover;
    /* Aux DRC Cover */

#ifdef FEATURE_HDR_REVB
  hdrmac_mac_index_type           rl_mac_index;
    /* RL MAC Index is 9 bits for indicating the index used to 
       transmit power control commands. Used if using RUP subtype 1. */

  hdrmac_mac_index_type           rab_mac_index;
    /* RL MAC Index is 7 bits for indicating the index used to 
       transmit RAB commands. Used if using RUP subtype 1. */
#endif /* FEATURE_HDR_REVB */

  hdrmac_rab_len_type             rab_length;
    /* Reverse Activity Bit Length */

  uint8                           rab_offset;
    /* Reverse Activity Bit Offset */
  
  int8                            ra_channel_gain;
    /* Converted dB signed value, i.e. 0, -6, -9, -12, or -15 
       0 indicates no RAChannelGain was specified for this pilot */

  int8                            delta_t2p;
    /* TxT2P adjust value in 1/4 dB */

  uint8                           dsc;
    /* The DSC associated with this cell. This field is only valid if 
       softer_handoff is FALSE */

#ifdef FEATURE_HDR_REVB
  uint8                           pilot_group_id;
    /* The pilot group ID identifies if a pilot with the same PN should be 
       treated as though it is the same pilot. */

  uint8                           scheduler_tag;
    /* The scheduler group this pilot belongs to. */
#endif /* FEATURE_HDR_REVB */
}
hdrsrch_aset_pilot_type;

/*--------------------------------------------------------------------------
  Subactive Set Definitions 
--------------------------------------------------------------------------*/

#define HDRSRCH_MAX_NUM_CARRIERS           3

#ifdef FEATURE_HDR_REVB

#define HDRSRCH_IDLE_SUBASET_IDX           0
  /* For revA back compatiblity, using HDRSRCH_REVA_SUBASET_IDX for revA
     system. */

#define HDRSRCH_REF_SUBASET_IDX            0xFE
  /* The subaset index for the reference subaset. The high layer should use
     this subaset index to retrieve the information of the reference 
     subaset. */


#define HDRSRCH_DEMOD_IDX_NO_ASSIGNED      255
  /* Use this flag to indicate the demod_idx not assigned */

/*--------------------------------------------------------------------------
  Sub ASET index type 
--------------------------------------------------------------------------*/

typedef uint8 hdrsrch_subaset_idx_type;
  /* Sub ASET idx uses to indicate the carrier */

/*--------------------------------------------------------------------------
  Demod index type 
--------------------------------------------------------------------------*/

typedef uint8 hdrsrch_demod_idx_type;
  /* Demod idx uses to indicate the carrier index */

/*--------------------------------------------------------------------------
  Carrier index type 
--------------------------------------------------------------------------*/

typedef uint8 hdrsrch_carrier_idx_type;
  /* carrier idx points to the CSR/Sample RAM index */

/*--------------------------------------------------------------------------
  Carrier index type 
--------------------------------------------------------------------------*/
typedef uint8 hdrsrch_tca_idx_type;
  /* TCA idx indicates the position/order of the subaset in its 
     original TCA */

/*--------------------------------------------------------------------------
  Subactive Set Type
    From: x.x.x.x  TBD
--------------------------------------------------------------------------*/

/* Strcuture describe subactive set. The strcuture only supports K=1 
 * subactive set */
typedef struct
{
  sys_channel_type                       channel;
    /* Channel this pilot is on. */

  sys_hdr_chan_rec_mode_e_type                 systype;
    /* For now remember the system type of this subaset */

  boolean                                not_reportable;
    /* Whether this subactive set should not be reported. */

  uint8                                  num_aset_pilots;
    /* Number of pilots in this subactive set */

  hdrsrch_aset_pilot_type                aset_list[HDRSRCH_ASET_MAX_SIZE];
    /* Pointer to an array of aset structures */

  hdrsrch_demod_idx_type                 demod_idx;
    /* The firmware demod carrier index */
} hdrsrch_subactive_set_type;


/*--------------------------------------------------------------------------
  Scheduler Group Related Definition
    From: x.x.x.x  TBD
--------------------------------------------------------------------------*/

#define HDRSRCH_MAX_NUM_SCHD_GIDS           ( ( 1<<6 ) - 1 )
  /* MAX number of scheduler group GIDs supported; The valid scheduler group
     id ranges from 1 to 0x3F. Please note that 0 is not a valid scheduler
     group ID. This is because that the RLP layer wants to see a non-zero 
     id to make sure firmware has touched the scheduler group id field in the
     DSM header. */

#define HDRSRCH_REV0A_SCHDTAG                0xFF
  /* The scheduler TAGs used in rev0A TCAs */

#define HDRSRCH_NOT_INCLUDED_SCHDTAG         0xFE
  /* The scheduler TAGs used when not included in a revB TCA */

#define HDRSRCH_NOT_USED_SCHDTAG             0xFD
  /* The scheduler tag used for the idle ASET sector */

#define HDRSRCH_MAX_SCHDTAG                  127
  /* The scheduler tag used for the idle ASET sector */


/*--------------------------------------------------------------------------
  Scheduler Group Change Report Callback 
--------------------------------------------------------------------------*/

typedef void (*hdrsrch_schdgrp_rpt_cb_type) ( void );
  /* The Callback is designed to send indication to RLP to notify a possilbe 
   * scheduler group change */


/*--------------------------------------------------------------------------
  Demod idx assignment type 
--------------------------------------------------------------------------*/
typedef struct
{
  hdrsrch_demod_idx_type demod_idx;
    /* Demod index assigements; We can expend the struct if more info is 
       needed. */
} hdrsrch_demod_idx_assignment_type;


/*--------------------------------------------------------------------------
  Forward link Carrier Info type
--------------------------------------------------------------------------*/
typedef struct
{
  sys_channel_type          channel;
    /* Channel the demod carrier is assigned to */

  hdrsrch_carrier_idx_type  sample_ram_idx;
    /* To which sample ram is assigned, same as CSR idx */

  hdrsrch_demod_idx_type    demod_idx;
    /* The demod index */

  hdrsrch_tca_idx_type      tca_idx;
    /* The subactive set index in the TCA message */

} hdrsrch_fl_carrier_info_type;
#endif /* FEATURE_HDR_REVB */


/*--------------------------------------------------------------------------
  Neighbour Set Pilot Type
    From: 6.6.6.5 NeighborList
--------------------------------------------------------------------------*/

typedef struct
{
  sys_link_type                   link;
    /* Mode, Band, Channel, and Pilot PN for this neighbour set pilot */

  hdrsrch_winsize_enum_type       window_size;
    /* Search window size for this NSET pilot (Table 6.6.6.5-1) */

  hdrsrch_winoffset_enum_type     window_offset;
    /* Search window offset for this NSET pilot (Table 6.6.6.5-2) */

#ifdef FEATURE_HDR_REVB
  hdrsrch_pilot_gid_type          pilot_gid;
    /* Pilot group id */
#endif /* FEATURE_HDR_REVB */
}
hdrsrch_nset_pilot_type;


/*--------------------------------------------------------------------------
  Route Update Request Pilot Parameters
    From: 8.8.6.2.8 RouteUpdateRequest
--------------------------------------------------------------------------*/

typedef struct
{
  sys_pilot_pn_type               pilot_pn;
    /* Pilot PN Offset.  Range: 0 .. 511 */
    
  hdrsrch_winsize_enum_type       window_size;
    /* Search window size for this NSET pilot (Table 6.6.6.5-1) */

  hdrsrch_winoffset_enum_type     window_offset;
    /* Search window offset for this NSET pilot (Table 6.6.6.5-2) */
}
hdrsrch_rup_req_sector_type;


/*--------------------------------------------------------------------------
  Structure used for Reporting Pilot Strength Measurements
    From: 6.6.6.1 RouteUpdate
--------------------------------------------------------------------------*/

/* Structure used for Reporting Pilot Strength Measurements */
typedef struct
{
  sys_link_type                 link;
    /* Identifies the pilot/channel whose strength info is given below. */

  hdrsrch_system_enum_type      system_type;
    /* system type */

  uint32                        mstr_x8;
    /* Current MSTR in chipx8 */

  hdrsrch_pilot_phase_type      pn_phase;
    /* Pilot Phase w.r.t. the reference pilot - in chips
       (first pilot in list is the reference pilot) */

  hdrsrch_pilot_strength_type   strength;
    /* Pilot Strength (in -0.5 dB) - no limits applied */

  boolean                       keep;
    /* true if pilot drop timer has not expired */

#ifdef FEATURE_HDR_REVB
  hdrsrch_pilot_gid_type        gid;
    /* Pilot group id */
#endif /* FEATURE_HDR_REVB */
}
hdrsrch_pilot_rpt_type;

/* Structure used for Reporting Pilot Strength Measurements */
typedef struct
{
  uint8                                pilot_add;
    /* pilot add value to use for 1x pilots */
    
  uint8                                pilot_inc;
    /* pilot increment value to use for 1x search */
}
hdrsrch_chan_mgmt_1x_params_type;

/* Structure used for Reporting Pilot Strength Measurements */
typedef struct
{
  boolean                              channel_included;
    /* whether channel info has been included in msg or not */
    
  sys_channel_type                     channel;
    /* channel information */
    
  hdrsrch_system_enum_type             system_type;
    /* system type */
    
  uint8                                sector_count;
    /* sector count in route update request message */
    
  boolean                              window_size_included;
    /* whether window size for sectors has been included or not */
     
  boolean                              window_offset_included;
    /* whether window offset for sectors has been included or not */
      
  hdrsrch_rup_req_sector_type          sector_info[ HDRSRCH_RUP_SECTOR_LIST_MAX_SIZE ];
    /* list or sectors to be searched */

  hdrsrch_pilot_rpt_cb_type            pilot_rpt_cb;
    /* call back function to call when request is completed */

  boolean                              chan_mgmt_1x_included;
    /* whether  1x search parameters are included */
        
  hdrsrch_chan_mgmt_1x_params_type     chan_mgmt_1x;
    /* 1x search parameters such as pilot add and pilot increment */
        
}hdrsrch_rup_req_params_type;

/* HDR abstract for hdr fw state. Should be consistant with fw states */
typedef enum {
  HDRSRCH_FW_STATE_INACTIVE = 0, 
  HDRSRCH_FW_STATE_STANDBY,
  HDRSRCH_FW_STATE_ACTIVE,
  HDRSRCH_FW_STATE_MEAS,
  HDRSRCH_FW_STATE_MEAS_CONNECTED,
  HDRSRCH_FW_STATE_SLEEP,
  HDRSRCH_FW_STATE_TIMING
} hdrsrch_fw_state_type;

/* Structure to report the status of firmware HDR App */
typedef struct
{
  hdrsrch_enable_fw_hdr_app_cb_type    enable_fw_hdr_app_cb;
    /* Call back function when HDR App is enabled */
#ifdef FEATURE_RF_SVDO_API 
  hdrsrch_fw_state_type                fw_state;
#else
  hdrfw_state_t                        fw_state;
#endif /* FEATURE_RF_SVDO_API */   
    /* fw next state */
}hdrsrch_enable_fw_hdr_app_params_type;

/* The enum defines the div in non TC states */
typedef enum
{
  HDRSRCH_DIV_IN_ACCESS   = 0,
  HDRSRCH_DIV_IN_REACQ    = 1
}
hdrsrch_non_tc_div_state_enum_t;

#ifdef FEATURE_HDR_DYNAMIC_IDLE_DIV

#define HDRSRCH_MAX_SLOTS_PSINR_PER_IDLE_WAKEUP        255

/* Structure used for storing previous wakeup information */
typedef struct
{
  int32                psinr_per_slot[HDRSRCH_MAX_SLOTS_PSINR_PER_IDLE_WAKEUP];
    /* Psinr per slot total for latest 255 slots */

  uint8                num_slots;
    /* Num slots psinr has been recorded for */

  uint8                slot_index;
    /* Start index for circular buffer for recording psinr for
    last 255 slots */

  boolean              syncc_cc_missed;
    /* If sync cc was missed in prev wakeup */

  uint8                prev_sleep_time;
    /* How much did we sleep? */

  int16                prev_psinr_avg;
     /* psinr avg for the previous wakeup */

  boolean              reacq_failed;
     /* If reacq failed for this wakeup */

  boolean              div_enabled;
    /* If diversity was enabled in prev wakeup
       - purpose for intra scc sleep */

  boolean              div_timeout;
    /* If we timed out while enabling div */

}hdrsrch_wakeup_info_type;
#endif /* FEATURE_HDR_DYNAMIC_IDLE_DIV */

#if defined FEATURE_HDR_DYNAMIC_IDLE_DIV || defined FEATURE_HDR_ACCESS_DIV
/* Structure used for dynamic idle state diversity parameters */
typedef struct
{
  boolean                              access_div_enabled;
    /* Access state diversity enabled */
    
  boolean                              idle_div_enabled;
    /* Idle state diversity enabled */
    
#if defined FEATURE_HDR_DYNAMIC_IDLE_DIV    
  int16                                psinr_thresh;
    /* Idle state PSINR threshold to turn on diversity */

  uint8                                subpkt_thresh;
    /* M subpacket missed indication to turn on diversity
       in M+1 slot for idle state*/

  uint8                                sci_thresh;
    /* Idle state prev wake up sleep time threshold
       to turn on diversity */

  hdrsrch_wakeup_info_type             wakeup_info;
    /* All the prev wakeup info */

#endif /* FEATURE_HDR_DYNAMIC_IDLE_DIV */
}hdrsrch_idle_state_div_type;
#endif /* FEATURE_HDR_DYNAMIC_IDLE_DIV ||FEATURE_HDR_ACCESS_DIV */

#ifdef FEATURE_HDR_DYNAMIC_ACQ_DIV
/* Structure used for dynamic acquisition diversity parameters */
typedef struct
{
  uint8                                acq_div_nv_enable;
    /* NV setting of acquistion diversity enabled */
    
  int16                                acq_div_thresh0;
    /* Acq diversity threshold0 -- for primary chain */

  int16                                acq_div_thresh1;
    /* Acq diversity threshold0 -- for diversity chain */
  
  boolean                              acq_div_runtime_ctrl;
    /* Enable or disable acq diversity at run time */

  boolean                              general_div_enabled;
    /* Whether general diversity is enbaled or not */
}hdrsrch_acq_div_type;
#endif /* FEATURE_HDR_DYNAMIC_ACQ_DIV */

/*--------------------------------------------------------------------------
  Enumeration of Channel Measurement Methods
--------------------------------------------------------------------------*/

typedef enum
{
  HDRSRCH_MEAS_TYPE_RXPWR,            /* Rx Power measurement */
  HDRSRCH_MEAS_TYPE_PILOT,            /* Pilot strength measurement */
  HDRSRCH_MEAS_TYPE_MAX
} hdrsrch_cmeas_method_enum_type;

/* Structure for storing Channel & it's corresponding channel measurement */
typedef struct
{
#ifndef FEATURE_HDR_REVB
  sys_channel_record_type  chan_record;        /* Channel to measure */
#else
  sys_hdr_channel_record_s_type   chan_record;        /* Channel to measure */
#endif /* FEATURE_HDR_REVB */
  hdrsrch_cmeas_method_enum_type cmeas_method; /* Type of measurement */
  uint16            meas;               /* Measurement value in units of -1dB
                                        ** for Rx Power or -0.5dB for Pilot
                                        ** Strength */
} hdrsrch_cmeas_value_type;


/*--------------------------------------------------------------------------
  Dmod PN Roll Callback function type
--------------------------------------------------------------------------*/

typedef void (*hdrsrch_roll_cb_type) ( void );
  /* PN Roll ISR callback function */


/*--------------------------------------------------------------------------
  Structure for storing mapping between ASP index and PN offset
--------------------------------------------------------------------------*/

typedef struct
{
  uint16            pn_offset;          /* PN offset                      */
  uint8             asp_idx;            /* ASP index                      */
} hdrsrch_asp_to_pn_info_type;

/*--------------------------------------------------------------------------
  Structure for storing pilot PN and corresponding pilot strength (ecio)
--------------------------------------------------------------------------*/

typedef struct
{
  uint16            pn_offset;          /* PN offset                      */
  int8              ecio;               /* Ec/Io value                    */
} hdrsrch_pn_ecio_info_type;




/*--------------------------------------------------------------------------
  Enum to configure searcher operational mode algorithms
  --------------------------------------------------------------------------*/
  
typedef enum
{
  HDRSRCH_OPMODE_DISABLED,
    /* both searcher AT operational mode algorithms are disabled */
    
  HDRSRCH_OPMODE_POOR_COVERAGE_DETECTION_ENABLED,
    /* enable poor coverage detection algorithm to switch to dual mode */
      
  HDRSRCH_OPMODE_GOOD_COVERAGE_DETECTION_ENABLED
    /* enable good coverage detection algorithm to switch to hdr only mode */
} 
hdrsrch_opmode_config_enum_type;

/*--------------------------------------------------------------------------
  Demod Index definitions
  --------------------------------------------------------------------------*/
#define HDRSRCH_DEMOD_IDX_0             0
#define HDRSRCH_DEMOD_IDX_1             1
#define HDRSRCH_DEMOD_IDX_2             2

#define HDRSRCH_IDLE_DEMOD_IDX          HDRSRCH_DEMOD_IDX_0
  /* When in idle, the demod index is fixed to demod index 0 */


/* Structure used for Pilot Measurements request */
typedef struct
{
  boolean                              channel_included;
    /* whether channel info has been included in msg or not */
    
  sys_channel_type                     channel;
    /* channel information */

  uint8                                sector_count;
    /* sector count in pilot measurement request */
    
  boolean                              window_size_included;
    /* whether window size for sectors has been included or not */
     
  boolean                              window_offset_included;
    /* whether window offset for sectors has been included or not */
      
  hdrsrch_rup_req_sector_type          
                   sector_info[ HDRSRCH_PILOT_MEAS_SECTOR_LIST_MAX_SIZE ]; 
    /* list o sectors to be searched */

  hdrsrch_pilot_rpt_cb_type            pilot_meas_rpt_cb;
    /* call back function to call when request is completed */

}
hdrsrch_pilot_meas_req_params_type;

/* Structure used for Reporting Pilot Strength Measurements */
typedef struct
{

  sys_pilot_pn_type             pilot_pn;
    /* Pilot PN Offset.  Range: 0 .. 511 */

  hdrsrch_pilot_phase_type      pn_phase;
    /* Pilot Phase w.r.t. the reference pilot - in chips */

  boolean                       channel_included;
    /* whether channel info has been included in msg or not */
    
  sys_channel_type              channel;
    /* channel information */

  hdrsrch_pilot_strength_type   strength;
    /* Pilot Strength (in -0.5 dB) - no limits applied */

}
hdrsrch_pilot_meas_rpt_type;

typedef struct
{
  uint32        hdr_rtc;
    /* HDR RTC value */

  uint32        lte_stmr;
    /* LTE STMR value */

  uint64        cdma_sys_time;
    /* CDMA system time */

  timetick_type dump_sclk;
    /* sclk time when dumping the snapshot */

}
hdrsrch_cdma_and_lte_time_struct;

/* Struct for parameters of FAST_ACQ command */
typedef struct
{

  hdrsrch_fast_acq_reason_enum_type reason;
    /* Fast acq reason */

  sys_channel_type                 channel;
    /* Channel to attempt to acquire */

  sys_pilot_pn_type                pilot_pn;
    /* Pilot PN Offset.  Range: 0 .. 511 */

  hdrsrch_fast_acq_cb_type         fast_acq_cb;
    /* Fast acquisition report callback */  

  hdrsrch_system_lost_cb_type      system_lost_cb;
    /* Called when the HDR system is lost */

  hdrsrch_system_usable_cb_type    usability_cb;
    /* Called when HDR usability changes */

  uint8                            srch_window_size;
    /* Search window size. If value is 0xFF, use deault */
}
hdrsrch_fast_acq_params_type;


#define hdrsrch_tran_sys_time_params_type    hdrsrch_tran_sys_time_req_msg_t

#define hdrsrch_lte_pilot_meas_params_type   hdrsrch_lte_pilot_meas_req_msg_t

typedef struct
{
  msgr_hdr_struct_type              msg_hdr;        
    /* Message header */

  sys_channel_type                  channel;
    /* Channel number */

  hdrsrch_acquire_cb_type           acq_cb;         
    /* Acquisition Report */

  hdrsrch_system_lost_cb_type       system_lost_cb; 
    /* System Lost Report */

  hdrsrch_system_usable_cb_type     usability_cb;   
    /* HDR usable report */

  sys_hdr_acq_mode_e_type           mode;           
    /* mode of acquisition */

  uint8                             num_of_pn;      
    /* number of pn in list */

  sys_pilot_pn_type                 pn_list[ HDRSRCH_LTE_SECTOR_LIST_MAX_SIZE ];   
    /* list of pn */

  hdrsrch_acq_reason_enum_type      reason;
    /* Acq reason */

  uint16                            overall_time_allowed_ms;
    /* Maximum time allowed by LTE to do brute-force acq and sync.*/

  hdrsrch_sync_substate_cb_type     sync_suspend_cb;
    /* Tuneaway cb in sync state */
}
hdrsrch_acquire_params_type;

#ifdef FEATURE_HDR_TO_LTE

/* The DO->LTE reselection declarations are here instead of hdrsrchcmd.h so
   hdrsrch.h does not need to include hdrsrchcmd.h */

#define HDRSRCH_ORNL_CYCLE_NO_UPDATE    0xF0
  /* Other RAT Neighbor List Overhead Message Cycle is disabled because Other
     RAT Neighbor List does not need to be updated */

#define HDRSRCH_ORNL_CYCLE_DISABLED 0xFF
  /* Other RAT Neighbor List Overhead Message Cycle is disabled because there
     is no LTE neighbor in the current sector */

#define HDRSRCH_LTE_FREQ_ARR_SIZE   7
  /* Maximum size of LTE frequencies in hdrsrch_lte_nset_update_params_type */

#ifdef FEATURE_LTE_DEPRIORITIZATION
#define HDRSRCH_LTE_FREQ_LOWEST_PRIORITY 0xFF
#endif /* FEATURE_LTE_DEPRIORITIZATION */

/* LTE frequency and frequency related information, used in DO->LTE reselection
   EARFCN:  Evolved Absolute Radio Frequency Channel Number (LTE frequency number)
   EUTRAN:  Evolved Universal Terrestrial Radio Access Network */
typedef struct
{
  lte_earfcn_t                      earfcn;
    /* Evolved Absolute Radio Frequency Channel Number or LTE freq number */

  uint8                             earfcn_priority;
    /* Priority of the EARFCN of the neighboring EUTRA network */

  uint8                             thresh_x;
    /* Minimum required signal quality threshold used for selecting an EARFCN */

  uint8                             rx_lev_min_eutra;
    /* Minimum received RSRP level from the EUTRA cell */

  uint8                             pe_max;
    /* Maximum TX power */

  boolean                           rx_lev_min_eutra_offset_incl;
    /* Offset to Minimum reference power level to select EUTRA included */

  uint8                             rx_lev_min_eutra_offset;
    /* Offset to Minimum reference power level to select EUTRA */

  uint8                             bandwidth;
    /* Measuring bandwidth */

  uint8                             thresh_xq;
    /*  Minimum  required  RSRQ  signal  quality  threshold  used  for
        selecting an EARFCN */

  uint8                             qual_min_eutra;
    /* Minimum received RSRQ level from the EUTRA cell */

  boolean                           qual_min_eutra_offset_incl;
    /* Offset to Minimum reference power level to select EUTRA included? */

  uint8                             qual_min_eutra_offset;
    /* Offset to Minimum reference power level to select EUTRA */
}
hdrsrch_lte_freq_params_type;

/* LTE reselection call back function, to notify upper layer of
   LTE reselection */
typedef
void (*hdrsrch_lte_reselect_cb_type)
(
  lte_earfcn_t                      earfcn_id,
    /* Frequency of the LTE cell to be selected */
  
  uint16                            cell_id
    /* Cell id of the LTE cell to be selected */
);

typedef enum 
{
        MEAS_SUCCESS,
	MEAS_FAILURE
}hdrsrchltemeas_rpt_result;

typedef
void (*hdrsrch_lte_redirect_cb_type)
(
  hdrsrchltemeas_rpt_struct_type *redirect_rpt_ptr,

  hdrsrchltemeas_rpt_result result
  
);

/* LTE neighbor list struct, used in DO->LTE reselection
   EARFCN:  Evolved Absolute Radio Frequency Channel Number (LTE frequency number)
   EUTRAN:  Evolved Universal Terrestrial Radio Access Network */
typedef struct
{
  msgr_hdr_struct_type              msg_hdr;      
    /* Message header */

  boolean                           priority_incl;
    /* Set if priority and priority related fields are included in this record */

  uint8                             serving_priority;
    /* Priority of serving (DO) frequency */

  uint8                             thresh_serving;
    /* Threshold of serving (DO) frequency */

  boolean                           per_earfcn_params_incl;
    /* TRUE if parameters for each EARFCN (LTE) freq are included
       FALSE if parameters are common for all EARFCNs */

  uint8                             rx_level_min_eutra_common;
    /* Common minimum rx LTE level, range 0 - 96 */

  uint8                             pe_max_common;
    /* Max Tx power */

  boolean                           rx_lev_min_eutra_offset_common_incl;
    /* Common offset to Minimum reference power level to select LTE freq included */

  uint8                             rx_lev_min_eutra_offset_common;
    /* Common offset to minimum reference power level to select LTE freq */

  boolean                           max_reselect_timer_incl;
    /* Maximum value of Reselection Timer included */

  uint8                             max_reselect_timer;
    /* Maximum value of Reselection Timer */

  boolean                           backoff_timer_incl;
    /* Back-off Timer max and min values included */

  uint8                             min_backoff;
    /* Minimum value of measurement Back-off Timer */

  uint8                             max_backoff;
    /* Maximum value of measurement Back-off Timer */

  boolean                           rsrq_parameters_incl;
    /* Should RSRQ  (Reference Signal  Received Quality)  be used  to
       measure LTE frequencies? */

  uint8                             qual_min_eutra_common;
    /* Minimum received RSRQ  level from the EUTRA  cell. Value ranges
       from 0-31 where (-3 -  qual_min_eutra_common) in dB is equal to
       the minimum reference signal received quality (RSRQ) level of a
       EUTRA cell
     */

  boolean                           qual_min_eutra_offset_common_incl;
    /* Offset to minimum reference quality level to select EUTRA Included? */

  uint8                             qual_min_eutra_offset_common;
    /* Offset to minimum reference  quality level to select EUTRA. The
       range of the 22 common offset values allowed is 1 through 8
     */

  uint8                             num_eutra_freqs;
    /* Number of EUTRA frequencies in this record */

  hdrsrch_lte_freq_params_type      earfcn_params_arr [ HDRSRCH_LTE_FREQ_ARR_SIZE ];
    /* LTE frequency parameters */

  hdrsrch_lte_reselect_cb_type      reselect_cb;
    /* Call back to notify upper layer of LTE rselection */
  boolean                                      redir_meas;
    /*  if this measurement is for D2L redirection */	
  hdrsrch_lte_redirect_cb_type                 redirect_cb;
    /* Call back to notify upper layer of LTE redirection */
}
hdrsrch_lte_nset_update_params_type;

#endif /* FEATURE_HDR_TO_LTE */

/*--------------------------------------------------------------------------
    HDR SRCH API to provide RX and TX power info.
    Following data structures are used 
---------------------------------------------------------------------------*/


/* The invalid signal info value */
#define HDRSRCH_SIGNAL_INFO_INVALID_VALUE   0x80000000

/* The invalid pa_gain_state value */
#define HDRSRCH_PA_STATE_INFO_INVALID_VALUE 0xFF

#ifdef FEATURE_HDR_REVC
typedef struct
{
  /* serving sector on which the LoadInfoMsg was received */
  sys_link_type serving_sector;
  uint8 loadadj_serving;

  uint8 loadadj_cnt;
  /* pn of neighbors. chan same as serving sector */
  sys_pilot_pn_type pn[HDRSRCH_MAX_SUBASET_SIZE];
  uint8 loadadj[HDRSRCH_MAX_SUBASET_SIZE];

  /* disable NLB on this carrier (set when LoadInfo timer expire) */
  boolean disable_nlb;
} hdrsrch_loadadj_subaset_type;

typedef struct
{
  uint8 subaset_cnt;
  hdrsrch_loadadj_subaset_type subaset[HDRSRCH_MAX_NUM_SUBASETS];
} hdrsrch_loadadj_type;
#endif /* FEATURE_HDR_REVC */

typedef struct
{
  uint8                           num_nset_pilots;
    /* Number of pilots in the neighbour set */

  hdrsrch_nset_pilot_type * nset_list;
    /* The neighbour set pilots */

  unsigned int                    struct_size;
    /* Size of the neighbour set pilot structure.  Allows an array of
       items larger than sizeof(hdrsrch_nset_pilot_type) to be used. */

  hdrsrch_nset_update_enum_type   update_type;
    /* NSET information from a BROADCAST or DIRECTED message? */

  uint8                           num_channels;
    /* Number of hash channels in the channel list */

  sys_channel_type          *channel_list_ptr;
    /* List of hash channels from the BROADCAST message*/
 
  uint8                           num_avoided_channels;
    /* Number of avoided channels */

  sys_channel_type          *avoided_channel_list_ptr;
    /* List of avoided channels */

  uint8                           num_sectors;
    /* Number of sectors in the overehad cache */
 
  sys_link_type                   *sector_list_ptr ;
    /* List of sectors currently in the overhead cache */

#ifdef FEATURE_HDR_REVB
  hdrsrch_pilot_gid_type        serving_pilot_gid;
    /* The pilot group id of the sector from which the neighbor info
       is received. */

  sys_active_prot_e_type          hdr_subtype;
    /* HDR Protocol subtype */

#endif /* FEATURE_HDR_REVB */  

} hdrsrch_nset_update_type;

typedef struct
{
  sys_link_type *               link_ptr;
    /* New HDR Channel, and an initial pilot on that channel. */

  hdrsrch_chan_change_rpt_cb_type     chan_change_rpt_cb;
    /* Callback function for idle channel change reports */
} hdrsrch_idle_channel_change_type;

#endif /* HDRSRCH_TYPES_H */

