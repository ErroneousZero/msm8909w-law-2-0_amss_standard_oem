# --------------------------------------------------------------------------- #
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/hdr/bc/build/hdr_bc.scons#1 $
# --------------------------------------------------------------------------- #
# Copyright (c) 2012 - 2015 Qualcomm Technologies Incorporated.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------- #
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 03/05/15   tnp     Remove RCINIT tcb_name
# 07/31/14   vko     Disable compilation of BCMCS files.
# 01/24/13   ukl     Fixed inter dependency issue with custglobal.h.
# 01/17/13   ukl     Added USES_BCMCS condition check.
# 09/11/12   cnx     Removed modem folder.
# 10/10/11   arm     Fixed RCINIT bugs found during integration.
# 10/10/11   arm     Added support for RCINIT.
# 12/16/10   kss     Updated restricted apis.
# 12/09/10   rmg     Added API paths.
# 10/26/10   cnx     Added violated path.
# 10/12/10   cnx     Updated 'USES' flag for lib.
# 10/12/10   cnx     Updated 'USES' flag.
# 09/30/10   cnx     Added Top-level 'USES' flag and DEBUG support.
# 09/22/10   cnx     Created this file.
# --------------------------------------------------------------------------- #

# --------------------------------------------------------------------------- #
# Import and clone the SCons environment				      
# --------------------------------------------------------------------------- #
Import('env')
env = env.Clone()

if env['MSM_ID'] in ['8909']:
    Return()
	
# --------------------------------------------------------------------------- #
# Turn off/on debug if requested 			      
# --------------------------------------------------------------------------- # 
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")

if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")

# --------------------------------------------------------------------------- #
# Setup source path                                                         
# --------------------------------------------------------------------------- #
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

# --------------------------------------------------------------------------- #
# Set MSG_BT_SSID_DFLT for legacy MSG macros				     
# --------------------------------------------------------------------------- #
# HDR uses MSG 2.0 macros and does not need this

# --------------------------------------------------------------------------- #
# Necessary APIs						           
# --------------------------------------------------------------------------- #
# CoreBSP public APIs
CORE_APIS = [
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'KERNEL',
    'MPROC'
    ]
env.RequirePublicApi(CORE_APIS, area="CORE")
env.RequirePublicApi(['AUDIO'], area='MULTIMEDIA')

# MODEM public APIs
MODEM_PUBLIC_APIS = [
    'DATA', 
    'DATACOMMON', 
    'HDR', 
    'MCS', 
    'MMODE', 
    'ONEX', 
    'RFA', 
    'UIM', 
    'UTILS',
    'WMS'
    ]
env.RequirePublicApi(MODEM_PUBLIC_APIS)

# MODEM restricted APIs
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA', 
    'MODEM_DATACOMMON', 
    'DATACOMMON', 
    'FW',
    'GERAN', 
    'HDR',
    'LTE',
    'MCS', 
    'MDSP',
    'MMODE', 
    'NAS', 
    'ONEX', 
    'RFA', 
    'UIM',
    'UTILS',
    'WMS'
    ]
env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

# HDR protected APIs
HDR_PROTECTED_APIS = [
    'BC',
    'COMMON',
    'CP',
    'DRIVERS',
    'MAC',
    'SRCH',
    'HDRAPI'
    ]
env.RequireProtectedApi(HDR_PROTECTED_APIS)

# Violations
env.PublishPrivateApi('VIOLATIONS', ['${INC_ROOT}/core/systemdrivers/clk/inc'])

# --------------------------------------------------------------------------- #
# External APIs not built with SCons   				 
# --------------------------------------------------------------------------- #
# not required

# --------------------------------------------------------------------------- #
# Generate the library and add to an image				      
# --------------------------------------------------------------------------- #
# Source files
BC_C_SOURCES = [
    '${BUILDPATH}/hdrbctask.c',
    ]

LIBBC_C_SOURCES = [
    '${BUILDPATH}/hdrbccp.c',
    '${BUILDPATH}/hdrbccpc.c', 
    '${BUILDPATH}/hdrbccpfs.c',
    '${BUILDPATH}/hdrbccpreg.c',
    '${BUILDPATH}/hdrbccps.c',
    '${BUILDPATH}/hdrbcecb.c',
    '${BUILDPATH}/hdrbcframe.c',
    '${BUILDPATH}/hdrbclog.c',
    '${BUILDPATH}/hdrbcmac.c',
    '${BUILDPATH}/hdrbcovhd.c',
    '${BUILDPATH}/hdrbcrsd.c',
    '${BUILDPATH}/hdrbcsec.c',
    '${BUILDPATH}/hdrbcslot.c',
    '${BUILDPATH}/hdrbctest.c',
    ]

# Verify that USES is set, otherwise bail out now				      
if 'USES_WPLT' in env or 'USES_HDR' not in env:
    Return()

# Ship our code as binary library and add it to the MODEM image
env.AddBinaryLibrary(['MODEM_MODEM'], '${BUILDPATH}/lib_bc', LIBBC_C_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

# Verify that USES is set, otherwise bail out now				      
if 'USES_CDMA' not in env:
    Return()

# Add library for code shipped as source
env.AddLibrary(['MODEM_MODEM'], '${BUILDPATH}/bc', BC_C_SOURCES) 

# Verify that USES is set, otherwise bail out now				      
# BCMCS code can be turned-off using FEATURE_BCMCS and FEATURE_HDR_BCMCS flag, 
# but RCINIT task cannot be handled through a featurization
# Adding a dummy check, which will turn-off RCINIT task autogen code for BCDB task.
# Feature can be turned off at top level.# Build image for which this task belongs
if 'USES_BCMCS' not in env:
    Return()

# Build image for which this task belongs
RCINIT_HDRBC = ['MODEM_MODEM']

# RC Init Function Dictionary
RCINIT_INIT_HDRBC  = {
 'sequence_group'             : env.subst('$MODEM_PROTOCOL'),            
 'init_name'                  : 'hdrbc_init',                
 'init_function'              : 'hdrbctask_init',          
 #'dependencies'               : ['one,two,three'],           
}

# RC Init Task Dictionary
RCINIT_TASK_HDRBC = {
 'thread_name'                : 'hdrbc', 
 'sequence_group'             : env.subst('$MODEM_PROTOCOL'),
 'stack_size_bytes'           : env.subst('$HDRBC_STKSZ'),
 'priority_amss_order'        : 'HDRBC_PRI_ORDER', 
 'stack_name'                 : 'hdrbc_stack',
 'thread_entry'               : 'hdrbc_task',
 'cpu_affinity'	              : env.subst('$MODEM_CPU_AFFINITY')
}

# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
            env.AddRCInitFunc(RCINIT_HDRBC, RCINIT_INIT_HDRBC)
            env.AddRCInitTask(RCINIT_HDRBC, RCINIT_TASK_HDRBC)
