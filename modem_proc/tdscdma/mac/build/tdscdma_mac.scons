# -------------------------------------------------------------------------------- #
#                       T D S C D M A _ M A C. S C O N S
#
# DESCRIPTION
#       Scons file for the MAC subsytem. Defines the existence of MAC
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#       None.
#
#
# Copyright (c) 2010 Qualcomm Technologies Incorporated.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# ==================================================================================#
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //source/qcom/qct/modem/wcdma/mac/main/latest/build/wcdma_mac.scons#13 $
# $DateTime: 2011/01/06 16:41:53 $
#
#  when        who     what, where, why
# ---------    ---     ------------------------------------------------------------
#                      Initial Cut
#
#===================================================================================#


#-------------------------------------------------------------------------------
# Import and clone the SCons environment
#-------------------------------------------------------------------------------
Import('env')
env = env.Clone()

#-----------------------------------------------------------------------------------
# USES_FLAG :: Do not compile TDSCDMA_MAC subsystem if
#              USES_TDSCDMA are not defined.Need to add for PLT also
#------------------------------------------------------------------------------------
if 'USES_TDSCDMA' not in env :
   Return()

#-------------------------------------------------------------------------------
# VIOLATIONS
#-------------------------------------------------------------------------------
env.PublishPrivateApi('VIOLATIONS',["${INC_ROOT}/core/systemdrivers/clk/inc",
                                    "${INC_ROOT}/modem/tdscdma/l1/src",#l1 src header files accessed
                                    "${INC_ROOT}/modem/fw/api/tdscdma",
                                   ])

# ------------------------------------------------------------------------------
# Include Paths
#-------------------------------------------------------------------------------

#-----------------------------------------
# Necessary Public API's
#-----------------------------------------
CORE_APIS = [
    'BUSES',
    'DEBUGTOOLS',
    'DAL',
    'POWER',
    'SYSTEMDRIVERS',
    'SECUREMSM',
    'SERVICES',
    'MPROC',
    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

MODEM_PUBLIC_APIS = [
    'TDSCDMA',
    'MCS',
    'NAS',
    'UTILS',
    'ONEX',
    'GPS',
    'RFA',
    'GERAN',
    'UIM',
    'MMODE',
    'WCDMA',
    ]

MULTIMEDIA_APIS = [
    'AUDIO',
    ]

MODEM_RESTRICTED_APIS =[
    'MCS',
    'NAS',
    'UIM',
    'UTILS',
    'GERAN',
    'GPS',
    'RFA',
    'MMODE',
    'TDSCDMA',
    'FW',
    'LTE',
    'WCDMA',
    ]

MULTIMEDIA_PUBLIC_APIS = [
    'AUDIO',
    'MVS',
]

#-------------------------------------------------------------------------------
# We need the Multimedia API's
#-------------------------------------------------------------------------------
env.RequirePublicApi(MULTIMEDIA_PUBLIC_APIS, area="MULTIMEDIA")

#----------------------------------------------------------------------------#
# Required external APIs not built with SCons (if any)
# e.g. ['BREW',]
#----------------------------------------------------------------------------#
REQUIRED_NON_SCONS_APIS = [
    'BREW',
    'BASE_PATHS', #mdsp/cdma/inc
    ]
#-------------------------------------------------------------------------------
# We need the Core BSP API's
#-------------------------------------------------------------------------------
env.RequirePublicApi(CORE_APIS, area="CORE")

#-------------------------------------------------------------------------------
# We need MODEM PUBLIC API's
#-------------------------------------------------------------------------------
env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# We need different restricted API's within MODEM
#-------------------------------------------------------------------------------
env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# External API's not built with SCons
#-------------------------------------------------------------------------------
env.RequireExternalApi(REQUIRED_NON_SCONS_APIS)

#-------------------------------------------------------------------------------
# TDSCDMA internal API's such as tdsstmr.h
#-------------------------------------------------------------------------------
env.RequireProtectedApi('TDSCDMA_L1_PROTECTED_INC')

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Images that this VU is added .
#-------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM', 'MOB_TDSCDMA']

#-----------------------------------------
# Generate the library and add to an image
#-----------------------------------------
TDSCDMA_MAC_C_PRIVATE_SOURCES =[
        '${BUILDPATH}/tdsmacultfcs.c',
        '${BUILDPATH}/tdsmaculhs.c',
        '${BUILDPATH}/tdsmacdlhs.c',
]

TDSCDMA_MAC_C_SOURCES = [
        '${BUILDPATH}/tdsmacbch.c',
        '${BUILDPATH}/tdsmacdl.c',
        '${BUILDPATH}/tdsmacdldch.c',
        '${BUILDPATH}/tdsmacdllog.c',
        '${BUILDPATH}/tdsmacfach.c',
        '${BUILDPATH}/tdsmaclb.c',
        '${BUILDPATH}/tdsmacpch.c',
        '${BUILDPATH}/tdsmacrach.c',
        '${BUILDPATH}/tdsmactraffic.c',
        '${BUILDPATH}/tdsmacul.c',
        '${BUILDPATH}/tdsmaculdata.c',
        '${BUILDPATH}/tdsmaculdch.c',
        '${BUILDPATH}/tdsmaculdl.c',
        '${BUILDPATH}/tdsmacullog.c',
        '${BUILDPATH}/tdsmaculhslog.c',
        '${BUILDPATH}/tdsmachstask.c',
]

#-------------------------------------------------------------------------------
# Compile the shippable source files
#-------------------------------------------------------------------------------
# For HCH
if env.has_key('USES_CUST_1'):
  env.AddLibrary(IMAGES, '${BUILDPATH}/tdscdma/mac', TDSCDMA_MAC_C_SOURCES)
else:
    #change 8708-2165
    env.AddBinaryLibrary(IMAGES, '${BUILDPATH}/tdscdma/mac', TDSCDMA_MAC_C_SOURCES,
                  pack_exception=['USES_COMPILE_TDSCDMA_AND_ALL_L1_PROTECTED_LIBS','USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS'] )
# Regular build




#-------------------------------------------------------------------------------
# Compile the private source files
#-------------------------------------------------------------------------------
if TDSCDMA_MAC_C_PRIVATE_SOURCES != []:
  env_private = env.Clone()
  env_private.Append(CPPDEFINES = [
    'FEATURE_LIBRARY_ONLY'
  ])

if env.has_key('USES_CUST_1'):
  env_private.AddLibrary(IMAGES,'${BUILDPATH}/lib_tdscdma_mac',TDSCDMA_MAC_C_PRIVATE_SOURCES)
else:
  env_private.AddBinaryLibrary(IMAGES,'${BUILDPATH}/lib_tdscdma_mac',TDSCDMA_MAC_C_PRIVATE_SOURCES)


################################################################

# Use AddRcInitFunc to add init functions to rcinit
#  Required fields:
#              'sequence_group'
#              'init_function'
#  Optional fields:
#              'dependencies'

# Use AddRcInitTask to add a task to rcinit
#  Required fields:
#              'thread_name'
#              'sequence_group'
#              'stack_size_bytes'
#              'priority_amss_order'
#  Optional fields:
#              'stack_name'
#              'thread_entry'
#              'tcb_name'
# Note that the optional fields default to 'thread_name'_{stack, entry, task}
################################################################

#-------------------------------------------------------------------------------
# Create L2 dl task
#-------------------------------------------------------------------------------
if 'USES_MODEM_RCINIT' in env:
   RCINIT_IMG = ['MODEM_MODEM', 'MOB_TDSCDMA']
   env.AddRCInitFunc(
    RCINIT_IMG,
    {
     'sequence_group'             : env.subst('$MODEM_PROTOCOL'),
     'init_name'                  : 'tds_mac_hs_dl_init',
     'init_function'              : 'tdsmac_hs_dl_rcinit_init',
     'policy_optin'               : ['default', 'ftm', ],
    })

if 'USES_MODEM_RCINIT' in env:
   RCINIT_IMG = ['MODEM_MODEM', 'MOB_TDSCDMA']
   env.AddRCInitTask(
    RCINIT_IMG,
    {
      'sequence_group'             : env.subst('$MODEM_PROTOCOL'),
      'thread_name'                : 'tds_mac_hs_dl',
      'thread_entry'               : 'tds_mac_hs_dl_task',
      'stack_size_bytes'           : '2408',
      'priority_amss_order'        : 'TDSCDMA_MAC_HS_DL_PRI_ORDER',
      'tcb_name'                   : 'tds_mac_hs_dl_tcb',
      'cpu_affinity'	           : env.subst('$MODEM_TDSCDMA_CPU_AFFINITY'),
      'policy_optin'               : ['default', 'ftm', ],
    })


