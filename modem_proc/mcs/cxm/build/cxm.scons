#===============================================================================
#
# CXM Scons
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2013 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary

# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.

# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/20/14   btl     Remove WCI2 references when UART not present
# 10/15/13   ckk     Flattening the CxM tree
# 07/23/12   ag      Removing modem folder
# 04/08/12   ckk     Initial version.
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

#-------------------------------------------------------------------------------
# Check if IoE build -- if so, exclude CXM
#-------------------------------------------------------------------------------
ioe = False
if 'BUILD_ID' in env:
    id = env['BUILD_ID'].lower()
    if ('lwgioe' in id) or ('lteonly' in id) or ('lwgniaioe' in id) or ('lcgioe' in id):
        ioe = True

#-------------------------------------------------------------------------------
# Need to get access to MCS Protected headers
#-------------------------------------------------------------------------------
env.RequireProtectedApi(['MCS'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = "../src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for CXM MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = ["MSG_BT_SSID_DFLT=MSG_SSID_CXM"])

#-------------------------------------------------------------------------------
# Add CXM task to RCInit
#-------------------------------------------------------------------------------
if not ioe:
    if 'USES_MODEM_RCINIT' in env:
        RCINIT_TASK_CXM = {
                    'thread_name'          : 'cxm',
                    'sequence_group'       : env.subst('$MODEM_PROTOCOL'),
                    'stack_size_bytes'     : env.subst('$CXM_STKSZ'),
                    'priority_amss_order'  : 'SHARED_FOREGROUND_PRI_ORDER',
                    'stack_name'           : 'cxm_stack',
                    'stack_size_bytes'     : '8192',
                    'thread_entry'         : 'cxm_task',
                    'tcb_name'             : 'cxm_tcb',
                    'cpu_affinity'         : 'REX_ANY_CPU_AFFINITY_MASK',
                    'policy_optin'         : ['default', 'ftm', ],
                }
    if 'USES_MODEM_RCINIT' in env:
        env.AddRCInitTask(['MODEM_MODEM', 'MOB_MCS_COPPER'], RCINIT_TASK_CXM)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
if ioe:
    CXM_SRC = []
    CXM_SRC.append('${BUILDPATH}/cxm_wcn_tx.c')
    CXM_SRC.append('${BUILDPATH}/cxm_fw_interface.c')
    env.Append(CPPDEFINES = ["FEATURE_MCS_COEX_NOCODE"])
else:
    CXM_SRC = ['${BUILDPATH}/' + basename(fname)
               for fname in glob(join(env.subst(SRCPATH), '*.c'))]

if 'USES_CUST_1' in env:
   CXM_SRC.remove('${BUILDPATH}/coex_nv.c')

if 'USES_CUST_1' not in env:
    env.Append(CPPDEFINES = ["FEATURE_COEX_USE_NV"])

if 'USES_STANDALONE_FW' in env:
    env.Append(CPPDEFINES = ["FEATURE_COEX_FW_STANDALONE_BUILD"])

# Add our library to the Modem Modem image
env.AddLibrary(['MODEM_MODEM', 'MOB_MCS_CXM'], '${BUILDPATH}/cxm', CXM_SRC)

# Load test units
env.LoadSoftwareUnits()
