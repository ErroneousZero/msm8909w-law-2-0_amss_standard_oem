# -------------------------------------------------------------------------------- #
#                         G N S S _ T L E _ 1 _ 0. S C O N S
#
# DESCRIPTION
#   SCons file for the TLE 1.0 subsystem
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#  Copyright (c) 2015 Qualcomm Technologies, Inc.
#  Qualcomm Technologies Confidential and Proprietary. All Rights Reserved. 
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/gps/gnss/tle/1_0/build/gnss_tle_1_0.scons#1 $
#  $DateTime: 2016/12/13 07:59:45 $
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('env')

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_FEATURE_GNSS_TLE_10' not in env:
  Return()
  
env.PrintInfo("TLE 1.0 enabled")

if 'USES_FEATURE_CGPS_XTRA_T' not in env:
    # Remove all files
    # Uncomment below line only on baselines that do not support XTRA-T in any variant
    #env.CleanPack('CLEANPACK_TARGET', env.FindFiles('*', '..'))
    Return()

#--------------------------------------------------------------------------------
# Find all of the .c and .h files in TLE and Clean them from being packed
#--------------------------------------------------------------------------------
GNSS_TLE_SHIP_FILES     = ['tle_api.h',
                          ]
GNSS_TLE_PACK_EXCEPTION = ['tlm_api.h',
                          ]
                          
# Parse the files to find the shipped, non-shipped and pack exception files
black_list          = env.FindFiles(['*.h', '*.c'], '..')
white_list          = env.FindFiles(GNSS_TLE_SHIP_FILES, '..')
pack_exception_list = env.FindFiles(GNSS_TLE_PACK_EXCEPTION, '..')
  
# This code does "filtered = black_list - white_list"
filtered = [x for x in black_list if x not in white_list]
tle_cleanpack = [x for x in filtered if x not in pack_exception_list]

# CleanPack the filtered files with the proper flags.  
env.CleanPack("CLEANPACK_TARGET", tle_cleanpack)
env.CleanPack("CLEANPACK_TARGET", pack_exception_list, pack_exception=["USES_CUSTOMER_GENERATE_LIBS"])

env.LoadSoftwareUnits()
