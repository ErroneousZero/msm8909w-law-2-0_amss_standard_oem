# -------------------------------------------------------------------------------- #
#                         G P S _ G N S S . S C O N S
#
# DESCRIPTION
#   SCons file for the whole GNSS subsystem. Defines the existence of GNSS subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
# Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
# Qualcomm Confidential and Proprietary. All Rights Reserved.
# Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
# Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
# Copyright (c) 2015 Qualcomm Technologies, Inc. 
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# QUALCOMM ATHEROS, INCORPORATED and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of QUALCOMM ATHEROS, INCORPORATED.
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/gps/gnss/build/gps_gnss.scons#1 $
# $DateTime: 2016/12/13 07:59:45 $
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('env')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_NO_GPS_GNSS' in env or \
   'USES_CGPS' not in env:
    env.PrintInfo("GPS NOT SUPPORTED IN THIS CONFIGURATION")
    # Only unified builds are shipped to customer, so 
    # it is safe to leave GPS code in place
    Return()
    
#-------------------------------------------------------------------------------
# QDSS Tracer definitions
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
  env.Append(CPPDEFINES = " GNSS_TRACER_SW_EVT")
  
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [['GNSS_STOP_STATE_EVT',       'Stop GNSS session'],
            ['GNSS_ACQ_STATE_EVT',        'Enter GNSS Acq'],
            ['GNSS_NON_DPO_STATE_EVT',    'Enter non DPO TRK'],
            ['GNSS_DPO_ACTIVE_STATE_EVT', 'Enter DPO Wakeup'],
            ['GNSS_DPO_IDLE_STATE_EVT',   'Enter DPO Sleep'],
            ['GNSS_DPO_RF_RESUME_EVT',    'Start DPO RF Resume'],
            ['GNSS_DPO_RF_PAUSE_EVT',     'End DPO RF Pause'],
            ['GNSS_INTEG_START_EVT',      'Start signal integration'],
            ['GNSS_INTEG_END_EVT',        'Stop signal integration'],
            ['GNSS_PP_START_EVT',         'Start PP'],
            ['GNSS_PP_END_EVT',           'End PP'],
            ['GNSS_NF_PREFIX_START_EVT',  'Start Prefix computation'],
            ['GNSS_NF_PREFIX_END_EVT',    'End Prefix computation'],
            ['GNSS_NF_FIX_START_EVT',     'Start Fix report'],
            ['GNSS_NF_FIX_END_EVT',       'End Fix report'],]
  env.AddSWEInfo(QDSS_IMG,events)
  # Create our own tracer_event IDs file
  # The output of SWEBuilder must go into BUILDPATH along with the generated .o and .lib files.
  env.SWEBuilder(['${BUILDPATH}/gnss_tracer_event_ids.h'],None)
  env.PrintInfo("SWE Builder for gnss_tracer_event_ids.h was called")
  env.Append(CPPPATH = ['${BUILD_ROOT}/gps/gnss/build/$BUILDPATH'])
  
#--------------------------------------------------------------------------------
# Publish Protected Include Paths for just GPS
#--------------------------------------------------------------------------------
env.PublishProtectedApi('COMMON',   ["${GPS_ROOT}/gnss/common/inc"])
env.PublishProtectedApi('LBS',      ["${GPS_ROOT}/gnss/lbs/inc"])
env.PublishProtectedApi('MGP',      ["${GPS_ROOT}/gnss/mgp/inc"])
env.PublishProtectedApi('PD_COMMS', ["${GPS_ROOT}/gnss/pd_comms/inc"])
env.PublishProtectedApi('PPM',      ["${GPS_ROOT}/gnss/ppm/inc"])
env.PublishProtectedApi('SAMLITE',  ["${GPS_ROOT}/gnss/samlite/inc"])
env.PublishProtectedApi('SDP',      ["${GPS_ROOT}/gnss/sdp/inc"])
env.PublishProtectedApi('SM',       ["${GPS_ROOT}/gnss/sm/inc"])
env.PublishProtectedApi('LE',       ["${GPS_ROOT}/gnss/le/inc"])
env.PublishProtectedApi('LOC_MW',   ["${GPS_ROOT}/gnss/loc_mw/inc"])
env.PublishProtectedApi('LOWI',     ["${GPS_ROOT}/gnss/lowi_client/inc"])

if 'USES_FEATURE_GNSS_OTDOA_50' in env:
    env.PublishProtectedApi('LTE_OTDOA',["${GPS_ROOT}/gnss/wwanme/lte_otdoa/5_0/inc"])
elif 'USES_FEATURE_GNSS_OTDOA_30' in env:
    env.PublishProtectedApi('LTE_OTDOA',["${GPS_ROOT}/gnss/wwanme/lte_otdoa/3_0/inc"])
elif 'USES_FEATURE_GNSS_OTDOA_20' in env:
    env.PublishProtectedApi('LTE_OTDOA',["${GPS_ROOT}/gnss/wwanme/lte_otdoa/2_0/inc"])
else:
    env.PrintError("No OTDOA version defined for this target. Configuration needs to be corrected.")

if 'USES_FEATURE_GNSS_TDP_10' in env:
    env.PublishProtectedApi('LTE_TDP',["${GPS_ROOT}/gnss/wwanme/lte_tdp/1_0/inc"])
elif 'USES_FEATURE_GNSS_TDP_15' in env:
    env.PublishProtectedApi('LTE_TDP',["${GPS_ROOT}/gnss/wwanme/lte_tdp/1_5/inc"])
else:
    # A TDP header is still needed when TDP is disabled to point to the stub functions.  
    env.PublishProtectedApi('LTE_TDP',["${GPS_ROOT}/gnss/wwanme/lte_tdp/stub/inc"])
 
env.PublishProtectedApi('LTE_TDP',["${GPS_ROOT}/gnss/wwanme/common/inc"])

#--------------------------------------------------------------------------------
# Require Protected Include Paths for just GPS
#--------------------------------------------------------------------------------
env.RequireProtectedApi(['COMMON',   
                         'LBS',      
                         'LTE_OTDOA',
                         'LTE_TDP',
                         'MGP',      
                         'PD_COMMS', 
                         'PPM',      
                         'SAMLITE',
                         'SDP',      
                         'SM',       
                         'LE',       
                         'LOC_MW',
                         'LOWI',
                         'WWANMEPVT'
                        ])

# WLE contains its own stubs.  Always include the header files
env.PublishProtectedApi('WLE',      ["${GPS_ROOT}/gnss/wle/inc",])

# TODO Move next line into gnss_wle.scons (shouldn't be visible at this level)
env.PublishProtectedApi('WLE',      ["${GPS_ROOT}/gnss/wle/common/inc",])

env.RequireProtectedApi('WLE')

env.LoadSoftwareUnits()
