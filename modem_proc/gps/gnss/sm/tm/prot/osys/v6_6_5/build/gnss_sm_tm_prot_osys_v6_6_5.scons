# -------------------------------------------------------------------------------- #
#         G N S S _ S M _ T M _ P R O T _ O S Y S _ V 6 _ 6 _ 4 . S C O N S
#
# DESCRIPTION
#   SCons file for the SM_TM Protocol OSYS V6_6_5 Subsystem
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2013 - 2014 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/gps/gnss/sm/tm/prot/osys/v6_6_5/build/gnss_sm_tm_prot_osys_v6_6_5.scons#1 $
# $DateTime: 2016/12/13 07:59:45 $
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 10/02/13     tf      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('env')

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in env:
    Return()
    
if 'USES_FEATURE_GNSS_OSYS_V665' not in env:
   env.CleanPack('CLEANPACK_TARGET', env.FindFiles('*', '..'))
   Return()

env.PrintInfo("Using GNSS OSYS V6.6.5")
   
#--------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros by removing previous version and adding new
# Definition
#--------------------------------------------------------------------------------
env.Replace(CPPDEFINES = [x for x in env['CPPDEFINES'] if not x.startswith("MSG_BT_SSID_DFLT=")] +
                                         ["MSG_BT_SSID_DFLT=MSG_SSID_GPSSM"]) 

#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_sm_tm_prot_osys_v6_6_5'

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
if 'USES_CUSTOMER_GENERATE_LIBS' in env:
  BINARY_LIB_SOURCES = [
    '${BUILDPATH}/tm_lpp_asn1.o',
    '${BUILDPATH}/tm_rrlp_asn1.o',
    '${BUILDPATH}/tm_supl_asn1.o',
  ]
  env.CleanPack("CLEANPACK_TARGET", '../src/tm_lpp_asn1.c')
  env.CleanPack("CLEANPACK_TARGET", '../src/tm_rrlp_asn1.c')
  env.CleanPack("CLEANPACK_TARGET", '../src/tm_supl_asn1.c')
else:
  BINARY_LIB_SOURCES = [
    '${BUILDPATH}/tm_lpp_asn1.c',
    '${BUILDPATH}/tm_rrlp_asn1.c',
    '${BUILDPATH}/tm_supl_asn1.c'
  ]

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------
env.AddBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

env.LoadSoftwareUnits()