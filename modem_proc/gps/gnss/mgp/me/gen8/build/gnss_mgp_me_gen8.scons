# -------------------------------------------------------------------------------- #
#                       G N S S _ M G P _ M E _ G E N 8 . S C O N S
#
# DESCRIPTION
#   SCons file for the whole MGP ME Gen8 subsystem. Defines the existence of MGP ME subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2015 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#  Copyright (c) 2016 Qualcomm Technologies, Inc.
#  Qualcomm Technologies Confidential and Proprietary. All Rights Reserved. 
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
# $Header: $
# $DateTime: $
# 
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('env')

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in env:
    Return()

#--------------------------------------------------------------------------------
# Only compile this for Gen8 targets
#--------------------------------------------------------------------------------
if 'USES_FEATURE_GNSS_NAVHW_GEN8A' not in env and \
   'USES_FEATURE_GNSS_NAVHW_GEN8B' not in env and \
   'USES_FEATURE_GNSS_NAVHW_GEN8C' not in env:
  env.CleanPack('CLEANPACK_TARGET', env.FindFiles('*', '..'))
  Return()

#--------------------------------------------------------------------------------
# Only cgps_ext.c is shipped compiled and shipped as source.  
# All other folders and files are shipped as libraries
#--------------------------------------------------------------------------------
SRCPATH = '../src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
env.AddLibrary(['MODEM_MODEM'], 
               '${BUILDPATH}/' + 'me_gen8',
               ['${BUILDPATH}/cgps_ext.c'])

#-------------------------------------------------------------------------------
# Enable SIB8/16 OTA Reset Handling on targets that support it.
#-------------------------------------------------------------------------------
if env['PRODUCT_LINE'].startswith('MPSS.TA.2.3') and not 'USES_GNSS_SA' in env:
    env.Append(CPPDEFINES = " FEATURE_GNSS_SIB_OTA_RESET ")  # Modem level
    env.PrintInfo("SIB8/16 OTA Reset Enabled") 

env.LoadSoftwareUnits()
