# -------------------------------------------------------------------------------- #
#                    G N S S _ M G P M E _ M C . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS MGP ME MC subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
# Copyright (c) 2010-2013,2015 Qualcomm Atheros, Inc. 
# All Rights Reserved. 
# Qualcomm Atheros Confidential and Proprietary.  
#
# Copyright (c) 2015 Qualcomm Technologies, Inc. 
# All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/gps/gnss/mgp/me/gen8/mc/build/gnss_mgpme_mc.scons#1 $
# $DateTime: 2016/12/13 07:59:45 $
# $Author: mplcsds1 $ 
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 07/15/15     al      Conditionally compile mc_logprescdwell_V51, V53 based on GAL
# 01/08/15     am      Added stubs file for SBAS data demodulation
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import the SCons environment
#--------------------------------------------------------------------------------
Import('env')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in env:
   Return()

#--------------------------------------------------------------------------------
# Setup Debug preferences 
#--------------------------------------------------------------------------------

if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG     = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG     = "")

if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG     = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG     = "-g")


#-------------------------------------------------------------------------------
# Enable Default XO Compensation values for all targets
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = " FEATURE_GNSS_DEFAULT_XO_COMPENSATION ")  # Modem level
env.PrintInfo("Default XO Compensation Values Enabled")
    
#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_mgpme_mc'

#--------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros by removing previous version and adding new
# Definition
#--------------------------------------------------------------------------------
env.Replace(CPPDEFINES = [x for x in env['CPPDEFINES'] if not x.startswith("MSG_BT_SSID_DFLT=")] +
                                         ["MSG_BT_SSID_DFLT=MSG_SSID_MGPME"]) 

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
BINARY_LIB_SOURCES = ['${BUILDPATH}/' + basename(fname)
                      for fname in glob(join(env.subst(SRCPATH), '*.c'))]

# If TCXO is still being managed by MCS, remove mc_freqest.c and use mc_freqest_stubs.c
# Else TCXO is managed by GPS, so use mc_freqest.c and remove mc_freqest_stubs.c. 
if 'USES_FEATURE_MCS_TCXO_REFACTORED' not in env:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_freqest.c']]
else:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_freqest_stubs.c']]

#--------------------------------------------------------------------------------
# GNSS specific conditional compilation
#--------------------------------------------------------------------------------

if 'USES_GNSS_GAL' in env:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_galstubs.c',
                                                                     '${BUILDPATH}/mc_galdemod_stubs.c',
                                                                     '${BUILDPATH}/mc_logprescdwell_v51.c']]
    # If pilot signal (E1-C) support is not enabled.  Alternative implementations:
    #  E1-C enabled           |  E1-C disabled
    #  -----------------------+------------------------
    #  mc_galplldemod.c       |  mc_galcostasdemod.c
    #  mc_galpagesearch_e1c.c |  mc_galpagesearch_e1b.c
    #
    if 'USES_GNSS_GAL_E1C' not in env:
        BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_galpagesearch_e1c.c',
                                                                         '${BUILDPATH}/mc_galplldemod.c']]
    else:
        BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_galpagesearch_e1b.c',
                                                                         '${BUILDPATH}/mc_galcostasdemod.c']]
else:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_galcostasdemod.c',
                                                                     '${BUILDPATH}/mc_galdemod.c',
                                                                     '${BUILDPATH}/mc_galpage.c',
                                                                     '${BUILDPATH}/mc_galpagesearch_e1b.c',
                                                                     '${BUILDPATH}/mc_galpagesearch_e1c.c',
                                                                     '${BUILDPATH}/mc_galplldemod.c',
                                                                     '${BUILDPATH}/mc_viterbicrc.c',
                                                                     '${BUILDPATH}/mc_gal.c',
                                                                     '${BUILDPATH}/mc_galtimedecode.c',
                                                                     '${BUILDPATH}/mc_logprescdwell_v53.c']]

if 'USES_GNSS_GLO' in env:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_glostubs.c']]
else:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_glo.c']]

if 'USES_GNSS_BDS' in env:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_bdsstubs.c']]
else:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_bds.c']]

if 'USES_GNSS_SBAS' in env:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_sbasdemod_stubs.c']]
else:
    BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in ['${BUILDPATH}/mc_sbasdemod.c']]

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------
env.AddBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

#--------------------------------------------------------------------------------
# APQ targets has different RC init parameters than MPSS targets.   
#--------------------------------------------------------------------------------
if 'USES_GPSAPQ' in env:
   RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW', 'CORE_GSS']
   env.AddRCInitTask(           # NV
    RCINIT_IMG,                 # define TMC_RCINIT_REXTASK_NV 
    {
      'sequence_group'             : 'RCINIT_GROUP_3',                  # required
      'thread_name'                : 'mgpmc',                              # required
      'stack_size_bytes'           : '16384',
      'priority_amss_order'        : 'SHARED_BACKGROUND_PRI_ORDER',
      'cpu_affinity'               : 'REX_ANY_SMT_MASK',
    })
else:
    RCINIT_TASK_FN = {
        'thread_name'         : 'mgpmc',
        'thread_entry'        : 'mgpmc_task',
        'stack_size_bytes'    : env.subst('$MGPMC_STKSZ'),
        'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
        'priority_amss_order' : 'MGPMC_PRI_ORDER',
        'cpu_affinity'        : 'REX_ANY_CPU_AFFINITY_MASK',
        'policy_optin'        : ['default', 'ftm', ],
    }
    env.AddRCInitTask (IMAGES, RCINIT_TASK_FN)

