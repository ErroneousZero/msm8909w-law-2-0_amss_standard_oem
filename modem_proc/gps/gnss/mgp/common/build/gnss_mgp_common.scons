# -------------------------------------------------------------------------------- #
#                    G N S S _ M G P _ C O M M O N . S C O N S
#
# DESCRIPTION
#   SCons file for the GNSS MGP Common subsystem.
#
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#   None.
#
#
#  Copyright (c) 2010 - 2012 Qualcomm Technologies Incorporated.
#  Qualcomm Confidential and Proprietary. All Rights Reserved.
#  Copyright (c) 2013 - 2014 Qualcomm Atheros, Inc.
#  Qualcomm Atheros Confidential and Proprietary. All Rights Reserved. 
#  Copyright (c) 2015 Qualcomm Technologies, Inc. 
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------------- #

# --------------------------------------------------------------------------------- #
#
#                      EDIT HISTORY FOR FILE
#
# This section contains comments describing changes made to this file.
# Notice that changes are listed in reverse chronological order.
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/gps/gnss/mgp/common/build/gnss_mgp_common.scons#1 $
# $DateTime: 2016/12/13 07:59:45 $
# 
# when         who     what, where, why
# ---------    ---     ------------------------------------------------------------
# 10/06/10     ah      Initial Version
#
# --------------------------------------------------------------------------------- #

#--------------------------------------------------------------------------------
# Import and clone the SCons environment
#--------------------------------------------------------------------------------
Import('env')
from glob import glob
from os.path import join, basename

#--------------------------------------------------------------------------------
# Check USES flags and return if library isn't needed
#--------------------------------------------------------------------------------
if 'USES_CGPS' not in env:
    Return()

#--------------------------------------------------------------------------------
# Setup Debug preferences 
#--------------------------------------------------------------------------------
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG     = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG     = "")

if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG     = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG     = "-g")

#--------------------------------------------------------------------------------
# Setup source PATH
#--------------------------------------------------------------------------------
SRCPATH = '../src'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#--------------------------------------------------------------------------------
# Name of the subsystem to which this unit belongs
#--------------------------------------------------------------------------------
LIB_TARGET = '${BUILDPATH}/' + 'gnss_mgp_common'

#--------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros by removing previous version and adding new
# Definition
#--------------------------------------------------------------------------------
env.Replace(CPPDEFINES = [x for x in env['CPPDEFINES'] if not x.startswith("MSG_BT_SSID_DFLT=")] +
                                         ["MSG_BT_SSID_DFLT=MSG_SSID_MGP"]) 

#--------------------------------------------------------------------------------
# Images that this VU is added
#--------------------------------------------------------------------------------
IMAGES = ['MODEM_MODEM']

#--------------------------------------------------------------------------------
# Generate the library and add to an image
#--------------------------------------------------------------------------------
# Put all source files into no-ship list
BINARY_LIB_SOURCES = ['${BUILDPATH}/' + basename(fname)
                      for fname in glob(join(env.subst(SRCPATH), '*.c'))]

if 'USES_GNSS_GLO' in env:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_glodisabled.c']]
else:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_gloenabled.c']]

if 'USES_GNSS_BDS' in env:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_bdsdisabled.c']]
else:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_bdsenabled.c']]

if 'USES_GNSS_GAL' in env:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_galdisabled.c']]
else:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_galenabled.c']]

if 'USES_GNSS_QZSS' in env:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_qzssdisabled.c']]
else:
    BINARY_LIB_SOURCES = [l for l in BINARY_LIB_SOURCES if l not in ['${BUILDPATH}/mgp_common_qzssenabled.c']]


# Make the list of ok-to-ship source files (per wiki page)
LIB_SOURCES = ['${BUILDPATH}/mgp_nv.c',
              ]

# Now update list of no-ship files
BINARY_LIB_SOURCES = [b for b in BINARY_LIB_SOURCES if b not in LIB_SOURCES]

#--------------------------------------------------------------------------------
# Add our library to the Modem image
#--------------------------------------------------------------------------------
env.AddLibrary(IMAGES, LIB_TARGET, LIB_SOURCES)

#--------------------------------------------------------------------------------
# Ship our code as binary library and add it to the Modem image
#--------------------------------------------------------------------------------
env.AddBinaryLibrary(IMAGES, (LIB_TARGET + '_pvt'), BINARY_LIB_SOURCES, pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

