#===============================================================================
#
# Copyright (c) 2013 Qualcomm Technologies Incorporated.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/fw/fw_common/build/fw_common.scons#1 $
#
#===============================================================================

from glob import glob
from os.path import join, basename, split

# --------------------------------------------------------------------------- #
# Import SCons Environment                                                    #
# --------------------------------------------------------------------------- #
Import('env')

#-------------------------------------------------------------------------------
# Necessary Public & Restricted API's
#-------------------------------------------------------------------------------
env.RequirePublicApi([
    'DAL',
    'DEBUGTOOLS',
    'MPROC',
    'SERVICES',
    'SYSTEMDRIVERS',
    'MEMORY',
    'KERNEL',          # needs to be last
    ], area='core')

env.RequirePublicApi(['MCS'], area='MCS')
env.RequirePublicApi(['COMMON'], area='FW')

#-------------------------------------------------------------------------------
# Autodetect UMID files
#-------------------------------------------------------------------------------
path,tech = split(Dir('../').path)
api_path = env.subst('../api/')
files = [ ]
for fname in glob(join(api_path, '*_msg.h')):
  env.PrintDebugInfo('fw', tech+": AddUMID: " + fname)
  files.append(fname)
if len(files) > 0:
  env.AddUMID('${BUILDPATH}/'+tech+'.umid', files)

#-------------------------------------------------------------------------------
# Export Build Variant and object files
#-------------------------------------------------------------------------------
# Choose build variant
if 'USES_EMULATION_PLATFORM' in env:
  fw_variant = "QRAFA"
else:
  fw_variant = "QSAFA"
  if 'USES_INTERNAL_BUILD' not in env:
    #this is an external build, load external builder
    base_variant = fw_variant
    fw_variant = base_variant+'-external'

    #determine if this is a pack build or not
    #----------------------------------------
    cleanpack = env.GetOption('cleanpack')
    if(('USES_NO_STRIP_NO_ODM' in env) and ('USES_CLEAN_PACK' not in env)  and not cleanpack):
      #This not a pack build, should get executed during normal external build
      # we will generate all the external libs/objs
      env.LoadToolScript('fw_external.py')
      
      # find all fw components
      sources = []
      tech_libs =  glob('../../fw_*/bin/'+base_variant+'/fw_*.lib')
      tech_objs =  glob('../../fw_*/bin/'+base_variant+'/*.o')
      
      #remove excluded techs
      if 'USES_EXCLUDE_LTE_FW' in env:
       tech_libs = [ x for x in tech_libs if 'lte' not in x ] 
       tech_objs = [ x for x in tech_objs if 'lte' not in x ] 
      if 'USES_EXCLUDE_C2K_FW' in env:
       tech_libs = [ x for x in tech_libs if 'c2k' not in x ] 
       tech_objs = [ x for x in tech_objs if 'cfw' not in x ] 
      if 'USES_EXCLUDE_TDSCDMA_FW' in env:
       tech_libs = [ x for x in tech_libs if 'tdscdma' not in x ] 
       tech_objs = [ x for x in tech_objs if 'tfw' not in x ] 
      if 'USES_EXCLUDE_WCDMA_FW' in env:
       tech_libs = [ x for x in tech_libs if 'wcdma' not in x ] 
       tech_objs = [ x for x in tech_objs if 'wfw' not in x ] 
      
      bin_files = tech_libs + tech_objs
      cmm_files = glob('../../fw_*/bin/'+base_variant+'/fw_*_loadsym.cmm')
      redef_files = glob('../../fw_*/bin/'+base_variant+'/fw_*_redef')
      sources += bin_files + cmm_files + redef_files

      #targets for redef
      targets = []
      cmm = '../bin/'+base_variant+'/${BUILDPATH}/modem_fw_load_sym.cmm'
      redef = '../bin/'+base_variant+'/${BUILDPATH}/modem_fw_redef'
      elf = '../bin/'+base_variant+'/${BUILDPATH}/modem_fw_debug.elf'
      targets.append(cmm)
      targets.append(redef)
      targets.append(elf)

      #targets for obfuscation
      tgt_objs = []
      for path in tech_objs:
        name = basename(path)
        tgt_objs.append('../bin/'+fw_variant+'/${BUILDPATH}/'+name)

      tgt_libs = []
      for path in tech_libs:
        name = basename(path)
        tgt_libs.append('../bin/'+fw_variant+'/${BUILDPATH}/'+name)
      
      #create master redef file
      redef_ret = env.fw_redef(source=[sources], target=[targets])
      
      #we will use the ret variable to make dependency
      redef_file = str(redef_ret[1])
      env.PrintInfo('fw_external non pack: redef: ' + redef_file)

      #obfuscate libs and objs
      obf_objs = env.fw_obfuscate(source =[redef_file, tech_objs], target=[tgt_objs])
      obf_libs = env.fw_obfuscate(source = [redef_file, tech_libs], target=[tgt_libs])
    else:
      #if we get here, this is a pack build
      env.PrintInfo('fw_external: pack build')
      obf_libs =  env.Glob('../bin/'+fw_variant+'/${BUILDPATH}/fw_*.lib')
      obf_objs =  env.Glob('../bin/'+fw_variant+'/${BUILDPATH}/*.o')
      
    #add obfuscated objs and libs
    # Setup source PATH
    SRCPATH = "../bin/"+fw_variant
    env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
    ret = env.AddOEMObject(['MODEM_MODEM'], obf_objs)
    for name in ret:
      env.PrintInfo('fw_external: OEM obj: '+str(name))
    ret = env.AddOEMLibrary(['MODEM_MODEM'], obf_libs)
    for name in ret:
      env.PrintInfo('fw_external: OEM lib: '+str(name))
    
    # Load cleanpack script:
    if env.PathExists('../pack/fw_cleanpack.py'):
      env.LoadToolScript('../pack/fw_cleanpack.py')
         
if '-external' not in fw_variant:
  # Setup source PATH
  SRCPATH = "../bin/"+fw_variant
  env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
  OBJPATH = env.subst(SRCPATH)

  env.AddOEMObject(['MODEM_MODEM'], OBJPATH+'/rfcmd_main.o')
  env.AddOEMLibrary(['MODEM_MODEM'], OBJPATH+'/fw_common.lib')
  env.AddOEMLibrary(['MODEM_MODEM'], OBJPATH+'/fw_common_sdm.lib')
