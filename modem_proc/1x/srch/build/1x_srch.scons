#==============================================================================#
#
#           1 X / S R C H   S C O N S   C O N F I G U R A T I O N
#
# GENERAL DESCRIPTION
#    SCons build script for modem/1x/srch
#
# Copyright (c) 2010 - 2013 Qualcomm Technologies, Inc. 
# All Rights Reserved Qualcomm Proprietary
# 
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
# 
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Inc. and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Inc.
# 
#
#------------------------------------------------------------------------------#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/1x/srch/build/1x_srch.scons#1 $
#------------------------------------------------------------------------------#
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ----------------------------------------------------------
# 04/08/14   as      Use local srch_tracer_event_ids.h
# 12/10/13   as      Moved FEATURE_MODEM_1X_SRCH_QDSS to scons file
# 12/06/13   dkb     Updated to support USES_COMPILE_1X_SEARCHER_PROTECTED_LIBS
# 10/28/13   as      Implemented dynamic timelines
# 09/11/13   as      Updated RCInit to support ftm policy option
# 08/28/13   as      Updated to support USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS
# 05/31/13   as      Implemented QDSS
# 05/15/13   ab      1X coex manager changes
# 02/26/13   cjb     Added TSYNC support for DIME PLs.
# 02/20/13   cjb     Added PACK option for not shipping 1x-L1 source files.
# 01/18/13   srk     Scons cleanup
# 01/08/13   cjb     DIME: Adding pack exception for clean pack builds.
# 03/06/12   srk     Did changes to RCInit framework.
# 12/20/11   srk     Added RCInit Framework.
# 11/07/11   jtm     Integrate ZZ2_2 support.
# 11/04/11   mca     Add TSYNC.
# 10/25/11   adw     Add TRAM module.
# 07/11/11   vks     Mainline FEATURE_SRCH_RX_STM and FEATURE_SRCH_RX_SVDO.
# 05/12/11   vks     Add UTILS to the MODEM API.
# 05/10/11   vks     Add MPROC to the CORE API.
# 05/09/11   vks     Setup UMIDs.
# 05/05/11   adw     Added new 1xtol irat files.
# 02/02/11   vks     Add the new srch/src/irat files.
# 01/28/11   cjb     Added USES_FLAGS and DEBUG ON/OFF feature support.
# 12/16/10   vks     Remove srchdv.c as it is no longer supported.
# 12/13/10   vks     Add FW to modem api's.
# 12/10/10   vks     Add LTE to modem api's.
# 12/09/10   vks     Revert previous change as it is not optimal.
#                    Add the smf source path using the append.
# 12/09/10   vks     Create smf include paths for nikel.
# 11/18/10   vks     Support for nikel - add the required source/smf files.
# 09/28/10   cjb     Fixed SMF builder first time fail issue.
# 09/10/10   cjb     Initial revision.
#
#==============================================================================#

################################################################################
# SIMPLE CONFIGURABLE ITEMS
################################################################################
#----------------------------------------------------------------------------#
# Name of the subsystem to which this unit belongs
#----------------------------------------------------------------------------#
SU_NAME = 'ONEX'

#----------------------------------------------------------------------------#
# Name of this unit
#----------------------------------------------------------------------------#
VU_NAME = 'SRCH'

#----------------------------------------------------------------------------#
# Source path
#----------------------------------------------------------------------------#
# The path to the source files
SRCPATH = '../src'

#----------------------------------------------------------------------------#
# Source files
# NOTE:
#     The source files. Either [] or list the files individually
#     e.g. SRC_FILES = ['foo.c', 'folder/bar.c']
#----------------------------------------------------------------------------#
SRC_FILES = [
    'common/srch.c',
    'common/srch_hw.c',
    'common/srch_lib_dep.c',
    'common/srch_lib_ext.c',
    ]

LIB_SRC_FILES = [
    'common/l1m.c',
    'common/srchcom_sm.c',
    'common/srchint.c',
    'common/srchmc.c',
    'common/srchtri.c',
    'common/srch_afc_sm.c',
    'common/srch_bm.c',
    'common/srch_cgps.c',
    'common/srch_cgps_util.c',
    'common/srch_comb.c',
    'common/srch_coex.c',
    'common/srch_conv.c',
    'common/srch_diag.c',
    'common/srch_fing_driver.c',
    'common/srch_ftm.c',
    'common/srch_genlog.c',
    'common/srch_gps_trans.c',
    'common/srch_hdr.c',
    'common/srch_irm.c',
    'common/srch_lib_int.c',
    'common/srch_mdsp.c',
    'common/srch_mem.c',
    'common/srch_msgr.c',
    'common/srch_mux.c',
    'common/srch_nv.c',
    'common/srch_peak.c',
    'common/srch_pwr.c',
    'common/srch_rx_div_asd.c',
    'common/srch_rx_div_auto_sm.c',
    'common/srch_rx_div_sm.c',
    'common/srch_rx_sm.c',
    'common/srch_rx_util.c',
    'common/srch_sect.c',
    'common/srch_srch4.c',
    'common/srch_stm.c',
    'common/srch_sys_meas_sm.c',
    'common/srch_tram_cfg.c',
    'common/srch_tram_sm.c',
    'common/srch_triage.c',
    'common/srch_tsync.c',
    'common/srch_tsync_qmi.c',
    'common/srch_util.c',
    'common/ulpn.c',
    'idle/srchidle_ctl.c',
    'idle/srchidle_sm.c',
    'idle/srchzz_is2000_sm.c',
    'idle/srchzz_is95a_sm.c',
    'idle/srchzz_qpch_offtl_sm.c',
    'idle/srchzz_qpch_ontl_sm.c',
    'idle/srchzz_qpch_sm.c',
    'idle/srchzz_qpch_util.c',
    'idle/srchzz_rtl_sm.c',
    'idle/srchzz_sm.c',
    'idle/srchzz_tl_common.c',
    'idle/srchzz_tl_prof.c',
    'idle/srchzz_tl_slack.c',
    'idle/srch_chan.c',
    'idle/srch_idle_util.c',
    'idle/srch_sched_sm.c',
    'idle/srch_slot.c',
    'init/srchacq_sm.c',
    'init/srchcd_sm.c',
    'init/srchna_sm.c',
    'init/srchsc_sm.c',
    'init/srchsl_sm.c',
    'init/srchtt_sm.c',
    'irat/srch_1xtol_sm.c',
    'irat/srch_irat_sm.c',
    'irat/srch_lto1x_sm.c',
    'traffic/srchtc_chan.c',
    'traffic/srchtc_ns_triage.c',
    'traffic/srchtc_sm.c',
    'traffic/srchtc_tcg_sm.c',
    'traffic/srchtc_triage.c',
    'traffic/srchtc_util.c',
    ]

SMF_FILES = [
    'common/srchcom_sm.smf',
    'common/srch_afc_sm.smf',
    'common/srch_rx_div_auto_sm.smf',
    'common/srch_rx_div_sm.smf',
    'common/srch_rx_sm.smf',
    'common/srch_sys_meas_sm.smf',
    'common/srch_tram_sm.smf',
    'idle/srchidle_ctl.smf',
    'idle/srchidle_sm.smf',
    'idle/srchzz_is2000_sm.smf',
    'idle/srchzz_is95a_sm.smf',
    'idle/srchzz_qpch_offtl_sm.smf',
    'idle/srchzz_qpch_ontl_sm.smf',
    'idle/srchzz_qpch_sm.smf',
    'idle/srchzz_rtl_sm.smf',
    'idle/srchzz_sm.smf',
    'idle/srch_sched_sm.smf',
    'init/srchacq_sm.smf',
    'init/srchcd_sm.smf',
    'init/srchna_sm.smf',
    'init/srchsc_sm.smf',
    'init/srchsl_sm.smf',
    'irat/srch_1xtol_sm.smf',
    'irat/srch_irat_sm.smf',
    'irat/srch_lto1x_sm.smf',
    'traffic/srchtc_sm.smf',
    'traffic/srchtc_tcg_sm.smf',
    ]

#----------------------------------------------------------------------------#
# Published APIs
#----------------------------------------------------------------------------#
# RESTRICTED Include Paths for the rest of Modem (if not necessary, set to '')
RESTRICTED_API = ''

# PROTECTED Include Paths for VUs within the SU (if not necessary, set to '')
PROTECTED_API = '../inc'

# PRIVATE Include Paths for the VU (if not necessary, set to '')
PRIVATE_API = '../protected'

#----------------------------------------------------------------------------#
# Required external APIs
#----------------------------------------------------------------------------#
CORE_APIS = [
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'DEBUGTRACE',
    'MPROC',
    'POWER',
    'SECUREMSM',
    'SERVICES',
    'STORAGE',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

MULTIMEDIA_APIS = [
    'AUDIO',
    ]

MODEM_APIS = [
    'DATA',
    'FW',
    'GERAN',
    'GPS',
    'HDR',
    'LTE',
    'MCS',
    'MDSP',
    'MMODE',
    'NAS',
    'RFA',
    'UIM',
    'UTILS',
    'WMS',
    ]

#----------------------------------------------------------------------------#
# Required external APIs not built with SCons (if any)
# e.g. ['BREW',]
#----------------------------------------------------------------------------#
REQUIRED_NON_SCONS_APIS = [
    'MODEM_SERVICES',
    'MULTIMEDIA_AUDIO',
    ]

#----------------------------------------------------------------------------#
# Images the SU will be loaded into (MODEM_APPS and/or MODEM_AMSS)
#----------------------------------------------------------------------------#
IMAGES = [
    'MODEM_AMSS',
    'MODEM_MODEM',
    ]


################################################################################
# SCONS
# NOTE: It should not normally be necessary to edit anything below this line.
################################################################################
from glob import glob
from os.path import join, basename

#----------------------------------------------------------------------------#
# Setup SCons environment
#----------------------------------------------------------------------------#
Import('env')
env = env.Clone()

#----------------------------------------------------------------------------#
# Check for USES Flags
#----------------------------------------------------------------------------#
# Verify that USES_CDMA is set, otherwise bail out now
if 'USES_CDMA' not in env:
    Return()

#-------------------------------------------------------------------------------
# QDSS Tracer definitions
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
  env.Append(CCFLAGS = " -DFEATURE_1X_BUILD_QDSS")
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [ ['CDMA_1X_WAKEUP_TS',              'Timeline == %u'],
             ['CDMA_1X_HW_WAKEUP_TT',           'Timeline == %u'],
             ['CDMA_1X_START_WAKE_ISR_TT',      'Timeline == %u'],
             ['CDMA_1X_END_WAKE_ISR_TT',        'Timeline == %u'],
             ['CDMA_1X_WAKEUP_CMD_TT',          'Timeline == %u'],
             ['CDMA_1X_ENABLE_CLKS_TT',         'Timeline == %u'],
             ['CDMA_1X_CLKS_ENABLED_TT',        'Timeline == %u'],
             ['CDMA_1X_FW_REQUEST_TT',          'Timeline == %u'],
             ['CDMA_1X_FW_ACTIVE_TT',           'Timeline == %u'],
             ['CDMA_1X_RF_ENABLE_TT',           'Timeline == %u'],
             ['CDMA_1X_RF_AWAKE_TT',            'Timeline == %u'],
             ['CDMA_1X_RTC_ENA_TS',             'Timeline == %u'],
             ['CDMA_1X_HW_CX8_ON_TT',           'Timeline == %u'],
             ['CDMA_1X_START_CX8_ISR_TT',       'Timeline == %u'],
             ['CDMA_1X_END_CX8_ISR_TT',         'Timeline == %u'],
             ['CDMA_1X_CX8_ON_CMD_TT',          'Timeline == %u'],
             ['CDMA_1X_TUNE_TT',                'Timeline == %u'],
             ['CDMA_1X_TUNE_COMPLETE_TT',       'Timeline == %u'],
             ['CDMA_1X_WAKEUP_RTC',             'Timeline == %u'],
             ['CDMA_1X_REACQ_TS',               'Timeline == %u'],
             ['CDMA_1X_SB_IND_TS',              'Timeline == %u'],
             ['CDMA_1X_START_REACQ_TT',         'Timeline == %u'],
             ['CDMA_1X_END_REACQ_SRCH_TT',      'Timeline == %u'],
             ['CDMA_1X_REACQ_SUCCESS_TT',       'Timeline == %u'],
             ['CDMA_1X_START_PRIO_SRCH_TT',     'Timeline == %u'],
             ['CDMA_1X_END_PRIO_SRCH_TT',       'Timeline == %u'],
             ['CDMA_1X_GS_RTC',                 'Timeline == %u'],
             ['CDMA_1X_NGHBRS_SEARCHED',        'Timeline == %u'],
             ['CDMA_1X_CLK_FREQ',               'Timeline == %u'],
             ['CDMA_1X_ALLOTTED_EXEC',          'Timeline == %u'],
             ['CDMA_1X_START_SLEEP_TS',         'Timeline == %u'],
             ['CDMA_1X_DISABLE_AFC_TT',         'Timeline == %u'],
             ['CDMA_1X_AFC_OFF_TT',             'Timeline == %u'],
             ['CDMA_1X_RF_DISABLE_TT',          'Timeline == %u'],
             ['CDMA_1X_RF_ASLEEP_TT',           'Timeline == %u'],
             ['CDMA_1X_FW_SHUTDOWN_TT',         'Timeline == %u'],
             ['CDMA_1X_FW_INACTIVE_TT',         'Timeline == %u'],
             ['CDMA_1X_CALC_PARAMS_TT',         'Timeline == %u'],
             ['CDMA_1X_TRIGGER_SLEEP_TT',       'Timeline == %u'],
             ['CDMA_1X_DISABLE_CLKS_TT',        'Timeline == %u'],
             ['CDMA_1X_CLKS_DISABLED_TT',       'Timeline == %u'],
             ['CDMA_1X_SLEEP_TT',               'Timeline == %u'],
             ['CDMA_1X_SLEEP_DIGITAL_RTC',      'Timeline == %u'],
             ['CDMA_1X_START_END_RECORD_ISR_TT','Timeline == %u'],
             ['CDMA_1X_END_END_RECORD_ISR_TT',  'Timeline == %u'],
             ['CDMA_1X_END_RECORD_TASK_TT',     'Timeline == %u'],
             ['CDMA_1X_START_DEMOD_TT',         'Timeline == %u'],
             ['CDMA_1X_END_DEMOD_TT',           'Timeline == %u'],
             ['CDMA_1X_ASSIGN_FING_TT',         'Timeline == %u'],
             ['CDMA_1X_START_SB_IND_ISR_TT',    'Timeline == %u'],
             ['CDMA_1X_END_SB_IND_ISR_TT',      'Timeline == %u'],
             ['CDMA_1X_SB_IND_TASK_TT',         'Timeline == %u'], ]
  env.AddSWEInfo(QDSS_IMG,events)

if 'QDSS_TRACER_SWE' in env:
  env.SWEBuilder(['${BUILDPATH}/srch_tracer_evt_ids.h'], None)
  env.Append(CPPPATH = ['${ONEX_ROOT}/srch/build/${BUILDPATH}'])

#----------------------------------------------------------------------------#
# Enable/Disable DEBUG information
#----------------------------------------------------------------------------#
# turn OFF debug if requested
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")

# turn ON debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2")
    env.Replace(HEXAGON_DBG = "-g")
    env.Replace(GCC_DBG = "-g")

#----------------------------------------------------------------------------#
# Setup source PATH
#----------------------------------------------------------------------------#
#FULL_SRCPATH = join('${BUILD_ROOT}',SRCPATH)

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Setup UMIDs
#-------------------------------------------------------------------------------
env.AddUMID('${BUILDPATH}/onex_srch.umid', ['../../api/onex_srch_lte_msg.h'])

#----------------------------------------------------------------------------#
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#----------------------------------------------------------------------------#
env.Append(CPPDEFINES = [
   'MSG_BT_SSID_DFLT=MSG_SSID_1X_SRCH',
])

#----------------------------------------------------------------------------#
# Publish Restricted Include Paths
#----------------------------------------------------------------------------#
#if RESTRICTED_API != '':
# env.PublishRestrictedApi(SU_NAME, [join('${ONEX_ROOT}', RESTRICTED_API)])

#----------------------------------------------------------------------------#
# Publish Protected Include Paths
#----------------------------------------------------------------------------#
if PROTECTED_API != '':
  env.PublishProtectedApi(VU_NAME, [PROTECTED_API])

#----------------------------------------------------------------------------#
# Publish Private Include Paths
#----------------------------------------------------------------------------#
if PRIVATE_API != '':
  env.PublishPrivateApi(VU_NAME, [PRIVATE_API])

#----------------------------------------------------------------------------#
# SMF Builder: *.smf ---> *.smh and *.smt
#----------------------------------------------------------------------------#
if SMF_FILES != []:
  # ----- Construct the actual list of *.smf files ----- #
  SMF_SOURCES = ['${BUILDPATH}/' + fname
                    for fname in SMF_FILES]

for smfname in SMF_SOURCES:
  fname =  basename(smfname.replace('.smf', ''))
  env.STM1([('${BUILDPATH}/' + fname + '.smh'),
            ('${BUILDPATH}/' + fname + '.smt')],
            smfname)

env.Append(CPPPATH = '${BUILDPATH}')
env.Append(CPPPATH = '${ONEX_ROOT}/srch/build/${BUILDPATH}')

#----------------------------------------------------------------------------#
# Request necessary APIs
#----------------------------------------------------------------------------#
# ----- We need the following PUBLIC APIs (from outside our area) ----- #
#env.RequirePublicApi(CORE_APIS, area='CORE')
#env.RequirePublicApi(MULTIMEDIA_APIS, area='MULTIMEDIA')
env.RequirePublicApi('TSYNC', area='QMIMSGS')

# ----- We also need PUBLIC/RESTRICTED APIs (in same area as we are) ----- #
#env.RequirePublicApi(MODEM_APIS)
env.RequireRestrictedApi(MODEM_APIS)

# ----- Need to get access to SU's own Public headers ----- #
env.RequirePublicApi(SU_NAME)
env.RequireRestrictedApi(SU_NAME)

# ----- We need our PROTECTED API too ("inc" dir of the <VU>) ----- #
if PROTECTED_API != '':
  env.RequireProtectedApi(VU_NAME)

# ----- We need our PRIVATE API too ("protected" dir of the <VU>) ----- #
if PRIVATE_API != '':
  env.RequirePrivateApi(VU_NAME)

# ----- We need EXTERNAL API (not built with SCons) ----- #
if REQUIRED_NON_SCONS_APIS != []:
  env.RequireExternalApi(REQUIRED_NON_SCONS_APIS)

#----------------------------------------------------------------------------#
# Generate the library and add to an image
#----------------------------------------------------------------------------#
if SRC_FILES == []:
  # ----- Construct the list of source files by looking for *.c ----- #
  SOURCES = ['${BUILDPATH}/' + basename(fname)
                for fname in glob(join(env.subst(SRCPATH), '*.c'))]
else:
  # ----- Construct the list of source files from the given list ----- #
  SOURCES = ['${BUILDPATH}/' + fname
                for fname in SRC_FILES]

if LIB_SRC_FILES != []:
  # ----- Construct the list of source files from the given list ----- #
  LIB_SOURCES = ['${BUILDPATH}/' + fname
                    for fname in LIB_SRC_FILES]

# Add library for code shipped as source
#env.AddLibrary(IMAGES, ('${BUILDPATH}/' + VU_NAME.lower()), SOURCES)

# env.AddBinaryLibrary() behavior with pack_exceptions:
#
#   if( pack_exception not defined )
#     1x-L1 code is *not* shipped. Hence, create binary library.
#   else if( pack_eception defined )
#     1x-L1 code is shipped to customer. Hence, create normal library
env.AddBinaryLibrary(IMAGES,
                     join('${BUILDPATH}', VU_NAME.lower()),
                     SOURCES,
                     pack_exception=['USES_COMPILE_TDSCDMA_AND_ALL_L1_PROTECTED_LIBS']
                     )


# Ship our code as binary library and add it to the MODEM image
env.AddBinaryLibrary(IMAGES, ('${BUILDPATH}/' + 'lib_' + VU_NAME.lower()), LIB_SOURCES,
                     pack_exception=['USES_CUSTOMER_GENERATE_LIBS',
                                     'USES_COMPILE_L1_OPT_AC_PROTECTED_LIBS',
                                     'USES_COMPILE_1X_SEARCHER_PROTECTED_LIBS'])

#----------------------------------------------------------------------------#
# Added RCINIT related task functions - SRCH
#----------------------------------------------------------------------------#

# Build image for which this task belongs
RCINIT_SRCH = ['MODEM_MODEM']

# RC Init Function Dictionary
RCINIT_INIT_SRCH = {
	    'sequence_group'      : env.subst('$MODEM_PROTOCOL'),
	    'init_name'           : 'srch_init',
	    'init_function'       : 'srch_init',
            'policy_optin'        : ['default', 'ftm', ],
    }

# RC Init Task Dictionary
RCINIT_TASK_SRCH = {
	    'thread_name'         : 'SRCH',
	    'sequence_group'      : env.subst('$MODEM_PROTOCOL'),
	    'stack_size_bytes'    : env.subst('$SRCH_STKSZ'),
	    'priority_amss_order' : 'SRCH_PRI_ORDER',
	    'stack_name'          : 'srch_stack',
	    'thread_entry'        : 'srch_task',
	    'tcb_name'            : 'srch_tcb',
            'policy_optin'        : ['default', 'ftm', ],
            'cpu_affinity'        : env.subst('$MODEM_CPU_AFFINITY')
    }

# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
	    env.AddRCInitFunc(RCINIT_SRCH, RCINIT_INIT_SRCH)
	    env.AddRCInitTask(RCINIT_SRCH, RCINIT_TASK_SRCH)
