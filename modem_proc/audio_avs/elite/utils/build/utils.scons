#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/multimedia2/dsp/qdsp6/sandbox/VPMSM8974/lpass_proc/avs/elite/utils/build/utils.scons#1 $
#  $DateTime: 2013/01/04 08:45:43 $
#  $Author: ktadakam $
#  $Change: 3193584 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

#-------------------------------------------------------------------------------
# Make all warnings into errors
#-------------------------------------------------------------------------------
#env.Append(CFLAGS = '-Werror')

if 'USES_ENABLE_FUNCTION_SECTIONS' in env:
   env.Append(CFLAGS = '-ffunction-sections')

#import pdb; pdb.set_trace()

if 'USES_USND_SVC_TEST' in env:
   env.Append(CFLAGS = ' -DUSND_TEST')
   env.Append(CPPFLAGS = ' -DUSND_TEST')
   temp=env.get('CFLAGS')
   if '-DADSP_TEST_ENTRY' in temp:
       temp.remove('-DADSP_TEST_ENTRY')
       env.Replace(CFLAGS=temp)

if 'USES_AUDIO_PROC_SVC_TEST' in env:
   env.Append(CFLAGS = ' -DAUDPPSVC_TEST ')
   env.Append(CPPFLAGS = ' -DAUDPPSVC_TEST ')
   temp=env.get('CFLAGS')
   if '-DADSP_TEST_ENTRY' in temp:
       temp.remove('-DADSP_TEST_ENTRY')
       env.Replace(CFLAGS=temp)
   
core_public_apis = [
   'DEBUGTOOLS',
   'KERNEL',
   'POWER',
   'SERVICES',
   'DAL'
   ]

env.RequirePublicApi(core_public_apis, area='core')
env.RequireRestrictedApi('AVS')
env.RequireProtectedApi('AVS')

platform_public_apis = [
    'ADSP_AMDB',
    'QAIC',
    'STDDEF',
    'HAPSDK'
    ]

env.RequirePublicApi(platform_public_apis, area='platform') # This has to be the last include command, so that the Elite_CAPI.h and Elite_APPI.h are not overridden




env.PublishPrivateApi('AVS',[
   '../inc',
   '../build',
   '../tst',
   '../../../../qdsp6/tp/inc'
   '../../../../core/api/services'
   ])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."
LIBNAME = 'EliteCmnUtils'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

avs_sources = env.GlobSourceFiles(['src/*.cpp', 'src/*.c', 'tst/*.cpp'], SRCPATH,posix=True)

# Dependency on the header files for amdb. These files are generated as part of the build
env.AddQaicHeaderDep('${BUILDPATH}/src/EliteMain.cpp', "adsp_amdb")

#make the avs_libs to lead entire avs_adsp image buckets.
if 'mapss_b' not in env.get('IMAGE_ALIASES'): 
   if ('USES_AUDIO_HAP' not in env) and (not env.IsBuildInternal()):
      env.AddBinaryLibrary(['AVS_ADSP'], ('${BUILDPATH}/'+LIBNAME), avs_sources)
   else:
      env.AddLibrary(['AVS_ADSP'], '${BUILDPATH}/'+LIBNAME, avs_sources)


   
#-------------------------------------------------------------------------------
# Device CFG data
#-------------------------------------------------------------------------------
LIBNAME_DEVCFG = 'lpm_devcfg'

#avs_sources_devcfg = env.GlobSourceFiles(['devcfg/src/*.cpp', 'devcfg/src/*.c'], SRCPATH, posix=True)

if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
     '8916_xml' : ['${AVS_ROOT}/elite/utils/devcfg/config/lpm.xml',
               '${AVS_ROOT}/elite/utils/devcfg/src/lpm_cfg_8916.c'],
     '8936_xml' : ['${AVS_ROOT}/elite/utils/devcfg/config/lpm.xml',
                '${AVS_ROOT}/elite/utils/devcfg/src/lpm_cfg_8936.c'],
     '8909_xml' : ['${AVS_ROOT}/elite/utils/devcfg/config/lpm.xml',
               '${AVS_ROOT}/elite/utils/devcfg/src/lpm_cfg_8909.c'],
     '9607_xml' : ['${AVS_ROOT}/elite/utils/devcfg/config/lpm.xml',
               '${AVS_ROOT}/elite/utils/devcfg/src/lpm_cfg_9607.c']
   })
if env.get('CHIPSET') == "msm8916" or env.get('CHIPSET') == "msm8936" or env.get('CHIPSET') == "mdm9x45" or env.get('CHIPSET') == "msm8909" or env.get('CHIPSET') == "mdm9607":
#-------------------------------------------------------------------------------
# RCINIT Task and Init Fields and Initialization
#-------------------------------------------------------------------------------
   IMAGES = ['MULTIMEDIA_QDSP6_SW']
  

#-------------------------------------------------------------------------------
# RCINIT Init and Task Fields and Initialization
#-------------------------------------------------------------------------------

   RCINIT_AUDIO_ELITE_FW_INIT_FN = {
     'sequence_group'             : 'RCINIT_GROUP_2',           # required
     'init_name'                  : 'elite_framework_init',     # required
     'init_function'              : 'elite_framework_init',     # required
     'dependencies'               : ['adsppm', 'apr_init']
   }

   RCINIT_AUDIO_ELITE_FW_START_INIT_FN = {
     'sequence_group'             : 'RCINIT_GROUP_2',         
     'init_name'                  : 'elite_framework_start',     
     'init_function'              : 'elite_framework_start',   
     'dependencies'               : ['elite_framework_init']
   }

   if 'USES_RCINIT' in env:
      env.AddRCInitFunc(IMAGES, RCINIT_AUDIO_ELITE_FW_INIT_FN)
      env.AddRCInitFunc(IMAGES, RCINIT_AUDIO_ELITE_FW_START_INIT_FN)

   
   
