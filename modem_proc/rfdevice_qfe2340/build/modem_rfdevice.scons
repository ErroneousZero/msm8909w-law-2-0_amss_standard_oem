#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013 QUALCOMM Technologies, Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/rfdevice_qfe2340/build/modem_rfdevice.scons#1 $
# $DateTime: 2016/12/13 07:59:10 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 10/20/14   chenh   Enabled compiler warings to errors
# 09/24/14   ndb     Add USES_JOLOKIA_MODEM
# 10/06/13   ra      Support RFLM CCS 
# 08/12/13   aca     Scons clean up part 1- remove violations
# 01/30/13   sar     Added Pack script changes.
# 09/25/12   sar     Updated scons and created api.
# 07/25/12   sn      Cleaned up legacy qfe2340 driver path
# 06/26/12   sar     Created  
#===============================================================================

Import('env')
env = env.Clone()

import os
#-------------------------------------------------------------------------------
# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")	
				   
#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):
   
   env_update_string    = ARGUMENTS.get('ENV_UPDATE_RFA')
   env_update_list      = env_update_string.split(',')
   item_total           = len(env_update_list)
   list_index           = 0
   
   #note if list is not even number of items, last odd item is ignored
   while list_index < item_total-1:
                 
      item            = env_update_list[list_index]  
      value           = env_update_list[list_index+1]
      list_index      += 2
                                              
      if(value == 'add'):
         env[str(item)] = 'yes'
         print "adding",item,"to env"                                          
                
      elif(value == 'delete'):
         del env[str(item)]
         print "deleting",item,"from env"
      
      else:
         if(value[0] != '='):
            print "missing leading = in",value
            print "not updating ",item
                 
         else:
            value2 = value[1:len(value)]
            env[str(item)] = value2
            print "now setting",item,value


if env.PathExists('${INC_ROOT}/rfdevice_qfe2340'):
    env.Replace(RFDEVICE_QFE2340_ROOT = '${INC_ROOT}/rfdevice_qfe2340')
else:
    env.Replace(RFDEVICE_QFE2340_ROOT = '${INC_ROOT}/modem/rfdevice_qfe2340')

#The order of APIs in the rfdevice_qfe2340_public_api_list determines the order the paths are listed on the build command line.
#To optimize build times the API list is sorted in descending order of use.

env.PublishProtectedApi( 'RF_COMMON_INC', [
    '${INC_ROOT}/rfa/rf/common/rf/nv/inc',
    '${INC_ROOT}/rfa/rf/task/common/inc',    
    ])
	
rfdevice_qfe2340_public_api_list = [	       
        ('MMCP',                'PUBLIC'),
        ('MMCP',                'MMCP'),
        ('FW',                  'RF'),
		('FW',                  'LTE'),
        ('FW',                  'WCDMA'),                
        ('FW',                  'GERAN'),
        ('FW',                  'TARGET'),
		('FW',                  'COMMON'),
        ('GERAN',               'GERAN'),
        ('MCS',                 'MCS'),        
        ('RFNV',                'RFNV'),
        ('RFA',                 'COMMON'),        
        ('RFA',                 'LM'),
        ('RFA',                 'GSM'),
        ('RFA',                 'WCDMA'),
		('RFA',                 'CDMA'),
		('RFA',                 'LTE'),
        ('RFDEVICE_INTERFACE',  'RFDEVICE_INTERFACE'),
        ('RFDEVICE_QFE2340',    'RFDEVICE_QFE2340'),        
        ]
		
for api_area,api_name in rfdevice_qfe2340_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

env.RequireRestrictedApi(['RFDEVICE_QFE2340_VIOLATIONS'])

#Start AU paths that were included in the top level pasted block
env.PublishProtectedApi('RFDEVICE_INC',[
    '${RFDEVICE_QFE2340_ROOT}/common/inc',
    '${RFDEVICE_QFE2340_ROOT}/common/protected',
    ])

env.RequireProtectedApi([
    'RF_COMMON_INC',
    'RF_DEVICE_INC',
    ])
	
env.RequirePublicApi(['DEVICE_RFFE'],area='RFA')


env.RequirePublicApi(['RFLM'],area='RFLM')

env.RequirePublicApi(['RFMODEM'], area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

env.RequirePublicApi(['RFMODEM_BOLT'],area='RFMODEM_BOLT')

if 'NO_MODEM_FOLDER' in env or 'USES_NO_MODEM_FOLDER' in env:
        env.RequireRestrictedApi([ 'RFDEVICE_INTERFACE','RFDEVICE_NO_MODEM_FOLDER'])


#delete from here through end of the file when DIME modem folder is removed 
#  (keep last line with LoadSoftwareUnits)

env.PublishPrivateApi( 'RFA_RF_VIOLATIONS', [
    '${RFDEVICE_QFE2340_ROOT}/build/cust',
    ])


#----------------------------------------------------------------------------#
# Export Protected API to RFA folder. This will be visible only within
# RFA folder
#----------------------------------------------------------------------------#

env.PublishProtectedApi( 'QFE2340_LIB_PROTECTED', [
    '${RFDEVICE_QFE2340_ROOT}/common/protected',
    '${RFDEVICE_QFE2340_ROOT}/common/test',	
    ])

env.PublishProtectedApi( 'RF_DEVICE_INC', [
    '${INC_ROOT}/rfdevice_qfe2340/common/inc',
    '${INC_ROOT}/rfdevice_qfe2340/common/protected',
    '${RFDEVICE_QFE2340_ROOT}/common/test',		

	
# Violations - needed for compile.
# rfdevice_cdma_interface.h	
# rfdevice_cmn_intf.h		      
# rfdevice_gnss_intf.h		
    '${INC_ROOT}/modem/rfa/device/rfdev_intf/inc',
# rfgnss_msm.h
#    '${INC_ROOT}/modem/rfa/rf/hal/gnss/gen8a/inc',
# rfcommon_msg.h
# rfcommon_locks.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/core/inc/',
# rf_cdma_state_types.h
#rf_cdma_state_types.h
#rf_cdma_wb_rxf.h
#rf_cdma_state_types.h
#rf_cdma_utils.h
    '${INC_ROOT}/modem/rfa/rf/cdma/common/rf/inc',
#rf_hal_sbi.h
    '${INC_ROOT}/modem/rfa/rf/hal/nikel/common/inc',
#rfcommon_nv_mm.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/nv/inc',
#rfc_card.h
    '${INC_ROOT}/modem/rfa/rf/common/rf/rfc/inc',
#rfc_card_gsm.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/rfc/inc',
#rfgsm_mdsp.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_gsm/inc',
#rfcommon_msm.h
    '${INC_ROOT}/modem/rfa/rf/hal/nikel/common/inc',
#rfc_card_gsm.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/rfc/inc',
#rfgsm_core_tx.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/core/src',
#rfc_bsp.h
    '${INC_ROOT}/modem/rfa/rfc/target/msm8930/inc',
#rfc_msm_signal_info_ag.h	
	'${INC_ROOT}/rfa/rfc/dime/target/msm8974/inc',
	'${INC_ROOT}/rfa/rfc/dime/target/mdm9x25/inc',
	'${INC_ROOT}/modem/rfa/rfc/target/msm8974/inc',
	'${INC_ROOT}/modem/rfa/rfc/target/mdm9x25/inc',
	'${INC_ROOT}/modem/rfa/rfc/dime/target/msm8974/inc',
	'${INC_ROOT}/modem/rfa/rfc/dime/target/mdm9x25/inc',	
#rfc_common.h
    '${INC_ROOT}/modem/rfa/rfc/common/inc',
    '${INC_ROOT}/rfa/rfc/common/inc',
#rfd_sbi.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/protected',
#rfgsm_nv_cmn.h
    '${INC_ROOT}/modem/rfa/rf/gsm/rf/nv/inc',
#rflte_core_util.h
    '${INC_ROOT}/rftech_lte/api',
#rfd_grfc.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/inc',
#rfd_grfc_modem.h
    '${INC_ROOT}/modem/rfa/rf/rfd/nikel/inc',
#rfd_grfc.h
    '${INC_ROOT}/modem/rfa/rf/rfd/common/inc',
    '${INC_ROOT}/rfa/rf/rfd/common/inc',
#rfd_grfc_modem.h
    '${INC_ROOT}/modem/rfa/rf/rfd/nikel/inc',
    '${INC_ROOT}/rfa/rf/rfd/nikel/inc',
#rf_task.h
#    '${INC_ROOT}/modem/rfa/rf/task/common/inc',
#   '${INC_ROOT}/modem/rfa/rf/lte/rf/nv/inc',
#rfc_card_lte.h
#    '${INC_ROOT}/modem/rfa/rf/lte/rf/rfc/inc',
#rflte_mdsp.h
#    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_lte/inc',
#rfc_card_lte.h
#    '${INC_ROOT}/modem/rfa/rf/lte/rf/rfc/inc',
#rfc_card_wcdma.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/rfc/inc',
#rfm_internal.h
#    '${INC_ROOT}/modem/rfa/rf/common/rf/mc/inc',
#rfwcdma_core_txplim.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/core/src',
#rfwcdma_mdsp.h
    '${INC_ROOT}/modem/rfa/rf/mdsp/qdsp6_wcdma/inc',
#rfnv_wcdma.h
    '${INC_ROOT}/modem/rfa/rf/wcdma/rf/nv/inc',
#rfa_variation.h
    '${INC_ROOT}/modem/rfa/variation/inc',
#rfa_local_defines.h
    '${INC_ROOT}/modem/rfa/cust/inc',
#rfc_card_tdscdma.h
#    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/rfc/inc',
#rfnv_tdscdma.h
#    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/nv/inc',
#rf_tdscdma_core_util.h
#    '${INC_ROOT}/modem/rfa/rf/tdscdma/rf/core/inc',
#rf_buffer_intf.h
    '${INC_ROOT}/modem/rfa/rf/hal/common/inc',
#Rfc_card_tdscdma.h
    '${INC_ROOT}/rftech_tdscdma/api',	
    ])

if (('USES_DIME_2_0' in env) or ('USES_JOLOKIA_MODEM' in env) or ('USES_TABASCO_MODEM' in env) or ('USES_DIME_1_0' in env  and 'USES_WTR1625' in env)):	
	env.LoadSoftwareUnits( ) 


