#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2012 - 2014 Qualcomm Technologies, Inc. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies, Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies, Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/rftech_cdma/build/modem_rfa_cdma.scons#1 $
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 12/16/14   tod     - O2 compiler optimization on hexagon 6.4.04 and greater toolchains
# 10/29/14   pk      Compiler error fix on 1x compiled out build 
# 10/20/14   chenh   Enabled compiler warings to errors
# 10/16/14   dej     Clean-up SCons and add support for TABASCO
# 09/11/14   ndb     Add 'USES_JOLOKIA_MODEM' for 'FEATURE_RF_HAS_QTUNER'
# 06/30/14   dr      Added area RFMODEM_JOLOKIA
# 06/10/14   JJ      Added area RFMODEM_DIMEPM
# 02/27/14   kg      Treat warnings as errors
# 01/06/14   adk     Added support for antenna tuners
# 11/06/13   JJ      Removed FEATURE_RF_HAS_XPT_SUPPORT
# 10/07/13   SAR     Updated to include missing path.
# 08/08/13   JJ      Add FEATURE_RF_BOLT_PRE_SILICON for bolt rumi
# 07/29/13   pl      Add FEATURE_RF_ASDIV depending on if MODEM_ANTENNA_SWITCH_DIVERSITY is defined
# 07/30/13   hdz     Added required RFLM public APIs
# 07/10/13   aro     Published RF Factory API
# 06/20/13   ra      Disable QTuner for Bolt
# 05/20/13   zhw     CDMA scons modem directory clean up
# 05/16/13   spa     Update scons for DI.2.0 for XPT featurization 
# 03/13/13   aro     Publish test header file as protected API to be used
#                    in CDMA module
# 02/20/13   lp      Enabled XPT for TR.DSDA
# 02/08/13   Saul    CDMA. Enable new 1XHDR EPT/ET architecture.
# 02/06/13   hdz     Undefine FEATURE_RF_HAS_XPT_SUPPORT for TRI
# 01/16/13   Saul    CDMA. Enabled EPT/ET tempcomp.
# 01/14/13   hdz     Enable FEATURE_RF_HAS_XPT_SUPPORT in mainline
# 01/10/13   hdz     Enabled FEATURE in CDMA RF component
# 12/27/12   bmg     Created for new CDMA RF component
#===============================================================================

Import('env')
if ('USES_CDMA' not in env):
   Return() 

if 'HEXAGON_TOOLS' in env:
    env.MergeFlags('-Wshadow')
	
import os

#usage:  ENV_UPDATE_RFA=CHIPSET,=mdm9x15,USES_NO_DEBUG,delete,USES_HI_SPEED,add
if ARGUMENTS.get('ENV_UPDATE_RFA'):

        env_update_string = ARGUMENTS.get('ENV_UPDATE_RFA')
        
        env_update_list = env_update_string.split(',')
        
        item_total = len(env_update_list)
        
        list_index = 0
        
        #note if list is not even number of items, last odd item is ignored
        while list_index < item_total-1:
                
                item            = env_update_list[list_index]  
                value           = env_update_list[list_index+1]
                list_index      += 2
                                
                if(value == 'add'):
                          env[str(item)] = 'yes'
                          print "adding",item,"to env"                                          
                          
                elif(value == 'delete'):
                          del env[str(item)]
                          print "deleting",item,"from env"
                
                else:
                        if(value[0] != '='):
                                print "missing leading = in",value
                                print "not updating ",item
                                
                        else:
                                value2 = value[1:len(value)]
                                env[str(item)] = value2
                                print "now setting",item,value

#end command line option processing
                                


#The order of APIs in the rfa_public_api_list determines the order the paths are listed on the build command line.
#To optimize build times the API list is sorted in descending order of use.

rfa_public_api_list = [
#        ('CORE',                'SYSTEMDRIVERS'),
#        ('CORE',                'KERNEL'),
        ('RFA',                 'COMMON'),
        ('CORE',                'DAL'),
        ('RFDEVICE_INTERFACE',  'RFDEVICE_INTERFACE'),
        ('RFA',                 'CDMA'),
#        ('MMCP',                'PUBLIC'),
        ('MCS',                 'MCS'),
        ('LTE',                 'LTE'),
        ('MMCP',                'MMCP'),
        ('FW',                  'RF'),
        ('FW',                  'COMMON'),
        ('FW',                  'WCDMA'),
        ('FW',                  'C2K'),
        ('FW_CCS',              'FW_CCS'),
        ('FW_COMMON',           'FW_COMMON'),
        ('FW_WCDMA',            'FW_WCDMA'),
        ('FW_C2K',              'FW_C2K'),
        ('RFA',                 'MEAS'),
        ('CORE',                'DEBUGTOOLS'),
        ('GERAN',               'GERAN'),
#        ('GERAN_RFA',           'DEPRECATED'),
        ('RFA',                 'GSM'),
        ('RFA',                 'LM'),
        ('RFA',                 'LTE'),
        ('FW',                  'TARGET'),
        ('FW',                  'GERAN'),
        ('FW_GERAN',            'FW_GERAN'),
        ('CORE',                'MPROC'),
        ('CORE',                'MEMORY'),
        ('CORE',                'SERVICES'),
        ('RFA',                 'WCDMA'),
        ('CORE',                'POWER'),
        ('ONEX',                'PUBLIC'),
        ('RFNV',                'RFNV'),
        ('RFFACTORY',           'RFFACTORY'),
        ('RFDEVICE_WTR1605',    'RFDEVICE_WTR1605'),
        ('FW',                  'LTE'),
        ('FW_LTE',              'FW_LTE'),
        ('WCDMA',               'WCDMA'),
        ('FW',                  'TDSCDMA'),
        ('FW_TDSCDMA',          'FW_TDSCDMA'),
        ('RFA',                 'GNSS'),
        ('UTILS',               'OSYS'),
        ('AVS',                 'MVS'),
        ('HDR',                 'HDR'),
        ('TDSCDMA',             'TDSCDMA'),
        ('RFA',                 'TDSCDMA'),
        ('ONEX',                'ONEX'),
        ('CORE',                'BUSES'),
        ('WCDMA',               'PUBLIC'),
        ('UIM',                 'UIM'),
        ('CORE',                'STORAGE'),
        ('RFDEVICE_QFE1320',    'RFDEVICE_QFE1320'),
        ('UTILS',               'A2'),
        ('UIM',                 'PUBLIC'),
        ('GPS',                 'GPS'),
        ('RFDEVICE_WTR2605',    'RFDEVICE_WTR2605'),
        ('MCS',                 'PUBLIC'),
        ('HDR',                 'PUBLIC'),
        ('MPOWER',              'MPOWER'),
        ('TDSCDMA',             'PUBLIC'),
        ('RFDEVICE_WFR2600',    'RFDEVICE_WFR2600'),
        ('CORE',                'HWENGINES'),
        ('RFA_RF',              'TUNER'),
        ('QMIMSGS',             'RFRPE'),
        ('UTILS',               'COMMON'),
        ]

for api_area,api_name in rfa_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

env.RequireRestrictedApi(['RFTECH_CDMA_VIOLATIONS'])

env.RequirePublicApi([
        'RFA',
        ],
        area='RFA')

env.RequirePublicApi([
        'RFLM',
        ],
        area='RFLM')

env.RequirePublicApi(['RFMODEM'], area=env.get('RF_GLOBALS')['RFMODEM_AREA'])

if 'USES_FEATURE_QFE1320' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QFE1320'])
        
if 'USES_FEATURE_QFE2320' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QFE2320'])     

if 'USES_FEATURE_QFE1510_HDET' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QFE1510_HDET'])

if ('USES_FEATURE_QTUNER' in env):
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QTUNER'])

if 'USES_FEATURE_DPD' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_DPD'])

if 'USES_FEATURE_XPT' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_XPT_SUPPORT'])
   
if 'USES_FEATURE_XPT_CDMA_TEMP' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_XPT_CDMA_TEMP'])

if 'USES_1X_EPT_CAL' in env:
        env.Append(CPPDEFINES = ['RF_1X_EPT_CAL_TEMP'])
   
if 'USES_1X_DIME_SAMPLE_CAPTURE' in env:
        env.Append(CPPDEFINES = ['RF_1X_DIME_SAMPLE_CAPTURE'])
   
if 'USES_COMMON_DIME_SAMPLE_CAPTURE' in env:
        env.Append(CPPDEFINES = ['RF_COMMON_DIME_SAMPLE_CAPTURE'])
           
if 'USES_FEATURE_RFA_TP_CARDS' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_TP_CARDS'])
                
if 'USES_FTM_HWTC_DEBUG_ONLY_SECURITY_HOLE' in env:
                print "Add USES_FTM_HWTC"
                env.Replace(USES_FTM_HWTC = 'yes')
                print "Enable FEATURE_FTM_HWTC"
                env.Append(CPPDEFINES = ['FEATURE_FTM_HWTC'])

if 'USES_FEATURE_TX_INT_CAL' in env:
        env.Append(CPPDEFINES = ['FEATURE_RF_SUPPORTS_TX_INT_CAL'])

if ( 'USES_DIME_1_0' in env ) or ( 'USES_BOLT_1_0' in env ) or ( 'USES_JOLOKIA_MODEM' in env ):
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QTUNER'])

if ( 'USES_DIME_1_1' in env ):
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QTUNER'])

if ( 'USES_DIME_2_1' in env ):
        env.Append(CPPDEFINES = ['FEATURE_RF_HAS_QTUNER'])

# antenna switch diversity
if ('USES_MODEM_ANTENNA_SWITCH_DIVERSITY' in env ):
        env.Append(CPPDEFINES = ['FEATURE_RF_ASDIV'])
		
#-------------------------------------------------------------------------------
# Enable warnings -> errors
if 'USES_INTERNAL_BUILD' in env:
   env = env.Clone(HEXAGONCC_WARN = "${HEXAGONCC_WARN} -Werror", 
                   HEXAGONCXX_WARN = "${HEXAGONCCXX_WARN} -Werror")		
#-------------------------------------------------------------------------------
# Remove this line and if statement once 6.4.04 toolchain has been released
if env['HEXAGON_RTOS_RELEASE'] >= '6.4.04':
   # Enable -O2 optimization
   env.Replace(HEXAGONCC_OPT = "${HEXAGON_OPT_2}")

#-------------------------------------------------------------------------------
# Bolt Pre-Silicon  
if('USES_BOLT_1_0' in env):
        env.Append(CPPDEFINES = ['FEATURE_RF_BOLT_PRE_SILICON'])


#----------------------------------------------------------------------------#
# Export Protected API to RFA folder. This will be visible only within
# RFA folder
#----------------------------------------------------------------------------#

env.PublishProtectedApi( 'RFTECH_CDMA_INC', [
    '${RFTECH_CDMA_ROOT}/api',
    '${RFTECH_CDMA_ROOT}/1x/ftm/inc',
    '${RFTECH_CDMA_ROOT}/1x/hwtc/inc',
    '${RFTECH_CDMA_ROOT}/1x/rf/inc',
    '${RFTECH_CDMA_ROOT}/common/ftm/inc',
    '${RFTECH_CDMA_ROOT}/common/hwtc/inc',
    '${RFTECH_CDMA_ROOT}/common/rf/inc',
    '${RFTECH_CDMA_ROOT}/hdr/ftm/inc',
    '${RFTECH_CDMA_ROOT}/hdr/hwtc/inc',
    '${RFTECH_CDMA_ROOT}/hdr/rf/inc',
    '${RFTECH_CDMA_ROOT}/qdsp6_cdma/inc',
    ])

env.PublishProtectedApi( 'RFTECH_CDMA_TEST_INC', [
    '${RFTECH_CDMA_ROOT}/common/rf/test',
    ])

env.RequireProtectedApi(['RFTECH_CDMA_INC'])

env.RequireProtectedApi(['RFTECH_CDMA_TEST_INC'])

env.LoadSoftwareUnits( ) 
