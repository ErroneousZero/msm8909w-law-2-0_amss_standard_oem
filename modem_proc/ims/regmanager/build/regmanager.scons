#===============================================================================
#
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2012-2013 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#------------------------------------------------------------------------------
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 06/18/10   CM      First release
# 03/05/12   SS      File cleanup
#===============================================================================
Import('env')

# Execute the sconsript in which the variables needs to be imported for the Current Script
# and export the current environment to that script into which the variables will be exported to the it's export list

# Import the required Variables from the export list of the Environment to which the other script file has added

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

# ------------------------------------------------------------------------------
# Sepcify the list of required include Paths
#-------------------------------------------------------------------------------
env.PublishPrivateApi('IMS_REGMGR_INC', [ 
"${INC_ROOT}/modem/ims/regmanager/src/amss",
])

env.PublishPrivateApi('IMS_REGMGR_PROCESS_INC', [ 
"${INC_ROOT}/modem/ims/imsprocess/inc",
])

#-------------------------------------------------------------------------------
# Internal depends within IMS
#-------------------------------------------------------------------------------
IMS_API = ['IMS_DPL',
		   'IMS_DPL_MEDIA',
		   'IMS_FRAMEWORK',
		   'IMS_IMSCORE',
		   'IMS_SIP',
		   'IMS_SIGCOMP',
		   'IMS_REGMGR',
		   'IMS_QIPCALL',
		   'IMS_PS_MEDIA_SDP',
		   'IMS_SETTINGS',
		   'IMS_PRESENCE',
		   'IMS_PS_MEDIA_RTP_CORE',
		   'IMS_UT',
		   'IMS_AUTO_CONFIG',
		   'IMS_APCS',
		   'IMS_PM']
		   
env.RequireProtectedApi(IMS_API)

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
IMS_REGMANAGER_FLAGS = ['MAF_NO_GLOBALS',
						'QP_DONOT_OVERLOAD_NEW_DELETE',
						'QMAF',
						'QP_ENABLE_MMI_MODULE',
						'FORCE_STATIC',
						'AEE_STATIC',
						'USE_SIMPLE_LOGGING',
						'IMS_AMSS_STATIC_BUILD',
						'FEATURE_AMSS_DPL',
						'QP_ENABLE_SIGNALS',
						'XDM_INCLUDE_GROUPMEMBER']

IMS_REGMANAGER_LIB_CPP_SOURCES = [
	'${BUILDPATH}/AppManager.cpp',
	'${BUILDPATH}/CSCFListManagement.cpp',
	'${BUILDPATH}/OptionsManager.cpp',
	'${BUILDPATH}/OptionsRequester.cpp',		
	'${BUILDPATH}/qpRegistrationMonitor.cpp',
	'${BUILDPATH}/RegFunctions.cpp',
	'${BUILDPATH}/RegInit.cpp',
	'${BUILDPATH}/RegisterManager.cpp',
	'${BUILDPATH}/RegularExpressions.cpp',
	'${BUILDPATH}/ImsRegManagerCardModule.cpp',
	'${BUILDPATH}/PCSCFListHandler.cpp',
	'${BUILDPATH}/PDPRATHandler.cpp',
	'${BUILDPATH}/amss/AMSSRegInit.cpp',
	'${BUILDPATH}/amss/ImsRegmanager_FwTask.cpp',
	'${BUILDPATH}/RegistrationHandler.cpp',
	'${BUILDPATH}/RegMonitorHandler.cpp',
	'${BUILDPATH}/RMNetHandler.cpp',
	'${BUILDPATH}/SingoRMEvManager.cpp',
        '${BUILDPATH}/RegInfo.cpp',
	'${BUILDPATH}/PDPManager.cpp',
	'${BUILDPATH}/RegistrationHandlerVoLTE.cpp',
	'${BUILDPATH}/RegistrationHandlerWLAN.cpp',
	'${BUILDPATH}/PDPRATHandlerVoLTE.cpp',
	'${BUILDPATH}/PDPRATHandlerWLAN.cpp'
]

# Append the list of Macro Definitions as flags to the Compiler so that it will do a conditional compilation
env.Append( CPPDEFINES = IMS_REGMANAGER_FLAGS )

# Create the library with the specified name and path with the list of objects to be added to that library
# and add the library to the Apps Image

env.AddBinaryLibrary(['MODEM_MODEM'], '${BUILDPATH}/ims_regmanager', [IMS_REGMANAGER_LIB_CPP_SOURCES])