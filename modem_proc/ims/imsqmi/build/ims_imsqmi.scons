#===============================================================================
#
# TMC Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/ims/imsqmi/build/ims_imsqmi.scons#1 $
#  $DateTime: 2016/12/13 08:00:34 $
#  $Author: mplcsds1 $
#  $Change: 11985224 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================

# Import the Environment Variable for the Current Script
Import('env')

#-------------------------------------------------------------------------------
# Building feature flags based on features being built
#-------------------------------------------------------------------------------

# Execute the sconsript in which the variables needs to be imported for the Current Script
# and export the current environment to that script into which the variables will be exported to the it's export list

# Import the required Variables from the export list of the Environment to which the other script file has added


#-------------------------------------------------------------------------------
# Set the Source PATH location
#-------------------------------------------------------------------------------
SRCPATH = '../src'


# Set the Build path Location where the .o's and .lib's has to go
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.PublishPrivateApi('IMS_QMI_INC', [ 
"${INC_ROOT}/modem/ims/imsqmi/inc",
])

IMS_API = [
	'IMS_DPL',
	'IMS_PROCESS',
]

env.RequireProtectedApi(IMS_API)

env.RequirePublicApi(['IMSS','IMSP','IMSVT','IMSA', 'IMSDCM','IMSRTP','LOC'], area='API')

IMS_QMI_FLAGS = [
'MAF_NO_GLOBALS',
'QMAF',]

IMS_QMI_SETTINGS_C_SOURCES          = ['${BUILDPATH}/ims_qmi_settings_service.c']
IMS_QMI_PRESENCE_C_SOURCES          = ['${BUILDPATH}/ims_qmi_presence_service.c']
IMS_QMI_VT_C_SOURCES                = ['${BUILDPATH}/ims_qmi_video_service.c']
IMS_QMI_REGISTRATION_APPS_C_SOURCES = ['${BUILDPATH}/ims_qmi_registration_apps_service.c']
IMS_QMI_DCM_C_SOURCES               = ['${BUILDPATH}/ims_qmi_dcm_client.c']
IMS_QMI_IMSRTP_CLIENT_C_SOURCES     = ['${BUILDPATH}/ims_qmi_imsrtp_client.c']
IMS_QMI_IMSRTP_C_SOURCES            = ['${BUILDPATH}/ims_qmi_imsrtp.c']
IMS_QMI_LOC_C_SOURCES               = ['${BUILDPATH}/ims_qmi_loc_client.c']

IMS_QMI_LIB_SOURCES = []

#----------------------------------------------------------------------------------------#
#                   Setting service specific file inclusion                              #
#----------------------------------------------------------------------------------------#
#if 'USES_IMS_QMI_SETTINGS_SERVICE' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_SETTINGS_C_SOURCES

#----------------------------------------------------------------------------------------#
#                   Presence service specific file inclusion                             #
#----------------------------------------------------------------------------------------#
#if 'USES_IMS_QMI_PRESENCE_SERVICE' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_PRESENCE_C_SOURCES
	
#----------------------------------------------------------------------------------------#
#                   VT service specific file inclusion                                   #
#----------------------------------------------------------------------------------------#
#if 'FEATURE_IMS_QMI_VIDEO_SERVICE' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_VT_C_SOURCES

#----------------------------------------------------------------------------------------#
#                   Registration Apps service specific file inclusion                    #
#----------------------------------------------------------------------------------------#
#if 'USES_IMS_QMI_REGISTRATION_APPS_SERVICE' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_REGISTRATION_APPS_C_SOURCES

#----------------------------------------------------------------------------------------#
#                   DCM Client specific file inclusion                                   #
#----------------------------------------------------------------------------------------#
#if 'FEATURE_IMS_QMI_DCM_QCCI_CLIENT' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_DCM_C_SOURCES

#----------------------------------------------------------------------------------------#
#                   RTP client specific file inclusion                                   #
#----------------------------------------------------------------------------------------#
#if 'FEATURE_IMS_QMI_IMSRTP' in env:
IMS_QMI_LIB_SOURCES  += IMS_QMI_IMSRTP_CLIENT_C_SOURCES
IMS_QMI_LIB_SOURCES += IMS_QMI_IMSRTP_C_SOURCES

#----------------------------------------------------------------------------------------#
#                   LOC Client specific file inclusion                                   #
#----------------------------------------------------------------------------------------#
#if 'FEATURE_IMS_QMI_LOC_QCCI_CLIENT' in env:
IMS_QMI_LIB_SOURCES += IMS_QMI_LOC_C_SOURCES

###########################################################################################

# Append the list of Macro Definitions as flags to the Compiler so that it will do a conditional compilation
env.Append(CPPDEFINES = IMS_QMI_FLAGS)
# Create the library with the specified name and path with the list of objects to be added to that library
# and add the library to the Modem Image
env.AddBinaryLibrary(['MODEM_MODEM'], '${BUILDPATH}/ims_qmi', [IMS_QMI_LIB_SOURCES])
