#===============================================================================
#
# TMC Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/ims/imsprocess/build/ims_imsprocess.scons#1 $
#  $DateTime: 2016/12/13 08:00:34 $
#  $Author: mplcsds1 $
#  $Change: 11985224 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

# Execute the sconsript in which the variables needs to be imported for the Current Script
# and export the current environment to that script into which the variables will be exported to the it's export list


# Import the required Variables from the export list of the Environment to which the other script file has added
#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src/amss'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.PublishPrivateApi('IMS_IMSPROCESS_INC', [ 
"${INC_ROOT}/modem/ims/imsprocess/inc",
"${INC_ROOT}/modem/ims/framework/inc",
"${INC_ROOT}/modem/cne/utils/inc",
])

IMS_API = [
  'IMS_DPL',
  'IMS_QMI',
]

env.RequireProtectedApi(IMS_API)

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

IMS_PROCESS_FLAGS = [
'MAF_NO_GLOBALS',
'QMAF',]


IMS_IMSPROCESS_CPP_SOURCES=[
	'${BUILDPATH}/ims_task.cpp',
	'${BUILDPATH}/ims_task_cb.cpp',
	'${BUILDPATH}/ims_task_common.cpp',
]
IMS_IMSPROCESS_C_SOURCES =[
]


if 'USES_IMS_MEDIA_PROCESS' in env:
   IMS_IMSPROCESS_CPP_SOURCES += '${BUILDPATH}/ims_media_task.cpp',

#if 'USES_IMS_PROCESS' in env:
#	env.Append(CPPDEFINES = ["FEATURE_IMS_PROCESS",])

if 'USES_IMS_MEDIA_PROCESS' in env:
   env.Append(CPPDEFINES = ["FEATURE_IMS_MEDIA_PROCESS",])

env.Append(CPPDEFINES = IMS_PROCESS_FLAGS)

# Create the library with the specified name and path with the list of objects to be added to that library
# and add the library to the Apps Image

env.AddBinaryLibrary(['MODEM_MODEM'], '${BUILDPATH}/ims_imsprocess', [IMS_IMSPROCESS_CPP_SOURCES,IMS_IMSPROCESS_C_SOURCES])
# Build image for which this task belongs
RCINIT_IMS = ['MODEM_MODEM']

# RC Init Function Dictionary
RCINIT_INIT_IMS = {
            'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
            'init_name'           : 'imstask_init',
            'init_function'       : 'imstask_init',            
    }	

# RC Init Task Dictionary
RCINIT_TASK_IMS = {
            'thread_name'          : 'ims',
            'sequence_group'       : env.subst('$MODEM_UPPERLAYER'),
            'stack_size_bytes'     : env.subst('$IMS_STKSZ'),
            'priority_amss_order'  : 'IMS_PRI_ORDER',
            'stack_name'           : 'ims_stack',
            'thread_entry'         : 'ims_task',
            'tcb_name'             : 'ims_tcb',
            'cpu_affinity'         : 'REX_ANY_CPU_AFFINITY_MASK',
    }
	 
	 
	 
	 
	 
	 


# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
 env.AddRCInitFunc(RCINIT_IMS, RCINIT_INIT_IMS)
 env.AddRCInitTask(RCINIT_IMS , RCINIT_TASK_IMS)
