# --------------------------------------------------------------------------- #
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/ims/dpl_media/build/ims_dpl_media.scons#1 $
# --------------------------------------------------------------------------- #
# Copyright (c) 2009 Qualcomm Technologies Incorporated.
#
# All Rights Reserved. Qualcomm Confidential and Proprietary
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
# --------------------------------------------------------------------------- #
Import('env')
if 'USES_PSMEDIA' not in env:
	Return()
#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = '../src'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

env.PublishPrivateApi('IMS_DPL_MEDIA_INC', [ 
"${INC_ROOT}/modem/ims/dpl_media/src",
"${INC_ROOT}/modem/ims/dpl/src",
"${INC_ROOT}/multimedia/apr/utils/inc",
"${INC_ROOT}/multimedia/apr/osal/inc",
])

#-------------------------------------------------------------------------------
# Internal depends within IMS
#-------------------------------------------------------------------------------
IMS_API = [
	'IMS_DPL',
	'IMS_DPL_MEDIA',
]

env.RequireProtectedApi(IMS_API)

#-------------------------------------------------------------------------------
# Necessary Multimedia Public API's
#-------------------------------------------------------------------------------
MM_PUBLIC_APIS = [
  'AUDIO',
	'APR',
	'CVD',
	'MMUTILS',
	'VOICEMEM',	
	'VOICELOG',	
	'COMMON',
	'VOICECFG',
]


env.RequirePublicApi(MM_PUBLIC_APIS, area='multimedia')


#---------------------------------AUDIO-----------------------------------------

IMS_DPL_MEDIA_LIB_AUDIO_COMMON_CPP_SOURCES=[
]

IMS_DPL_MEDIA_LIB_AUDIO_COMMON_C_SOURCES = ['${BUILDPATH}/qpaudio.c']

IMS_DPL_MEDIA_LIB_AUDIO_COMMON_SVS_C_SOURCES = ['${BUILDPATH}/qpaudio_svs.c']

IMS_DPL_MEDIA_LIB_AUDIO_AMSS_CPP_SOURCES=[
]

IMS_DPL_MEDIA_LIB_AUDIO_AMSS_C_SOURCES = [
   '${BUILDPATH}/qpDplQdj.c',
   '${BUILDPATH}/qpEvsPreviewFrame.c'
]

#---------------------------------VIDEO-----------------------------------------
IMS_DPL_MEDIA_LIB_VIDEO_COMMON_CPP_SOURCES=[
]

IMS_DPL_MEDIA_LIB_VIDEO_COMMON_C_SOURCES = []

IMS_DPL_MEDIA_LIB_VIDEO_AMSS_CPP_SOURCES=[	
]
IMS_DPL_MEDIA_LIB_VIDEO_AMSS_C_SOURCES=[
]

#------------------------------MEDIA COMMON----------------------------------------

IMS_DPL_MEDIA_LIB_MEDIA_COMMON_CPP_SOURCES=[
]

IMS_DPL_MEDIA_LIB_MEDIA_COMMON_C_SOURCES=[
    #'${BUILDPATH}/qpVideo.c'
]

IMS_DPL_MEDIA_LIB_MEDIA_AMSS_CPP_SOURCES=[
]

IMS_DPL_MEDIA_LIB_MEDIA_AMSS_C_SOURCES=[
]

#-------------------------------------------------------------------
#                   Media                
#-------------------------------------------------------------------
if not 'USES_IMS_NO_MEDIA' in env:
	IMS_DPL_MEDIA_LIB_CPP_SOURCES=IMS_DPL_MEDIA_LIB_MEDIA_COMMON_CPP_SOURCES
	IMS_DPL_MEDIA_LIB_C_SOURCES=IMS_DPL_MEDIA_LIB_MEDIA_COMMON_C_SOURCES
	if not 'USES_IMS_NO_AMSS' in env:
		IMS_DPL_MEDIA_LIB_CPP_SOURCES+=IMS_DPL_MEDIA_LIB_MEDIA_AMSS_CPP_SOURCES
		IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_MEDIA_AMSS_C_SOURCES

#-------------------------------------------------------------------
#                   Audio                
#-------------------------------------------------------------------
if not 'USES_IMS_NO_AUDIO' in env:
	IMS_DPL_MEDIA_LIB_CPP_SOURCES+=IMS_DPL_MEDIA_LIB_AUDIO_COMMON_CPP_SOURCES
	if not 'USES_IMS_NO_AMSS' in env:
		IMS_DPL_MEDIA_LIB_CPP_SOURCES+=IMS_DPL_MEDIA_LIB_AUDIO_AMSS_CPP_SOURCES
		IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_AUDIO_AMSS_C_SOURCES
	
if 'USES_NO_IMS_SVS' in env:	
	IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_AUDIO_COMMON_C_SOURCES
else:	
	IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_AUDIO_COMMON_SVS_C_SOURCES
	

#-------------------------------------------------------------------
#                   Video                
#-------------------------------------------------------------------
if not 'USES_IMS_NO_VIDEO' in env:
	IMS_DPL_MEDIA_LIB_CPP_SOURCES+=IMS_DPL_MEDIA_LIB_VIDEO_COMMON_CPP_SOURCES
	IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_VIDEO_COMMON_C_SOURCES
	if not 'USES_IMS_NO_AMSS' in env:
		IMS_DPL_MEDIA_LIB_CPP_SOURCES+=IMS_DPL_MEDIA_LIB_VIDEO_AMSS_CPP_SOURCES
		IMS_DPL_MEDIA_LIB_C_SOURCES+=IMS_DPL_MEDIA_LIB_VIDEO_AMSS_C_SOURCES

###########################################################################################
# Create the library with the specified name and path with the list of objects to be added to that library
# and add the library to the Modem Image
env.AddBinaryLibrary(['MODEM_MODEM'], '${BUILDPATH}/ims_dpl_media', [IMS_DPL_MEDIA_LIB_CPP_SOURCES,IMS_DPL_MEDIA_LIB_C_SOURCES])
																				


