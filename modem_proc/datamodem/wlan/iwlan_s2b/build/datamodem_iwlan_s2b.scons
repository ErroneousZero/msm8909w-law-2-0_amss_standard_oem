#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2012-2013 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/datamodem/wlan/iwlan_s2b/build/datamodem_iwlan_s2b.scons#1 $
#  $DateTime: 2016/12/13 08:00:03 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 10/09/15   vidhiyal     Disabled IWLAN_S2B feature for 9607 chipset
# 12/18/13   abathwal     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

if 'USES_DATAMODEM_IWLAN_S2B' not in env:
     Return()

#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")
	

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'SERVICES',
    'SYSTEMDRIVERS',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'DATA',
    'UTILS'
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'MMODE',
    'GERAN',
    'UIM',
    'MDSP',
    'UTILS',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#env.PublishPrivateApi('IWLAN_S2B', '${INC_ROOT}/modem/datamodem/wlan/iwlan_s2b/src')

#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_WLAN'])
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#import pdb; pdb.set_trace()

DS_IWLAN_S2B_LIB_SOURCES = []

#-------------------------------------------------------------------------------
# Do STM compilation and Build!
#-------------------------------------------------------------------------------
# The STM2 builder generates 1 .C file and 2 .h files from the given .stm file.
# These files will get autogenerated at the BUILDPATH .i.e <VU>\build\modem_amss\....
env.STM2('${BUILDPATH}/__ds_iwlan_s2b_pdn_sm_int.c', SRCPATH + '/src/ds_iwlan_s2b_pdn_sm.stm')
env.Append(CPPPATH = '${BUILDPATH}')
env.Append(CPPPATH = '${DATAMODEM_ROOT}/wlan/iwlan_s2b/build/${BUILDPATH}')
	 
#code shipped as binary library
DS_IWLAN_S2B_LIB_FILES = glob(SRCPATH + '/src/*.c')
	       
for filename in DS_IWLAN_S2B_LIB_FILES:
    DS_IWLAN_S2B_LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))
	 
DS_IWLAN_S2B_LIB_SOURCES.append('${BUILDPATH}/__ds_iwlan_s2b_pdn_sm_int.c')

env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_DATAMODEM'],
                    '${BUILDPATH}/lib_iwlan_s2b',
                    [DS_IWLAN_S2B_LIB_SOURCES]
                    )
