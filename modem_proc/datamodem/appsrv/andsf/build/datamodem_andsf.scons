#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2012 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/15/14   youjunf      Initial Version
#===============================================================================
Import('env')

from glob import glob
from os.path import join, basename

#turn off debug if requested
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2")
    env.Replace(HEXAGON_DBG = "-g")
    env.Replace(GCC_DBG = "-g")

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'SERVICES',
    'SYSTEMDRIVERS',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'DATAMODEM',
    'WMS'
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source
MODEM_DATA_ANDSF_SOURCES = [
   '${BUILDPATH}/src/ds_andsf_api.c',
   '${BUILDPATH}/src/ds_andsf_APNPriorityListInfo.cpp',
   '${BUILDPATH}/src/ds_andsf_config.c',
   '${BUILDPATH}/src/ds_andsf_cs_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_event_handler.cpp',
   '${BUILDPATH}/src/ds_andsf_ext_i.cpp',
   '${BUILDPATH}/src/ds_andsf_location_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_location_update.c',
   '${BUILDPATH}/src/ds_andsf_msg.c',
   '${BUILDPATH}/src/ds_andsf_policy_mgr.c',
   '${BUILDPATH}/src/ds_andsf_priority_list_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_query_data_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_ran_meas.c',
   '${BUILDPATH}/src/ds_andsf_cm_if.c',
   '${BUILDPATH}/src/ds_andsf_ran_measurement_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_rule_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_sms.c',
   '${BUILDPATH}/src/ds_andsf_threshold_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_time_manager.cpp',
   '${BUILDPATH}/src/ds_andsf_transporter.c',
   '${BUILDPATH}/src/ds_andsf_utility.cpp',
   '${BUILDPATH}/src/ds_andsf_xml_updater.cpp',
   '${BUILDPATH}/src/ds_andsf_XMLParser.cpp',
   '${BUILDPATH}/src/ds_andsf_wqe_prof_mgr.c'
]

env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_DATAMODEM'], '${BUILDPATH}/andsf', [MODEM_DATA_ANDSF_SOURCES])
