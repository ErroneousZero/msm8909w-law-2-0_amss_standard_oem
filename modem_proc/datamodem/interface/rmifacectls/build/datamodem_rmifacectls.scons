#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2013 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header$
#  $DateTime$
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/11/13   rk      Removed feature mobileap.
# 08/31/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

if 'USES_WPLT' in env or 'USES_DATAMODEM_RMIFACECTLS' not in env:
    Return()

#turn off debug if requested
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2")
    env.Replace(HEXAGON_DBG = "-g")
    env.Replace(GCC_DBG = "-g")

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'GERAN',
    'NAS',
    'UTILS',
    'WCDMA',
    'RFA',
    'GPS',
    'ECALL',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    'GPS',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)


#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
#MODEM_PROTECTED_APIS = [
#    'DATA_ATCOP',
#    ]
#env.RequireProtectedApi(MODEM_PROTECTED_APIS)

#-------------------------------------------------------------------------------
# Required external APIs not built with SCons (if any)
# e.g. ['BREW',]
#-------------------------------------------------------------------------------
REQUIRED_NON_SCONS_APIS = [
    'WCONNECT',
    'BREW',
    ]

if REQUIRED_NON_SCONS_APIS != []:
  env.RequireExternalApi(REQUIRED_NON_SCONS_APIS)

#-------------------------------------------------------------------------------
# Non-compliant Private Header Include Paths (Must be removed for CRM builds)
#-------------------------------------------------------------------------------
#if ARGUMENTS.get('SCONS_VIOLATIONS_LEVEL',0) > 99:
#		print "SCONS VIOLATIONS enabled"
#
#		env.PublishPrivateApi('VIOLATIONS',[
#			'${INC_ROOT}/modem/data/1x/707/src',
#			])
#
#		env.RequirePrivateApi('VIOLATIONS')

#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])
#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source
DATAMODEM_RMIFACECTLS_SOURCES = [
   '${BUILDPATH}/src/ds_rmnet_sm_ext.c',
   '${BUILDPATH}/src/ds_rmnet_meta_sm.c',
   '${BUILDPATH}/src/ds_rmnet_sio_rt_acl.c',
   '${BUILDPATH}/src/ds_rmnet_task.c',
   '${BUILDPATH}/src/ds_rmnet_v4_sm.c',
   '${BUILDPATH}/src/ds_rmnet_v6_sm.c',
   '${BUILDPATH}/src/ds_rmnet_utils.c',
   '${BUILDPATH}/src/ds_qmap.c',
   '${BUILDPATH}/src/ds_rmnet_xport.c',
   '${BUILDPATH}/src/ds_rmnet_shim.c'
   ]

env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], '${BUILDPATH}/rmifacectls',[DATAMODEM_RMIFACECTLS_SOURCES, ])

#code shipped as binary library
LIB_DATAMODEM_RMIFACECTLS_UICC_SOURCES = [
   '${BUILDPATH}/src/ps_uicc.c',
   '${BUILDPATH}/src/ps_uicc_iface4_hdlr.c',
   '${BUILDPATH}/src/ps_uicc_meta_sm.c',
   '${BUILDPATH}/src/ps_uicc_v4_sm.c',
   '${BUILDPATH}/src/ps_uicc_rt_acl.c',
   ]

LIB_DATAMODEM_RMIFACECTLS_SLIP_SOURCES = [
   '${BUILDPATH}/src/ps_slip_core.c',
   '${BUILDPATH}/src/ps_slip_config.c',
   '${BUILDPATH}/src/ps_slip_iface_hdlr.c',
   '${BUILDPATH}/src/ps_slip_rt_acl.c',
   ]

LIB_DATAMODEM_RMIFACECTLS_SOURCES = [
   '${BUILDPATH}/src/ds_rev_ip_transport_hdlr.c',
   ]

if 'USES_DATAMODEM_RMIFACECTLS_UICC' in env:
  LIB_DATAMODEM_RMIFACECTLS_SOURCES += LIB_DATAMODEM_RMIFACECTLS_UICC_SOURCES

if 'USES_DATAMODEM_RMIFACECTLS_SLIP' in env:
  LIB_DATAMODEM_RMIFACECTLS_SOURCES += LIB_DATAMODEM_RMIFACECTLS_SLIP_SOURCES

if LIB_DATAMODEM_RMIFACECTLS_SOURCES:
  env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], 
                       '${BUILDPATH}/lib_rmifacectls',
                       [LIB_DATAMODEM_RMIFACECTLS_SOURCES, ])

