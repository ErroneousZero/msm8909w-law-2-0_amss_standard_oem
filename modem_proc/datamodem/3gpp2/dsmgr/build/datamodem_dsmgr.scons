#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2011 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/modem/data/common/dsmgr/complete/rel/10.02.02/build/data_common_dsmgr.scons#5 $
#  $DateTime: 2010/11/11 16:24:03 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 08/31/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")
	
#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_DS",
])

env.RequirePublicApi(['MPOWER'], area='MPOWER')

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',
    'POWER',
    'DAL',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

env.RequirePublicApi('NAS', area='API')

#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'GERAN',
    'NAS',
    'UTILS',
    'WCDMA',
    'RFA',
    'CNE',
    'ECALL',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

segment_load_public_api_list = [
       ('MCFG',                'MCFG'),
       ('GPS',                 'GPS'),
       ('RFA',                 'CDMA'),
       ('RFA',                 'MEAS'),
       ('FW',                  'GERAN'),
       ('RFA',                 'LM'),
       ('RFA',                 'GSM'),
       ('RFA',                 'GNSS'),
       ('RFA',                 'LTE'),
       ('FW',                  'RF'),
       ('FW',                  'COMMON'),
       ]

for api_area,api_name in segment_load_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    'LTE',
    'CNE',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
# Non-compliant Private Header Include Paths (Must be removed for CRM builds)
#-------------------------------------------------------------------------------
#if ARGUMENTS.get('SCONS_VIOLATIONS_LEVEL',0) > 99:

#env.PublishPrivateApi('VIOLATIONS',[
#   '${INC_ROOT}/modem/datamodem/3gpp2/ds707/src',
#   '${INC_ROOT}/core/systemdrivers/clk/inc',
#   '${BUILD_ROOT}/modem/uim/uimdrv/inc',
#   '${BUILD_ROOT}/modem/utils/fc/inc',
#   '${INC_ROOT}/modem/utils/oss/oss_asn1_rvds21/include',
#   ])

#env.RequirePrivateApi('VIOLATIONS')
#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as binary library
DATA_DSMGR_FILES = glob(SRCPATH + '/src/*.c')
DATA_DSMGR_SOURCES = []

for filename in DATA_DSMGR_FILES:
   DATA_DSMGR_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM'], '${BUILDPATH}/modem_datamodem_dsmgr',[DATA_DSMGR_SOURCES, ])

# Build image for which this task belongs
RCINIT_DS  = ['MODEM_MODEM', 'MOB_DATAMODEM']

# RC Init Function Dictionary
RCINIT_INIT_DS = {
            'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
            'init_name'           : 'ds_init',
            'init_function'       : 'dsi_powerup_init',
            'policy_optin'        : ['default', 'ftm', ],
            # 'dependencies'      : ['cfm']
    }

# RC Init Task Dictionary
RCINIT_TASK_DS = {
            'thread_name'         : 'DS',
            'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
            'stack_size_bytes'    : '16384',
            'priority_amss_order' : 'DS_PRI_ORDER',
            'stack_name'          : 'ds_stack',
            'thread_entry'        : 'ds_task',
            'tcb_name'            : 'ds_tcb',
            'cpu_affinity'        : env.subst('$MODEM_CPU_AFFINITY'),
            'policy_optin'        : ['default', 'ftm', ],
    }
    
# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
	    env.AddRCInitFunc(RCINIT_DS, RCINIT_INIT_DS)
	    env.AddRCInitTask(RCINIT_DS, RCINIT_TASK_DS)
