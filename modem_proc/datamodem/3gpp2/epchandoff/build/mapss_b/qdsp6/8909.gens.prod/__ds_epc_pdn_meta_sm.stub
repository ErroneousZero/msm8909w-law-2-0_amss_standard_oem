/*!
  @file
  __ds_epc_pdn_meta_sm.stub

  @brief
  This module contains the entry, exit, and transition functions
  necessary to implement the following state machines:

  @detail
  epc_pdn_meta_sm ( 16 instance/s )


  OPTIONAL further detailed description of state machines
  - DELETE this section if unused.

*/

/*===========================================================================

  Copyright (c) 2017 Qualcomm Technologies Incorporated.
  All Rights Reserved
  Qualcomm Confidential and Proprietary

  Export of this technology or software is regulated by the U.S. Government.
  Diversion contrary to U.S. law prohibited.

  All ideas, data and information contained in or disclosed by
  this document are confidential and proprietary information of
  Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
  By accepting this material the recipient agrees that this material
  and the information contained therein are held in confidence and in
  trust and will not be used, copied, reproduced in whole or in part,
  nor its contents revealed in any manner to others without the express
  written permission of Qualcomm Technologies Incorporated.

===========================================================================*/


/*===========================================================================

                        EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header: $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
===========================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/

/* Include STM external API */
#include <stm2.h>

//! @todo Include necessary files here


/*===========================================================================

         STM COMPILER GENERATED PROTOTYPES AND DATA STRUCTURES

===========================================================================*/

/* Include STM compiler generated internal data structure file */
#include "__ds_epc_pdn_meta_sm_int.h"

/*===========================================================================

                         LOCAL VARIABLES

===========================================================================*/


/*! @brief Structure for state-machine per-instance local variables
*/
typedef struct
{
  int   internal_var;  /*!< My internal variable */
  void *internal_ptr;  /*!< My internal pointer */
  //! @todo SM per-instance variables go here
} __ds_epc_pdn_meta_sm_instance_type;

/*! @brief All variables internal to module __ds_epc_pdn_meta_sm.stub
*/
typedef struct
{
  /*! My array of per-instance internal variables. */
  __ds_epc_pdn_meta_sm_instance_type instance[ 16 ];
  //! @todo Other non-per-SM-instance vars go here
} __ds_epc_pdn_meta_sm_type;

/*! @brief Variables internal to module __ds_epc_pdn_meta_sm.stub
*/
STATIC __ds_epc_pdn_meta_sm_type __ds_epc_pdn_meta_sm;



/*===========================================================================

                 STATE MACHINE: epc_pdn_meta_sm

===========================================================================*/

/*===========================================================================

  STATE MACHINE ENTRY FUNCTION:  epc_pdn_meta_sm_init

===========================================================================*/
/*!
    @brief
    Entry function for state machine epc_pdn_meta_sm

    @detail
    Called upon activation of this state machine, with optional
    user-passed payload pointer parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_init
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_init() */


/*===========================================================================

  STATE MACHINE EXIT FUNCTION:  epc_pdn_meta_sm_cleanup

===========================================================================*/
/*!
    @brief
    Exit function for state machine epc_pdn_meta_sm

    @detail
    Called upon deactivation of this state machine, with optional
    user-passed payload pointer parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_cleanup
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_cleanup() */


/*===========================================================================

     (State Machine: epc_pdn_meta_sm)
     STATE ENTRY/EXIT/TRANSITION FUNCTIONS: EPC_PDN_META_STATE_DOWN

===========================================================================*/

/*===========================================================================

  STATE ENTRY FUNCTION:  epc_pdn_meta_sm_enter_down

===========================================================================*/
/*!
    @brief
    Entry function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN

    @detail
    Called upon entry into this state of the state machine, with optional
    user-passed payload pointer parameter.  The prior state of the state
    machine is also passed as the prev_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_enter_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         prev_state,  /*!< Previous state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( prev_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_enter_down() */


/*===========================================================================

  STATE EXIT FUNCTION:  epc_pdn_meta_sm_exit_down

===========================================================================*/
/*!
    @brief
    Exit function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN

    @detail
    Called upon exit of this state of the state machine, with optional
    user-passed payload pointer parameter.  The impending state of the state
    machine is also passed as the next_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_exit_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         next_state,  /*!< Next state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( next_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_exit_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_oos_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_OOS_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OOS_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_oos_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_oos_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_attaching_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_ATTACHING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_ATTACHING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_attaching_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_attaching_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_TUNNELING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_TUNNELING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_ehrpd_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_EHRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_EHRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_ehrpd_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_ehrpd_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_hrpd_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_HRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_HRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_hrpd_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_hrpd_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_1x_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_1X_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_1X_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_1x_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_1x_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_gsm_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_GSM_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_GSM_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_gsm_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_gsm_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wcdma_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_WCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wcdma_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wcdma_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_tdscdma_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_TDSCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_TDSCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_tdscdma_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_tdscdma_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_other_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_OTHER_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OTHER_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_other_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_other_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_iwlan_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_IWLAN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_IWLAN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_iwlan_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_iwlan_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wlan_local_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_SSM_WLAN_LOCAL_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WLAN_LOCAL_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wlan_local_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wlan_local_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_up_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_UP_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_UP_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_up_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_up_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_down_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_down_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_down_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_going_down_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_GOING_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_GOING_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_going_down_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_going_down_in_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_teardown_in_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_DOWN,
    upon receiving input EPC_PDN_META_IF_TEARDOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_TEARDOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_teardown_in_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_teardown_in_down() */


/*===========================================================================

     (State Machine: epc_pdn_meta_sm)
     STATE ENTRY/EXIT/TRANSITION FUNCTIONS: EPC_PDN_META_STATE_UP

===========================================================================*/

/*===========================================================================

  STATE ENTRY FUNCTION:  epc_pdn_meta_sm_enter_up

===========================================================================*/
/*!
    @brief
    Entry function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP

    @detail
    Called upon entry into this state of the state machine, with optional
    user-passed payload pointer parameter.  The prior state of the state
    machine is also passed as the prev_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_enter_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         prev_state,  /*!< Previous state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( prev_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_enter_up() */


/*===========================================================================

  STATE EXIT FUNCTION:  epc_pdn_meta_sm_exit_up

===========================================================================*/
/*!
    @brief
    Exit function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP

    @detail
    Called upon exit of this state of the state machine, with optional
    user-passed payload pointer parameter.  The impending state of the state
    machine is also passed as the next_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_exit_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         next_state,  /*!< Next state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( next_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_exit_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_oos_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_OOS_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OOS_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_oos_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_oos_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_attaching_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_LTE_ATTACHING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_ATTACHING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_attaching_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_attaching_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_LTE_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_LTE_TUNNELING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_TUNNELING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_ehrpd_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_EHRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_EHRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_ehrpd_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_ehrpd_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_hrpd_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_HRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_HRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_hrpd_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_hrpd_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_1x_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_1X_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_1X_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_1x_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_1x_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_gsm_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_GSM_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_GSM_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_gsm_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_gsm_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wcdma_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_WCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wcdma_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wcdma_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_tdscdma_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_TDSCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_TDSCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_tdscdma_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_tdscdma_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_other_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_OTHER_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OTHER_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_other_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_other_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_iwlan_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_IWLAN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_IWLAN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_iwlan_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_iwlan_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wlan_local_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_SSM_WLAN_LOCAL_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WLAN_LOCAL_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wlan_local_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wlan_local_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_up_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_IF_EPC_UP_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_UP_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_up_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_up_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_down_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_IF_EPC_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_down_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_down_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_going_down_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_IF_EPC_GOING_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_GOING_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_going_down_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_going_down_in_up() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_teardown_in_up

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_UP,
    upon receiving input EPC_PDN_META_IF_TEARDOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_TEARDOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_teardown_in_up
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_teardown_in_up() */


/*===========================================================================

     (State Machine: epc_pdn_meta_sm)
     STATE ENTRY/EXIT/TRANSITION FUNCTIONS: EPC_PDN_META_STATE_GOING_DOWN

===========================================================================*/

/*===========================================================================

  STATE ENTRY FUNCTION:  epc_pdn_meta_sm_enter_going_down

===========================================================================*/
/*!
    @brief
    Entry function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN

    @detail
    Called upon entry into this state of the state machine, with optional
    user-passed payload pointer parameter.  The prior state of the state
    machine is also passed as the prev_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_enter_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         prev_state,  /*!< Previous state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( prev_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_enter_going_down() */


/*===========================================================================

  STATE EXIT FUNCTION:  epc_pdn_meta_sm_exit_going_down

===========================================================================*/
/*!
    @brief
    Exit function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN

    @detail
    Called upon exit of this state of the state machine, with optional
    user-passed payload pointer parameter.  The impending state of the state
    machine is also passed as the next_state parameter.

    @return
    None

*/
/*=========================================================================*/
void epc_pdn_meta_sm_exit_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  stm_state_t         next_state,  /*!< Next state */
  void                *payload     /*!< Payload pointer */
)
{

  //! @todo Variable declarations go here

  STM_UNUSED( payload );
  STM_UNUSED( next_state );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

} /* epc_pdn_meta_sm_exit_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_oos_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_OOS_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OOS_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_oos_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_oos_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_attaching_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_ATTACHING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_ATTACHING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_attaching_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_attaching_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_LTE_TUNNELING_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_LTE_TUNNELING_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_lte_tunneling_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_ehrpd_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_EHRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_EHRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_ehrpd_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_ehrpd_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_hrpd_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_HRPD_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_HRPD_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_hrpd_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_hrpd_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_1x_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_1X_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_1X_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_1x_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_1x_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_gsm_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_GSM_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_GSM_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_gsm_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_gsm_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wcdma_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_WCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wcdma_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wcdma_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_tdscdma_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_TDSCDMA_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_TDSCDMA_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_tdscdma_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_tdscdma_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_other_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_OTHER_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_OTHER_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_other_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_other_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_iwlan_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_IWLAN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_IWLAN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_iwlan_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_iwlan_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_ssm_wlan_local_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_SSM_WLAN_LOCAL_EV

    @detail
    Called upon receipt of input EPC_PDN_META_SSM_WLAN_LOCAL_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_ssm_wlan_local_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_ssm_wlan_local_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_up_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_UP_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_UP_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_up_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_up_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_down_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_down_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_down_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_epc_going_down_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_IF_EPC_GOING_DOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_EPC_GOING_DOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_epc_going_down_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_epc_going_down_in_going_down() */


/*===========================================================================

  TRANSITION FUNCTION:  epc_pdn_meta_sm_proc_if_teardown_in_going_down

===========================================================================*/
/*!
    @brief
    Transition function for state machine epc_pdn_meta_sm,
    state EPC_PDN_META_STATE_GOING_DOWN,
    upon receiving input EPC_PDN_META_IF_TEARDOWN_EV

    @detail
    Called upon receipt of input EPC_PDN_META_IF_TEARDOWN_EV, with optional
    user-passed payload pointer.

    @return
    Returns the next state that the state machine should transition to
    upon receipt of the input.  This state must be a valid state for this
    state machine.

*/
/*=========================================================================*/
stm_state_t epc_pdn_meta_sm_proc_if_teardown_in_going_down
(
  stm_state_machine_t *sm,         /*!< State Machine instance pointer */
  void                *payload     /*!< Payload pointer */
)
{
  stm_state_t next_state = STM_SAME_STATE; /* Default 'next' state */

  //! @todo Additional variable declarations go here

  STM_UNUSED( payload );

  /*-----------------------------------------------------------------------*/

  /* Ensure that the state machine instance pointer passed is valid */
  STM_NULL_CHECK( sm );

  /*-----------------------------------------------------------------------*/

  //! @todo Code goes here

  return( next_state );

} /* epc_pdn_meta_sm_proc_if_teardown_in_going_down() */




