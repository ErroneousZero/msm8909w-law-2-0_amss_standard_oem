#ifndef PS_STAT_ROHC_H
#define PS_STAT_ROHC_H

/*===========================================================================

                          P S _ S T A T _ R O H C . H

GENERAL DESCRIPTION
  This header file provides the structure, enum and function definitions for
  the statistics pertaining to ROHC.

EXTERNALIZED FUNCTIONS
  ps_stat_get_rohc_comp()
    This function supplies the required ROHC compressor stats.

  ps_stat_get_rohc_decomp()
    This function supplies the required ROHC decompressor stats.

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None

Copyright (c) 2006 - 2014 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
===========================================================================*/

/*===========================================================================

                      EDIT HISTORY FOR FILE

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/datamodem/protocols/hc/src/ps_stat_rohc.h#1 $ $DateTime: 2016/12/13 08:00:03 $ $Author: mplcsds1 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
10/09/14   ds      Adding FEATURE_DATA_PS_ROHC
11/28/07   pp      Lint medium/low - fixes.
10/19/07   sp      ROHC Statistics Enhancement.
10/10/07   am      ROHC Statistics Enhancement.
02/27/07   scb     Added changes to fix RCVT compilation warning
11/02/06   ifk     Removed total_ratio stat.  Removed from Effnet release
                   2.2.2-3.
01/16/06   vp      Initial version
===========================================================================*/


/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/

#include "customer.h"
#include "comdef.h"
#include "IxErrno.h"
#include "datamodem_variation.h"

#ifdef FEATURE_DATA_PS_ROHC


/*---------------------------------------------------------------------------
  Channel specific statistics for the decompressor.
---------------------------------------------------------------------------*/
typedef struct 
{
  /* General */
  uint32 in_packets;     /* Nr of packets in to decompressor.     */
  uint32 bytes_original; /* Total original HDR number of bytes.   */
  uint32 bytes_decomp;   /* Total HDR bytes before decompression. */
  
  /* Packet Types */
  uint32 ir_received;     /* Nr of IRs received by decompressor.           */
  uint32 ir_dyn_received; /* Nr of IR-DYNs received by decompressor.       */
  uint32 t0_received;     /* Nr of type0 packets received by decompressor. */
  uint32 t1_received;     /* Nr of type1 packets received by decompressor. */
  uint32 t2_received;     /* Nr of type2 packets received by decompressor. */
  uint32 uncompressed;    /* Nr of packets received uncompressed.          */

  /* Feedback */
  uint32 out_acks;       /* Nr of acks generated by decompressor.           */
  uint32 out_nacks;      /* Nr of nacks generated by decompressor.          */
  uint32 out_snacks;     /* Nr of static nacks generated by decompressor.   */
  uint32 piggybacked_fb; /* Nr of piggybacked fbs received by decompressor. */
  
  /* Decompressor Errors */
  uint32 decomp_failed;    /* Nr of decompression failures.                 */
  uint32 ir_failed;        /* Nr of IR packet failures.                     */
  uint32 ir_dyn_failed;    /* Nr of IR-DYN packet failures.                 */
  uint32 t0_failed;        /* Nr of type0 packet failures.                  */
  uint32 t1_failed;        /* Nr of type1 packet failures.                  */
  uint32 t2_failed;        /* Nr of type2 packet failures.                  */
  uint32 crc_failures;     /* Nr of CRC decompression failures.             */
  uint32 parse_errors;     /* Nr of header parsing/illegal packet errors    */
  uint32 illegal_states;   /* Nr of packets failed in lower context states. */
  uint32 invalid_contexts; /* Nr of times the Decomp ctx was invalidated.   */
  uint32 unknown_profiles; /* Nr of failures due to unsuppoted profiles.    */

  /* Context repair */
  uint32 context_repair_successes; /* Nr of successes in context repair.    */
  uint32 context_repair_discards;  /* Nr of pkt discarded after successful  
                                                                ctx repair  */
} ps_stat_rohc_decomp_i_s_type;

/*---------------------------------------------------------------------------
  ROHC decompressor statistics enum
---------------------------------------------------------------------------*/
typedef enum 
{
  /* Desc : Nr of packets in to decompressor */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_IN_PACKETS    = 0,
  /* Desc : Total original HDR number of bytes. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_BYTES_ORIGINAL           = 1,
  /* Desc : Total HDR bytes before decompression. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_BYTES_DECOMP             = 2,
  /* Desc : Nr of IRs received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_IR_RECEIVED              = 3,
  /* Desc : Nr of IR-DYNs received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_IR_DYN_RECEIVED          = 4,
  /* Desc : Nr of type0 packets received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T0_RECEIVED              = 5,
  /* Desc : Nr of type1 packets received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T1_RECEIVED              = 6,
  /* Desc : Nr of type2 packets received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T2_RECEIVED              = 7,
  /* Desc : Nr of packets received uncompressed. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_UNCOMPRESSED             = 8,
  /* Desc : Nr of acks generated by decompressor */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_OUT_ACKS      = 9,
  /* Desc : Nr of nacks generated by decompressor */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_OUT_NACKS     = 10,
  /* Desc : Nr of static nacks generated by decomoressor */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_OUT_SNACKS    = 11,
  /* Desc : Nr of piggybacked feedbacks received by decompressor. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_PIGGYBACKED_FB           = 12,
  /* Desc : Nr of decompression failures */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_DECOMP_FAILED = 13,
  /* Desc : Nr of IR packet failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_IR_FAILED                = 14,
  /* Desc : Nr of IR-DYN packet failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_IR_DYN_FAILED            = 15,
  /* Desc : Nr of type0 packet failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T0_FAILED                = 16,
  /* Desc : Nr of type1 packet failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T1_FAILED                = 17,
  /* Desc : Nr of type2 packet failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_T2_FAILED                = 18,
  /* Desc : Nr of CRC decompression failures. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_CRC_FAILURES             = 19,
  /* Desc : Nr of header parsing/illegal packet errors. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_PARSE_ERRORS             = 20,
  /* Desc : Nr of failures due to packets received in lower states. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_ILLEGAL_STATES           = 21,
  /* Desc : Nr of times the Decomp ctx was invalidated. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_INVALID_CONTEXTS         = 22,
  /* Desc : Nr of failures due to unsuppoted profiles. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_UNKNOWN_PROFILES         = 23,
  /* Desc : Nr of successes in context repair. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_CONTEXT_REPAIR_SUCCESSES = 24,
  /* Desc : Nr of pkt discarded after successful ctx repair. */
  /* type : uint32 */
  PS_STAT_ROHC_DECOMP_CONTEXT_REPAIR_DISCARDS  = 25,
  /* Desc : All ROHC decompressor stats */
  /* type : ps_stat_rohc_decomp_i_s_type */
  PS_STAT_ROHC_DECOMP_ALL
} ps_stat_rohc_decomp_enum_type;

/*---------------------------------------------------------------------------
  Channel specific statistics for the compressor.
---------------------------------------------------------------------------*/
typedef struct 
{
  /* General */
  uint32 out_packets;        /* Nr of packets generated by compressor.      */
  uint32 bytes_original;     /* Total nr of bytes of original headers.      */
  uint32 bytes_comp;         /* Total nr of bytes after compression.        */
  uint32 pkt_bytes_original; /* Total nr of bytes of original packets.      */
  uint32 pkt_bytes_comp;     /* Total nr of bytes after compression.        */
  
  /* Packet Types */
  uint32 ir_produced;        /* Nr of IRs produced by compressor.           */
  uint32 ir_dyn_produced;    /* Nr of IR-DYNs produced by compressor.       */
  uint32 t0_produced;        /* Nr of type0 packets produced by compressor. */
  uint32 t1_produced;        /* Nr of type1 packets produced by compressor. */
  uint32 t2_produced;        /* Nr of type2 packets produced by compressor. */
  uint32 uncompressed;       /* Nr of packets sent uncompressed.            */

  /* Feedback */
  uint32 in_acks;            /* Nr of acks received by compressor.          */
  uint32 in_nacks;           /* Nr of nacks received by compressor.         */
  uint32 in_snacks;          /* Nr of snacks received by compressor.        */
  
  /* Compressor Errors */
  uint32 comp_failed;        /* Nr of compression failures.                 */
} ps_stat_rohc_comp_i_s_type;

/*---------------------------------------------------------------------------
  ROHC compressor statistics enum
---------------------------------------------------------------------------*/
typedef enum 
{
  /* Desc : Nr of packets generated by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_OUT_PACKETS        = 0,
  /* Desc : Total nr of bytes of original headers */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_BYTES_ORIGINAL     = 1,
  /* Desc : Total nr of bytes after compression */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_BYTES_COMP         = 2,
  /* Desc : Total nr of bytes of original packets */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_PKT_BYTES_ORIGINAL = 3,
  /* Desc : Total nr of bytes after compression */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_PKT_BYTES_COMP     = 4,
  /* Desc : Nr of IRs produced by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_IR_PRODUCED        = 5,
  /* Desc : Nr of IR-DYNs produced by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_IR_DYN_PRODUCED    = 6,
  /* Desc : Nr of type0 packets produced by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_T0_PRODUCED        = 7,
  /* Desc : Nr of type1 packets produced by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_T1_PRODUCED        = 8,
  /* Desc : Nr of type2 packets produced by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_T2_PRODUCED        = 9,
  /* Desc : Nr of packets sent uncompressed */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_UNCOMPRESSED       = 10,
  /* Desc : Nr of acks received by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_IN_ACKS            = 11,
  /* Desc : Nr of nacks received by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_IN_NACKS           = 12,
  /* Desc : Nr of snacks received by compressor */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_IN_SNACKS          = 13,
  /* Desc : Nr of compression failures */
  /* type : uint32 */
  PS_STAT_ROHC_COMP_COMP_FAILED        = 14,
  /* Desc : All ROHC compressor stats */
  /* type : ps_stat_rohc_comp_i_s_type */
  PS_STAT_ROHC_COMP_ALL
} ps_stat_rohc_comp_enum_type;


/*===========================================================================

                          LOG PACKET DECLARATIONS

===========================================================================*/

/*---------------------------------------------------------------------------
  Log structure for LOG_PS_STAT_ROHC_INST_C
 
  Header fields are defined in ps_stat_logging.h

  Fields are
    handle           : handle to the instance
    inst_rohc_stats  : instance ROHC stats
---------------------------------------------------------------------------*/
typedef struct
{
  int32                         handle;
  ps_stat_rohc_decomp_i_s_type  inst_rohc_decomp_stats;
  ps_stat_rohc_comp_i_s_type    inst_rohc_comp_stats;
} ps_stat_inst_rohc_log_pkt_type;

/*---------------------------------------------------------------------------
TYPEDEF PS_STAT_INST_DESC_ROHC_TYPE

DESCRIPTION
  The structure describing a ps_rohc instance.

  handle    : Instance handle, index into the ps_rohc cb array
  reserved  : Used to maintain a 4-byte alignment
---------------------------------------------------------------------------*/
typedef struct
{
  uint8  handle;
  uint8  reserved[3];
} ps_stat_inst_desc_rohc_type;


/*===========================================================================

                         EXTERNAL FUNCTION DECLARATIONS

===========================================================================*/

/*===========================================================================
FUNCTION PS_STAT_INIT_ROHC()

DESCRIPTION

DEPENDENCIES
  None

PARAMETERS

RETURN VALUE

SIDE EFFECTS
  None
===========================================================================*/
void ps_stat_init_rohc
(
  void
);


/*===========================================================================
FUNCTION PS_STAT_GET_ROHC_DECOMP()

DESCRIPTION
  This function supplies the required ROHC decompressor statistics. The first
  argument passed to the function is an enum that denotes the metric of
  interest.The second argument will be  a pointer to the address of the
  channel corresponding to the decompressor. The third argument
  points to the memory location where the results will be copied.The result
  (statistic) will be copied to this memory address. The fourth argument
  passes the length of memory allocated for the return value and should be
  greater than or equal to the memory size of the statistic requested.

DEPENDENCIES
  None

RETURN VALUE
  E_SUCCESS (0) for success and any other number for failure . The error
  codes are as defined in errno.h.

PARAMETERS
  stat            - IN - type of stat
  instance_ptr    - IN - Handle to instance
  return_value    - IN - pointer for return value
                  - OUT- return value (statistics)
  ret_len         - length of memory allocated

SIDE EFFECTS
  None
===========================================================================*/
errno_enum_type ps_stat_get_rohc_decomp
(
  ps_stat_rohc_decomp_enum_type stat,
  const void                    *instance_ptr,
  void                          *return_value,
  uint16                        ret_len
);


/*===========================================================================
FUNCTION PS_STAT_GET_ROHC_COMP()

DESCRIPTION
  This function supplies the required ROHC compressor statistics. The first
  argument passed to the function is an enum that denotes the metric of
  interest.The second argument will be  a pointer to the address of the
  channel corresponding to the compressor. The third argument
  points to the memory location where the results will be copied.The result
  (statistic) will be copied to this memory address. The fourth argument
  passes the length of memory allocated for the return value and should be
  greater than or equal to the memory size of the statistic requested.

DEPENDENCIES
  None

RETURN VALUE
  E_SUCCESS (0) for success and any other number for failure . The error
  codes are as defined in errno.h.

PARAMETERS
  stat            - IN - type of stat
  instance_ptr    - IN - Handle to instance
  return_value    - IN - pointer for return value
                  - OUT- return value (statistics)
  ret_len         - length of memory allocated

SIDE EFFECTS
  None
===========================================================================*/
errno_enum_type ps_stat_get_rohc_comp
(
  ps_stat_rohc_comp_enum_type stat,
  const void                  *instance_ptr,
  void                        *return_value,
  uint16                      ret_len
);


/*===========================================================================
FUNCTION PS_STAT_RESET_ROHC()

DESCRIPTION
  This function the instance statistics associated with the specified
  instance.  Resets both the comp and decomp stats.

DEPENDENCIES
  None

RETURN VALUE
  E_SUCCESS (0) for success and any other number for failure . The error
  codes are as defined in errno.h.

PARAMETERS
  handle: Handle to the ROHC instance

SIDE EFFECTS
  None
===========================================================================*/
void ps_stat_reset_rohc
(
  int32         handle
);

#endif /* FEATURE_DATA_PS_ROHC */

#endif /* PS_STAT_ROHC_H */
