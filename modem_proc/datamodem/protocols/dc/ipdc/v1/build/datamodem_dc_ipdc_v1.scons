#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2009 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/datamodem/protocols/dc/ipdc/v1/build/datamodem_dc_ipdc_v1.scons#1 $
#  $DateTime: 2016/12/13 08:00:03 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 08/31/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

if 'USES_WPLT' in env or 'USES_DATAMODEM_DC_IPDC_V1' not in env:
    Return()

#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_DS",
])

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',
    'POWER',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'GERAN',
    'NAS',
    'UTILS',
    'WCDMA',
    'RFA',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'MODEM_DATAMODEM',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)


#-------------------------------------------------------------------------------
# Required external APIs not built with SCons (if any)
# e.g. ['BREW',]
#-------------------------------------------------------------------------------
REQUIRED_NON_SCONS_APIS = [
    'WCONNECT', 
    'BREW',
    'CS',
    ]

if REQUIRED_NON_SCONS_APIS != []:
  env.RequireExternalApi(REQUIRED_NON_SCONS_APIS)

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source : nothing as of now
DATAMODEM_DC_IPDC_V1_SOURCES = [
    ]

#env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM'], '${BUILDPATH}/dc/ipdc/v1', DATAMODEM_DC_IPDC_V1_SOURCES)

#code shipped as binary library
if 'USES_MOB' in env:
  LIB_DATAMODEM_DC_IPDC_V1_SOURCES = [
    '${BUILDPATH}/src/ps_ipdc_ex.c',
    '${BUILDPATH}/src/ps_ipdc_comp_ex.c',
    '${BUILDPATH}/src/ps_ipdc_decomp_ex.c',
    '${BUILDPATH}/src/ps_ipdc_hb_ex.c',
    '${BUILDPATH}/src/ps_ipdc_logging_ex.c',
    '${BUILDPATH}/src/ps_ipdc_utils_ex.c',
    '${BUILDPATH}/src/ps_ipdc_config_ex.c',
    '${BUILDPATH}/src/ps_ipdc_versions.c',
    '${BUILDPATH}/src/udcif.c',
    '${BUILDPATH}/src/ps_ipdc_dsmutil.c',
    '${BUILDPATH}/src/ps_ipdc_qsh_dbg.c',
    ]
else:
  LIB_DATAMODEM_DC_IPDC_V1_SOURCES = [
    '${BUILDPATH}/src/ps_ipdc_ex.c',
    '${BUILDPATH}/src/ps_ipdc_comp_ex.c',
    '${BUILDPATH}/src/ps_ipdc_decomp_ex.c',
    '${BUILDPATH}/src/ps_ipdc_hb_ex.c',
    '${BUILDPATH}/src/ps_ipdc_logging_ex.c',
    '${BUILDPATH}/src/ps_ipdc_utils_ex.c',
    '${BUILDPATH}/src/ps_ipdc_config_ex.c',
    '${BUILDPATH}/src/ps_ipdc_versions.c',
    '${BUILDPATH}/src/udcif.c',
    '${BUILDPATH}/src/ps_ipdc_dsmutil.c',
    '${BUILDPATH}/src/fast_hash.S',
    '${BUILDPATH}/src/hash_shrink_asm.S',
    '${BUILDPATH}/src/slow_hash.c',
    '${BUILDPATH}/src/hash_shrink.c',
    '${BUILDPATH}/src/fast_memcmp.S', 
    '${BUILDPATH}/src/ps_ipdc_qsh_dbg.c',
    ]

if 'USES_DATAMODEM_DC' in env:
  env.AddBinaryLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ],
                        '${BUILDPATH}/lib_dc_ipdc_v1',
                         [LIB_DATAMODEM_DC_IPDC_V1_SOURCES, ])
