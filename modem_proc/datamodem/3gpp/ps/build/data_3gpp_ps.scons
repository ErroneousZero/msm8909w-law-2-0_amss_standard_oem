#===============================================================================
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/datamodem/3gpp/ps/build/data_3gpp_ps.scons#1 $
#  $DateTime: 2016/12/13 08:00:03 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/12/10   ack     Initial revision
#===============================================================================
Import('env')
env = env.Clone()

from glob import glob
from os.path import join, basename

#if ('USES_WPLT' in env or 'USES_UMTS' not in env) and 'USES_GSM' not in env:
#    Return()

#turn off debug if requested  
if ARGUMENTS.get('DEBUG_OFF','no') == 'yes':
    env.Replace(ARM_DBG = "")
    env.Replace(HEXAGON_DBG = "")
    env.Replace(GCC_DBG = "")


#turn on debug if requested
if ARGUMENTS.get('DEBUG_ON','no') == 'yes':
    env.Replace(ARM_DBG = "-g --dwarf2") 
    env.Replace(HEXAGON_DBG = "-g")  
    env.Replace(GCC_DBG = "-g")
	
env.Replace(MSVC_WARN = '/W0')	

#-------------------------------------------------------------------------------
# Set MSG_BT_SSID_DFLT for legacy MSG macros
#-------------------------------------------------------------------------------
env.Append(CPPDEFINES = [
   "MSG_BT_SSID_DFLT=MSG_SSID_DS",
])

#-------------------------------------------------------------------------------
# Necessary Core Public API's
#-------------------------------------------------------------------------------
CORE_PUBLIC_APIS = [
    'DEBUGTOOLS',
    'SERVICES',
    'SYSTEMDRIVERS',
    'WIREDCONNECTIVITY',
    'STORAGE',
    'SECUREMSM',
    'BUSES',
    'DAL',
	'POWER',
	'MPROC',

    # needs to be last also contains wrong comdef.h
    'KERNEL',
    ]

env.RequirePublicApi(CORE_PUBLIC_APIS, area='core')

#-------------------------------------------------------------------------------
# Necessary Modem Public API's
#-------------------------------------------------------------------------------
MODEM_PUBLIC_APIS = [
    'MMODE',
    'DATACOMMON',
    'DATAMODEM',
    'UIM',
    'MCS',
    'ONEX',
    'DATA',
    'HDR',
    'WMS',
    'PBM',
    'NAS',
    'WCDMA',
    'UTILS',
    'GERAN',
    'CNE',
	'ECALL',
    ]

env.RequirePublicApi(MODEM_PUBLIC_APIS)

segment_load_public_api_list = [
       ('MCFG',                'MCFG'),
       ('GPS',                 'GPS'),
       ('RFA',                 'CDMA'),
       ('RFA',                 'MEAS'),
       ('FW',                  'GERAN'),
       ('RFA',                 'LM'),
       ('RFA',                 'GSM'),
       ('RFA',                 'GNSS'),
       ('RFA',                 'LTE'),
       ('FW',                  'RF'),
       ('FW',                  'COMMON'),
       ]

for api_area,api_name in segment_load_public_api_list:
    env.RequirePublicApi([api_name], area=api_area)

#-------------------------------------------------------------------------------
# Necessary Modem Restricted API's
#-------------------------------------------------------------------------------
MODEM_RESTRICTED_APIS = [
    'DATA',
    'MODEM_DATA',
    'MODEM_DATACOMMON',
    'DATACOMMON',
    'DATAMODEM',
    'MCS',
    'ONEX',
    'NAS',
    'HDR',
    'MMODE',
    'RFA',
    'GERAN',
    'UIM',
    'WCDMA',
    'MDSP',
    'UTILS',
    'LTE',
    'CNE',
    ]

env.RequireRestrictedApi(MODEM_RESTRICTED_APIS)

#-------------------------------------------------------------------------------
#  OffTarget/QTF
#-------------------------------------------------------------------------------
if 'USES_MOB' in env:
  env.RequireRestrictedApi(['DATAMODEM_QTF_OFT'])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Setup UMIDs
#-------------------------------------------------------------------------------

env.AddUMID('${BUILDPATH}/data_3gpp_ps.umid', ['../inc/ds_3gpp_msg.h'])

#-------------------------------------------------------------------------------
# Generate the library and add to an image
#-------------------------------------------------------------------------------
#code shipped as source

PS_FILES = glob(SRCPATH + '/src/ds*.c')
PS_SOURCES = []

for filename in PS_FILES:
   PS_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))

if 'USES_UMTS' in env or ('USES_WCDMA' in env and 'USES_PDCP' in env) or 'USES_GSM' in env:
   PS_SOURCES.extend([ '${BUILDPATH}/src/comptask.c', ])

env.AddLibrary(['MODEM_MODEM', 'MOB_DATAMODEM' ], '${BUILDPATH}/ps',[PS_SOURCES, ])

# Build image for which this task belongs
RCINIT_COMP  = ['MODEM_MODEM', 'MOB_DATAMODEM']

# RC Init Function Dictionary
RCINIT_INIT_COMP = {
	    'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
	    'init_name'           : 'comp_init',
	    'init_function'       : 'comp_task_init',
	    # 'dependencies'      : ['cfm']
    }

# RC Init Task Dictionary
RCINIT_TASK_COMP = {
	    'thread_name'         : 'COMP',
	    'sequence_group'      : env.subst('$MODEM_UPPERLAYER'),
	    'stack_size_bytes'    : env.subst('$COMP_STKSZ'),
	    'priority_amss_order' : 'COMP_PRI_ORDER',
	    'stack_name'          : 'comp_stack',
	    'thread_entry'        : 'comp_task',
	    'tcb_name'            : 'comp_tcb',
            'cpu_affinity'	  : env.subst('$MODEM_CPU_AFFINITY')
    }
    
# Add init function to RCInit
if 'USES_MODEM_RCINIT' in env:
	    env.AddRCInitTask(RCINIT_COMP, RCINIT_TASK_COMP)
