#===============================================================================
#
# QMIMSGS MPSS
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2014 Qualcomm Technologies, Inc.  All Rights Reserved.
# Qualcomm Technologies Proprietary and Confidential.
#
#-------------------------------------------------------------------------------
#                      EDIT HISTORY FOR FILE
#
#  $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/qmimsgs/build/qmimsgs_mpss.scons#1 $
#  $DateTime: 2016/12/13 07:58:26 $
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who      what, where, why
# --------   ---      ---------------------------------------------------------
# 05/14/13   pm       Update to use correct cleanpack script, qmimsgs_mpss_cleanpack.py
# 01/16/13   pm       Add SCons CleanPack support
# 12/18/12   prp      Updated QMIMSG_ROOT to coexist with the tip of Nikel
# 12/17/12   prp/mpa  Updated QMIMSGS_ROOT
# 09/12/12   prp/mpa  Temporary workaround for transition to qmimsgs/ folder
# 10/31/11   mpa      QMI services P4 relocation
# 08/08/11   mpa      Baseline
#===============================================================================
Import('env')

# Load cleanpack script:
import os
if os.path.exists('qmimsgs_mpss_cleanpack.py'):
  env.LoadToolScript('qmimsgs_mpss_cleanpack.py')
  
#MPSS.NI.4.5.2, MPSS.NI.5.0.X, MPSS.NI.6.0.X:  core RequirePublicApi(area='api') only
#will always be ${INC_ROOT}/api & AU_NAME = 'API'
if env.PathExists('${INC_ROOT}/api') and 'NO_MODEM_FOLDER' in env:
  env.Replace(QMIMSGS_ROOT = '${INC_ROOT}/api')
  
#all other PL's  
elif env.PathExists('${INC_ROOT}/api'):
   env.Replace(QMIMSGS_ROOT = '${INC_ROOT}/api')
   env.Replace(AU_NAME = "QMIMSGS")
   env.Replace(AU_DIR_PATTERNS = ['${QMIMSGS_ROOT}/build']) 

else:
   env.Replace(QMIMSGS_ROOT = '${INC_ROOT}/qmimsgs')

#-------------------------------------------------------------------------------
# Load the rest of the software units
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
