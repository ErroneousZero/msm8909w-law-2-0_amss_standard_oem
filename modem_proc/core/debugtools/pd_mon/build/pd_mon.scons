# @file pd_mon.scons
# @brief This file contains the API details for the Protection Domain Monitor
#===============================================================================
# NOTE: The @brief description above does not appear in the PDF.
# The tms_mainpage.dox file contains the group/module descriptions that
# are displayed in the output PDF generated using Doxygen and LaTeX. To
# edit or update any of the group/module text in the PDF, edit the
# tms_mainpage.dox file or contact Tech Pubs.
#===============================================================================
#===============================================================================
# Copyright (c) 2014 Qualcomm Technologies Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary.
#===============================================================================
#===============================================================================
# Edit History
# $Header: //components/rel/core.mpss/3.5.c12.3/debugtools/pd_mon/build/pd_mon.scons#1 $
# $DateTime: 2016/12/13 07:59:23 $
# $Change: 11985146 $
# $Author: mplcsds1 $
#===============================================================================

Import('env')
env = env.Clone()

# Build Tags
#
# CORE_HOST, CORE_USER
#
# Requires Build Tags 'CORE_HOST' & 'CORE_USER' to distinguish
# between the HOST PD and Other PD. The Build Tags are expected to
# be associated as 'build_tags' within each IMAGE_ROOT SCONS file that
# controls IMAGE specific information. 'CORE_HOST' and
# 'CORE_USER' may be applied to the same image.
#
# Dependency
#
# QURT, QURTOS, RCINIT, PD_DUMP_HOST
#
# Requirements
#
# 1. The USER Program Domain Deliverable shall be partitioned to be a drop
#    in build time component. Dependency is partitioned between HOST
#    and USER.
# 2. The ONLY supported Dependency shall be via an RCINIT Framework
#    init-function call provided for execution within HOST.
# 3. The RCINIT Framework init-function call shall be provided and
#    managed by the USER Program Domain Deliverable owner.
#
# Policy
#
# 1. Policy shall be to start the HOST Program Domain Deliverable no
#    sooner than HOST/RCINIT_GROUP_2, after all CORE dependency to
#    USER has been met. Recommended is HOST/RCINIT_GROUP_7.
# 2. Policy shall be to Initialize the USER Program Domain required
#    HOST Drivers Support by RCINIT Framework Groups
#    [ (HOST|USER)/RCINIT_GROUP_0 .. (HOST|USER)/RCINIT_GROUP_1 ]
# 3. Policy shall be to Allow for Operation to USER Program Domain
#    USER Drivers by RCINIT Framework Groups
#    [ USER/RCINIT_GROUP_2 .. USER/RCINIT_GROUP_7 ]
#
# Examples
#
# HOST SCONS, Provided by AUDIO, pd_audio.scons:
#
# if 'USES_RCINIT' in env:
#  env.AddRCInitFunc(
#   HOST_IMG, # Executes in HOST to SPAWN audio
#   {
#    'sequence_group'             : 'RCINIT_GROUP_7', # Policy Based
#    'init_name'                  : 'pd_audio',
#    'init_function'              : 'pd_mon_audio',
#   })
#
# INIT-FUNCTION, Provided by AUDIO, pd_audio_start.c:
#
# #include "pd_mon_qurt.h"
# void pd_mon_audio(void)
# { PD_MON_HANDLE hPDAudio = pd_mon_spawn(PD_MON_RESTART_ALWAYS, "AUDIO"); }
#
# HOST SCONS, Provided by SENSORS, pd_sensors.scons:
#
# if 'USES_RCINIT' in env:
#  env.AddRCInitFunc(
#   HOST_IMG, # Executes in HOST to SPAWN sensors
#   {
#    'sequence_group'             : 'RCINIT_GROUP_7', # Policy Based
#    'init_name'                  : 'pd_sensors',
#    'init_function'              : 'pd_mon_sensors',
#   })
#
# INIT-FUNCTION, Provided by SENSORS, pd_sensors_start.c:
#
# #include "pd_mon_qurt.h"
# void pd_mon_sensors(void)
# { PD_MON_HANDLE hPDSensors = pd_mon_spawn(PD_MON_RESTART_ALWAYS, "SENSORS"); }

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------

env.VariantDir('${BUILDPATH}', '../src', duplicate=0)

#-------------------------------------------------------------------------------
# External Dependency
#-------------------------------------------------------------------------------

#env.RequireExternalApi([
#   'XYZ',
#])

#-------------------------------------------------------------------------------
# Internal Dependency
#-------------------------------------------------------------------------------

env.RequirePublicApi([
   'DAL',
   'TMS',
   'DEBUGTOOLS', # alias to TMS
   'DEBUGTRACE',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   'KERNEL', # needs to be last (also contains wrong comdef.h)
])

env.RequireRestrictedApi([
   'TMS_RESTRICTED',
   'DEBUGTOOLS', # alias to TMS
])

#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------

PD_MON_USER = [
   '${BUILDPATH}/pd_dump_user.c',
   '${BUILDPATH}/pd_mon_user.c',
   '${BUILDPATH}/pd_mon_internal_user.c',
   '${BUILDPATH}/pd_qurt_anysignal_user.c',
   '${BUILDPATH}/pd_qurt_pimutex_user.c',
]

PD_MON_HOST = [
   '${BUILDPATH}/pd_dump.c',
   #'${BUILDPATH}/pd_elf.c',
   '${BUILDPATH}/pd_mon.c',
   '${BUILDPATH}/pd_mon_internal.c',
   '${BUILDPATH}/pd_qurt_anysignal.c',
   '${BUILDPATH}/pd_qurt_pimutex.c',
   '${BUILDPATH}/pd_mon_restart_dalcfg.c'
]

#-------------------------------------------------------------------------------
# Libraries
#-------------------------------------------------------------------------------

PD_MON_USER_IMG = [
   'CORE_USER',
   'CORE_QDSP6_AUDIO_SW', 'CORE_QDSP6_SENSOR_SW', 'CORE_QDSP6_SW',
   'CORE_MODEM', 'MODEM_MODEM'
]

PD_MON_HOST_IMG = [
   'CORE_HOST',
   'CORE_QDSP6_SW',
   'CORE_MODEM', 'MODEM_MODEM',
]

env.AddLibrary(PD_MON_HOST_IMG, '${BUILDPATH}/pd_mon', PD_MON_HOST)

env.AddLibrary(PD_MON_USER_IMG, '${BUILDPATH}/pd_mon_user', PD_MON_USER)

#-------------------------------------------------------------------------------
# Task Provisioning Information
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:

 env.AddRCInitFunc(
  PD_MON_HOST_IMG,
  {
   'sequence_group'             : 'RCINIT_GROUP_0',
   'init_name'                  : 'pd_qurt_anysig',
   'init_function'              : 'pd_qurt_anysignal_driver_init',
   #'dependencies'               : [ '*NONE*', ],
  })

 env.AddRCInitFunc(
  PD_MON_HOST_IMG,
  {
   'sequence_group'             : 'RCINIT_GROUP_0',
   'init_name'                  : 'pd_qurt_pmutex',
   'init_function'              : 'pd_qurt_pimutex_driver_init',
   #'dependencies'               : [ '*NONE*', ],
  })

 env.AddRCInitFunc(
  PD_MON_HOST_IMG,
  {
   'sequence_group'             : 'RCINIT_GROUP_0',
   'init_name'                  : 'pd_dump',
   'init_function'              : 'pd_dump_driver_init',
   'dependencies'               : [ 'pd_qurt_anysig', 'pd_qurt_pmutex', ]
  })

 env.AddRCInitFunc(
  PD_MON_HOST_IMG,
  {
   'sequence_group'             : 'RCINIT_GROUP_0',
   'init_name'                  : 'pd_mon_host',
   'init_function'              : 'pd_mon_host_init',
   'dependencies'               : [ 'pd_dump', ]
  })

 env.AddRCInitFunc(
  PD_MON_USER_IMG,
  {
   'sequence_group'             : 'RCINIT_GROUP_0',
   'init_name'                  : 'pd_mon_user',
   'init_function'              : 'pd_mon_user_init',
   'dependencies'               : [ 'pd_mon_host', ]
  })

#-------------------------------------------------------------------------------
# Tracer Software Events
#-------------------------------------------------------------------------------

PD_MON_SWE_EVENTS = [
   ['PD_MON_SWE_A',            'PD_MON D             %x %x', 'T'],
   ['PD_MON_SWE_B',            'PD_MON D             %x %x', 'T'],
   ['PD_MON_SWE_C',            'PD_MON D             %x %x', 'T'],
   ['PD_MON_SWE_D',            'PD_MON D             %x %x', 'T'],
]

#if 'USES_QDSS_SWE' in env and len(PD_MON_SWE_EVENTS) != 0:
# env.AddSWEInfo(PD_MON_IMG, PD_MON_SWE_EVENTS)

#-------------------------------------------------------------------------------
# DALCFG Image "Static" Configuration Items
#-------------------------------------------------------------------------------

if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG,
   {
     'soc_xml' : ['${BUILD_ROOT}/core/debugtools/pd_mon/build/pd_mon_restart_dalcfg.xml']
   })
