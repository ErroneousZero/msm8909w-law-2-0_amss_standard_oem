#====include path optimized=====================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2013 Qualcomm Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //commercial/MPSS.JO.2.0.c1.4/Main/modem_proc/rfdevice_qfe4320/build/modem_rfdevice_qfe4320.scons#1 $
# $DateTime: 2016/12/13 08:00:27 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---    ----------------- 
# 09/10/14   vv      Added support for THERM logical device
# 10/06/13   ra      Support RFLM CCS 
# 08/05/13   aca      Initial file
#===============================================================================

Import('env')

if 'HEXAGON_TOOLS' in env:
    env.Append(CFLAGS = ['-G0']) 
    env.Append(CPPFLAGS = ['-G0']) 

if env['PRODUCT_LINE'].startswith("MPSS.TA") or env['PRODUCT_LINE'].startswith("MPSS.JO"):
    env.Append(CPPDEFINES = ['FEATURE_QFE4320_EPT_MODE_ONLY'])

if env['PRODUCT_LINE'].startswith("MPSS.JO"):
    env.Append(CPPDEFINES = ['FEATURE_QFE4320_WLAN_PORT_NOT_SUPPORTED'])
	
if env['PRODUCT_LINE'].startswith("MPSS.JO"):
    env.Append(CPPDEFINES = ['FEATURE_QFE4320_PA_OUTPUT_CAP_NOT_SUPPORTED'])
    
if env['PRODUCT_LINE'].startswith("MPSS.TA.1") or env['PRODUCT_LINE'].startswith("MPSS.JO"):
    env.Append(CPPDEFINES = ['FEATURE_QFE4320_16_BIT_ICQ_NOT_SUPPORTED'])
	
# Load test units not needed since it compiles "test"
env.LoadSoftwareUnits()

LIB_NAME        = 'rf_device_qfe4320'
IMAGE_SOURCES   = ['MODEM_MODEM','MOB_RFA']

LIB_SRC         = 'src'
LIB_PROTECTED   = 'protected'


from glob import glob

env = env.Clone()


#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

env.Append(CPPDEFINES = ['MSG_BT_SSID_DFLT=MSG_SSID_RF',]) 


env.RequirePublicApi(['RFMODEM_BOLT'],area='RFMODEM_BOLT')

env.RequirePublicApi([
        'COMMON',
		'CDMA',		
        ],
        area='RFA')

env.RequirePublicApi([
        'SERVICES',
		'KERNEL',
		'DAL',
		'SYSTEMDRIVERS',
		'DEBUGTOOLS',
		'MPROC',
		'MEMORY',
        ],
        area='CORE')

env.RequirePublicApi([
        'MMCP',
        ],
        area='MMCP')
		
env.RequirePublicApi([
        'RFDEVICE_INTERFACE',
        ],
        area='RFDEVICE_INTERFACE')		
		
env.RequirePublicApi([
        'WCDMA',
		'GERAN',
		'RF',
		'COMMON'
        ],
        area='FW')		

env.RequirePublicApi([
        'MCS',
        ],
        area='MCS')		

env.RequirePublicApi([
        'GERAN',
        ],
        area='GERAN')		
				
env.RequirePublicApi([
        'RFDEVICE_QFE4320',
        ],
        area='RFDEVICE_QFE4320')


env.RequirePublicApi([
        'RFDEVICE_QPA',
        ],
        area='RFDEVICE_QPA')

		
env.RequirePublicApi([
        'RFDEVICE_QASM',
        ],
        area='RFDEVICE_QASM')
		
env.RequirePublicApi([
        'RFDEVICE_QTHERM',
        ],
        area='RFDEVICE_QTHERM')
		
env.RequireRestrictedApi([
	'RFDEVICE_QFE4320_VIOLATIONS',
    ])

env.RequirePublicApi(['RFLM'],area='RFLM')

LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.c'))

#find all .cpp files 
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.cpp'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_SRC+'/*.s'))


for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:

        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
        LIB_SOURCES,
        ])





env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that AddBinaryLibrary can be launched
LIB_SOURCES = []  #empy list

if 'USES_NO_STRIP_NO_ODM' in env:

        SOURCE_FILES = [ ] 

        #find all .c
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.c'))
        
        #find all .cpp files 
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.cpp'))

        #find all .s files
        SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_PROTECTED+'/*.s'))


        for filename in SOURCE_FILES:
                LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME+'_protected',[
    LIB_SOURCES,
    ], pack_exception=['USES_CUSTOMER_GENERATE_LIBS'])

