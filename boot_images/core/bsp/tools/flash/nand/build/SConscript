#===============================================================================
#
# NAND Tools build script
#
# GENERAL DESCRIPTION
#    NAND Tools image build script
#
# Copyright (c) 2014 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Confidential and Proprietary
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/core/pkg/bootloaders/rel/1.2/boot_images/core/bsp/tools/flash/nand/build/SConscript#6 $
#  $DateTime: 2012/03/08 01:29:17 $
#  $Author: coresvc $
#  $Change: 2256571 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 07/14/14   sb       To support non DDR based tools
# 06/19/14   sb       Add support for 8909
# 06/06/14   sb       Add support for 9x45
#===============================================================================
import os
Import('env')

env = env.Clone()

#------------------------------------------------------------------------------
# Add new options/arguments to build system
# needs to be done before check aliases other wise help won't be updated
#------------------------------------------------------------------------------
vars = Variables(None)

# Defining this to enable PRINTF through command line
vars.Add(
   EnumVariable('NAND_USES_PRINTF',
      'Overide USES_PRINTF flag used in NAND_TOOLS', 'yes',
      allowed_values=('yes', 'no'), map={}, ignorecase=0
   )
)

# Update environment and read command line variables
vars.Update(env)

Help(vars.GenerateHelpText(env))

#------------------------------------------------------------------------------
# Aliases: Determines when to build the nand tools
#------------------------------------------------------------------------------
# aliases:  first alias is always the target then the other possibles aliases
# amss      : Alias for AMSS; anything that needs to be build for amss  
#             as a whole target (componenets from modem + apps)
# arm11     : Build components that is for ARM11 only 
# modem     : Only the modem (not applicable to single processor targets) 
# amss_arm11: amss for arm11 processor 
# arm9      : Build components that is for ARM9 only
# amss_arm9 : amss for arm9 processor 
# all       : Build all components 
# cbsp      : Build core image with nand_tools 

if env['MSM_ID'] in ['8909', '8909w']:
   aliases = [
      'nand_tools', 'tools', 'flashtools', 'all',
   ]
else:  
   aliases = [
      'not_supported',
   ]
   
if env['MSM_ID'] in ['8909', '8909w']:
   proc = 'sparrow'
else:
   proc = 'not_supported'
 
env.InitImageVars(
   alias_list = aliases,                           # list of aliases, unique name index [0]
   proc = proc,                                    # proc settings
   config = 'apps',                                # config settings
   build_tags = [                                  # list of build tags for sub lib scripts
   'NAND_TOOLS_IMAGE',
   'DAL_DEVCFG_TOOLS_IMG'],      
   tools = [
   '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/bin_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/hex_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py', 
   '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
   'buildspec_builder.py']
)

if not env.CheckAlias():
   Return()

#------------------------------------------------------------------------------
# Init default values this PROC/Image
#------------------------------------------------------------------------------
env.Replace(BUILD_TOOL_CHAIN = 'yes')
env.Replace(USES_DEVCFG = 'yes')

#===============================================================================
# NAND_TOOLS build rules
#===============================================================================

#------------------------------------------------------------------------------
# define builder for nand_param_cmm
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Configure and load in CBSP uses and path variables
#------------------------------------------------------------------------------
env.InitBuildConfig()

#------------------------------------------------------------------------------
# Load in tools scripts, and re define our CCCOM string
#------------------------------------------------------------------------------
env.LoadToolScript('arm', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.LoadToolScript('modem_defs', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
env.Tool('nand_cmm_builder', toolpath = ['.'])

# after loading default rules, make some changes
env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS}")
env.Replace(ARMLD_NOREMOVE_CMD = "")

# Force debug and symbols for flash tools, required by T32 swbp interface
env.Replace(ARM_DBG = "-g --dwarf2")     # Enable DWARF2 format debug tables
   
print "   Before ARM TOOLS Config"

# After loading default rules, make some optimization changes
env.Replace(ARMLD_NOREMOVE_CMD = "")

# Compile thumb code
env.Replace(CC = env['TCC'])

#disable unaligned access for c/c++ compiler and assembler
env.Replace(ARMCC_CODE = "${ARM_END} ${ARM_NO_UNALIGNED_ACCESS}")
env.Append(ARMCXX_CODE = " ${ARM_NO_UNALIGNED_ACCESS}")
env.Append(ASFLAGS = " --keep ${ARM_NO_UNALIGNED_ACCESS}")

# Space optimization
env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS} ")

# Define processor instruction set
env.Replace(ARM_CPU_KRAIT = "7-A.security")
env.Replace(ARM_CPU = "${ARM_CPU_CMD} ${ARM_CPU_KRAIT}")

# enable stack protection
#env.Append(CFLAGS = " --protect_stack ")

# ---------------------------------------------------------------------------
# Determine the platform
# Please see //source/qcom/qct/core/storage/flash/main/latest/src/README.txt
# for details on flash configurations.
# ---------------------------------------------------------------------------
FLASH_CFG_ID = "UKNOWN"
FLASH_DUAL_NAND_INTERLEAVE = "no"
env.Replace(TNOISYLEVEL = "3")
env.Replace(USES_PRINTF = "yes")

#----------------------------------------------------------------------------
# Define macro NAND_PAGE_SIZE used to pass a value to macro 'MAX_PAGE_SIZE',
#  which is used by nand tools and flash drivers (when compiled with tools)
# to size the static buffers.
#----------------------------------------------------------------------------
NAND_PAGE_SIZE = "4096"

# The following for FLASH_7K_CFG is not used but is place holder for
# future targets that shoudl use this configurations for hal, dal, tools

if env['MSM_ID'] in ['8909']:
   FLASH_CFG_ID = "FLASH_8K_CORTEXA7_CFG"
   MSMID_TYPE = "M8909"
   FLASH_DAL_CFG = "config_v2"
   FLASH_HAL_CFG = "config_v1"
   FLASH_NAND_TOOLS_CFG = "config_v2"
   FLASH_NOR_TOOLS_CFG = "config_v1"
   FLASH_HOSTDL_CFG = "config_v1"
   SRCROOT = "../../../../../.."

if env['MSM_ID'] in ['8909w']:
   FLASH_CFG_ID = "FLASH_8K_CORTEXA7_CFG"
   MSMID_TYPE = "M8909w"
   FLASH_DAL_CFG = "config_v2"
   FLASH_HAL_CFG = "config_v1"
   FLASH_NAND_TOOLS_CFG = "config_v2"
   FLASH_NOR_TOOLS_CFG = "config_v1"
   FLASH_HOSTDL_CFG = "config_v1"
   SRCROOT = "../../../../../.."

if env['MSM_ID'] in ['9x07']:
   env.Replace(DAL_CONFIG_TARGET_ID = '0x9007')
else:
  env.Replace(DAL_CONFIG_TARGET_ID = '0x8909')

#----------------------------------------------------------------------------
# Overide uses_print setting from cmd line
#----------------------------------------------------------------------------
if env['NAND_USES_PRINTF'] == "no":
   env.Replace(USES_PRINTF = "no")

#----------------------------------------------------------------------------
# Define the PRINT SOURCES.PRINT LOGS will be enabled only if USES_PRINTF is
# set to YES in the make file
#----------------------------------------------------------------------------
if env.has_key('USES_PRINTF') and env['USES_PRINTF'] == "yes": 
   env.Append(CPPDEFINES = [
      "FLASH_LOG_H=\\\"flash_log.h\\\"",
      "NOISY",
      "TNOISY=" + str(env['TNOISYLEVEL']),
   ])

#print env.Dump()

#----------------------------------------------------------------------------
# These are used in creation of NAND_PARAM.CMM
#  run from L2 CACHE so it works for both SURF and FFA
#----------------------------------------------------------------------------
NAND_CODE_ADDR = "0x08000000"      # address of code start
NAND_PARAM_ADDR = "0x0801E000"     # address of parameter block
NAND_ZI_BASE = "0x00210000"

#----------------------------------------------------------------------------
# These are used to manipulate the flash for DMSS programming
# and must encompass the size of the DMSS image and start
# at the address which it is located to run
# We are allowing 4GB of code space
#----------------------------------------------------------------------------
NAND_CODE_BEGIN = "0x00000000"
NAND_CODE_END = "0xFFFFFFFF"
NAND_BOOT_BEGIN = ""
NAND_BOOT_END = ""

# add extension flags for DBL
env.Append(CPPDEFINES = [
   "BUILD_TOOL_CHAIN",
   "MAX_PAGE_SIZE=" + NAND_PAGE_SIZE,
   "NAND_CODE_ADDR=" + NAND_CODE_ADDR,
   "NAND_PARAM_ADDR=" + NAND_PARAM_ADDR,
   "ZI_ADDR=" + NAND_ZI_BASE,
   "FLASH_TOOLS_HEAP_SIZE=40000",
   "FLASH_SINGLE_THREADED",
   "ENDIAN_LITTLE",
   "BUILD_JNAND",
   "BUILD_NAND",
   "QCOM_OS_ENV",
   "DAL_CONFIG_MMU_SCHEME=DAL_CONFIG_MMU_SCHEME_NONE",
   "DAL_IMAGE_FLASH_TOOLS",
   "DAL_CONFIG_TARGET_ID=${DAL_CONFIG_TARGET_ID}",
   "FLASH_WATCHDOG_H=\\\"msm.h\\\"",
])

#------------------------------------------------------------------------------
# Decide which build steps to perform
#------------------------------------------------------------------------------
# Regular build steps (no filter) is build everything, once a user starts
# using filters we have to make decisions depending on user input.
#
# The LoadAUSoftwareUnits function will take care of filtering subsystem, units, 
# etc.  This is to take care of what steps to enable disable from the top level
# script, such as building files specify in this script i.e. quartz, stubs, etc.

do_local_files = True
do_link = True
do_post_link = True

# Get user input from command line
filter_opt = env.get('FILTER_OPT')

# Limit build processing based on filter option
if filter_opt is not None:
   do_link = False
   do_post_link = False

   if not env.FilterMatch(os.getcwd()):
      do_local_files = False

#-------------------------------------------------------------------------------
# Libraries Section
#-------------------------------------------------------------------------------
core_libs, core_objs = env.LoadAUSoftwareUnits('core')
nand_tools_units = [core_libs, core_objs,]

if do_local_files:

#-------------------------------------------------------------------------------
# NAND Tools Environment
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Begin building NAND_TOOLS
#-------------------------------------------------------------------------------
   env.Replace(TARGET_NAME = 'nand_tools')
   env.Replace(TARGET_BLD_KCFG = 'M')
   env.Replace(TARGET_IMAGE = 'MODEM_PROC')
   env.Replace(FLASH_TYPE = 'nand')

#-------------------------------------------------------------------------------
# Generate Scatter Load File
#-------------------------------------------------------------------------------
   target_scl = env.SclBuilder('${SHORT_BUILDPATH}/${TARGET_NAME}', 
     '${BUILD_ROOT}/core/storage/flash/tools/src/nand/nand_in.scl')
     
if do_link:
#-------------------------------------------------------------------------------
# Generate nand_tools elf
#-------------------------------------------------------------------------------
   libs_path = env['INSTALL_LIBPATH']

   nand_tools_elf = env.Program('${SHORT_BUILDPATH}/${TARGET_NAME}', 
      source=[core_objs], LIBS=[core_libs], LIBPATH=libs_path)
   
   env.Depends(nand_tools_elf, target_scl)

   Clean(nand_tools_elf, env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.map'))
   Clean(nand_tools_elf, env.subst('${SHORT_BUILDPATH}/${TARGET_NAME}.sym'))

# copy elf and reloc to needed locations for AMSS tools to load on target
   install_target_elf = env.Install("${BUILD_ROOT}/core/storage/flash/tools/src/nand", 
      nand_tools_elf)
   
if do_post_link: 
   nand_param_cmm = env.NandParamBuilder("nand_param", install_target_elf,
   FLASH_CFG_ID=FLASH_CFG_ID,
   MSMID_TYPE=MSMID_TYPE,
   NAND_CODE_ADDR=NAND_CODE_ADDR,
   NAND_PARAM_ADDR=NAND_PARAM_ADDR,
   NAND_BOOT_BEGIN=NAND_BOOT_BEGIN,
   NAND_BOOT_END=NAND_BOOT_END,
   NAND_CODE_BEGIN=NAND_CODE_BEGIN,
   NAND_CODE_END=NAND_CODE_END,
   FLASH_NAND_TOOLS_CFG=FLASH_NAND_TOOLS_CFG,
   FLASH_DUAL_NAND_INTERLEAVE=FLASH_DUAL_NAND_INTERLEAVE,
   SRCROOT=SRCROOT)
   install_nand_param_cmm = env.Install("${BUILD_ROOT}/core/storage/flash/tools/src/nand", 
   nand_param_cmm)

   flash_prog_err_cmm = env.FlashProgErrBuilder('flash_prog_error',
   '${BUILD_ROOT}/core/storage/flash/tools/inc/flash_prog_error.h')
   install_flash_prog_err_cmm = env.Install("${BUILD_ROOT}/core/storage/flash/tools/src/nand", 
   flash_prog_err_cmm)

#===============================================================================
# Define units that will be build
#===============================================================================
   nand_tools_units = env.Alias (
      'nand_tools_units',
      [install_target_elf, install_nand_param_cmm, install_flash_prog_err_cmm]
   )

# add aliases
for alias in aliases:
   env.Alias(alias, nand_tools_units)
