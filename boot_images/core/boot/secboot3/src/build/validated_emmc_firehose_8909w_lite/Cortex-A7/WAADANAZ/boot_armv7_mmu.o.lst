


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       =====================
    2 00000000         ;
    3 00000000         ;             Arm V7 architecture assembly language MMU 
                       support
    4 00000000         ;
    5 00000000         ; GENERAL DESCRIPTION
    6 00000000         ;   This file contains the Arm V7 hierarchichal cache an
                       d mmu control    functions.
    7 00000000         ;
    8 00000000         ; Copyright 2012 - 2013 by Qualcomm Technologies, Incorp
                       orated.  All Rights Reserved 
    9 00000000         ;=======================================================
                       =====================
   10 00000000         ;=======================================================
                       =====================
   11 00000000         ;
   12 00000000         ;                       EDIT HISTORY FOR MODULE
   13 00000000         ;
   14 00000000         ; $Header: 
   15 00000000         ;
   16 00000000         ; This section contains comments describing changes made
                        to the module.
   17 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   18 00000000         ;
   19 00000000         ;
   20 00000000         ; when      who     what, where, why
   21 00000000         ; --------  -----   ------------------------------------
                       ----------------------
   22 00000000         ; 03/27/13  dh      Add mmu_get_page_table_base and memo
                       ry barriers
   23 00000000         ; 03/13/13  kedara  Added api mmu_set_dacr.
   24 00000000         ; 03/01/13  jz      Export mmu_flush_cache_and_disable
   25 00000000         ; 11/15/12  kedara  Fix end address calc for dcache_inva
                       l_region.
   26 00000000         ; 08/24/12  kedara  Added support for L2 cache (for spar
                       row)
   27 00000000         ;                   Add barriers to mmu_relocate_page_ta
                       ble_base
   28 00000000         ;                   Fixed region based cache APIs
   29 00000000         ; 03/14/12  dh      Add mmu_relocate_page_table_base, re
                       move boot_cache_mmu_init 
   30 00000000         ;                   and cache_mmu_re_enable
   31 00000000         ; 02/03/12  dh      Convert mmu_invalidate_tlb to functi
                       on
   32 00000000         ; 10/20/11  dh      Remove l1/l2 page table allocation, 
                       use pointers to them instead 
   33 00000000         ; 09/20/11  dh      use bx to return to allow interwork 
                       between arm and thumb
   34 00000000         ; 09/15/11  dh      Add 7-A.security to the architecture
                        check
   35 00000000         ; 08/26/11  dh      ported to badger, remove ISB/DSB mac
                       ro to fix compiler warning
   36 00000000         ; 05/19/11  kpa     Created
   37 00000000         ;=======================================================
                       =====================
   38 00000000         ;=======================================================
                       =====================



ARM Macro Assembler    Page 2 


   39 00000000         ;                             MODULE DEFINES
   40 00000000         ;=======================================================
                       =====================
   41 00000000         ; Options for DMB/DSB/ISB Barriers, define these manuall
                       y for RVCT < 3.0
   42 00000000                 IF               {ARCHITECTURE} != "7-A" :LAND: 
{ARCHITECTURE} != "7-M" :LAND: {ARCHITECTURE} != "7-A.security"
   47                          ENDIF
   48 00000000         ;=======================================================
                       =====================
   49 00000000         ; MACRO mdmb
   50 00000000         ;
   51 00000000         ; ARGS
   52 00000000         ;   NONE
   53 00000000         ;
   54 00000000         ; DESCRIPTION
   55 00000000         ;   Performs a data memory barrier, either using the ARM
                       v7 instruction or the
   56 00000000         ;   legacy coprocessor instruction.
   57 00000000         ;
   58 00000000         ; NOTES
   59 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   60 00000000         ;=======================================================
                       =====================
   61 00000000                 MACRO
   62 00000000                 mdmb
   63 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   64 00000000                 dmb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   65 00000000                 ELSE
   66 00000000                 IF               {CONFIG} = 32
   67 00000000                 DCI              0xF57FF050 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   68 00000000                 ELSE
   69 00000000                 DCI              0xF3BF8F50 :OR: SY 
                                                            ; ARMv7 T1 Opcode
   70 00000000                 ENDIF
   71 00000000         ;mcr    p15, 0, r0, c7, c10, 5  ; Legacy Data Memory Bar
                       rier
   72 00000000                 ENDIF
   73 00000000                 MEND
   74 00000000         ;=======================================================
                       =====================
   75 00000000         ; MACRO mdsb
   76 00000000         ;
   77 00000000         ; ARGS
   78 00000000         ;   NONE
   79 00000000         ;
   80 00000000         ; DESCRIPTION
   81 00000000         ;   Performs a data synchronization barrier, either usin
                       g the ARMv7 instruction
   82 00000000         ;   or the legacy coprocessor instruction.
   83 00000000         ;
   84 00000000         ; NOTES
   85 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
   86 00000000         ;=======================================================
                       =====================



ARM Macro Assembler    Page 3 


   87 00000000                 MACRO
   88 00000000                 mdsb
   89 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000000                 dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000000                 ELSE
   92 00000000                 IF               {CONFIG} = 32
   93 00000000                 DCI              0xF57FF040 :OR: SY 
                                                            ; ARMv7 A1 Opcode
   94 00000000                 ELSE
   95 00000000                 DCI              0xF3BF8F40 :OR: SY 
                                                            ; ARMv7 T1 Opcode
   96 00000000                 ENDIF
   97 00000000         ;mcr    p15, 0, r0, c7, c10, 4  ; Legacy Data Write Barr
                       ier
   98 00000000                 ENDIF
   99 00000000                 MEND
  100 00000000         ;=======================================================
                       =====================
  101 00000000         ; MACRO misb
  102 00000000         ;
  103 00000000         ; ARGS
  104 00000000         ;   NONE
  105 00000000         ;
  106 00000000         ; DESCRIPTION
  107 00000000         ;   Performs an instruction synchronization barrier, eit
                       her using the ARMv7
  108 00000000         ;   instruction or the legacy coprocessor instruction.
  109 00000000         ;
  110 00000000         ; NOTES
  111 00000000         ;   For reference see ARM DDI 0406A-03 section A3.8.3.
  112 00000000         ;=======================================================
                       =====================
  113 00000000                 MACRO
  114 00000000                 misb
  115 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000000                 isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000000                 ELSE
  118 00000000                 IF               {CONFIG} = 32
  119 00000000                 DCI              0xF57FF060 :OR: SY 
                                                            ; ARMv7 A1 Opcode
  120 00000000                 ELSE
  121 00000000                 DCI              0xF3BF8F60 :OR: SY 
                                                            ; ARMv7 T1 Opcode
  122 00000000                 ENDIF
  123 00000000         ;mcr    p15, 0, r0, c7, c5, 4   ; Legacy Pre-Fetch Flush
                       
  124 00000000                 ENDIF
  125 00000000                 MEND
  126 00000000         ;=======================================================
                       =====================
  127 00000000         ; MACRO mpli
  128 00000000         ;
  129 00000000         ; ARGS



ARM Macro Assembler    Page 4 


  130 00000000         ;   $Rn - The register containing the address of the ins
                       truction to preload
  131 00000000         ;
  132 00000000         ; DESCRIPTION
  133 00000000         ;   Preload instruction signals to the memory system tha
                       t instruction memory 
  134 00000000         ;   accesses from a specified address are likely in the 
                       near future.
  135 00000000         ;
  136 00000000         ; NOTES
  137 00000000         ;   The ARMv7 opcode is generated manually for RVDS < 3.
                       0.
  138 00000000         ;=======================================================
                       =====================
  139 00000000                 MACRO
  140 00000000                 mpli             $Rn
  141 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  142 00000000                 pli              $Rn         ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  143 00000000                 ELSE
  144 00000000                 IF               {CONFIG} = 32
  145 00000000                 DCI              0xF4D0F000 :OR: ((:RCONST:$Rn) 
:SHL: 16) 
                                                            ; ARMv7 A1 Opcode
  146 00000000                 ELSE
  147 00000000                 ASSERT           (:RCONST:$Rn) != 15 ; T1 opcode
                                                             can't use R15
  148 00000000                 DCI              0xF990F000 :OR: ((:RCONST:$Rn) 
:SHL: 16) 
                                                            ; ARMv7 T1 Opcode
  149 00000000                 ENDIF
  150 00000000                 ENDIF
  151 00000000                 MEND
  152 00000000         ;=======================================================
                       =====================
  153 00000000         ;                             MODULE INCLUDES
  154 00000000         ;=======================================================
                       =====================
  155 00000000         ;=======================================================
                       =====================
  156 00000000         ;
  157 00000000         ;             
  158 00000000         ; GENERAL DESCRIPTION
  159 00000000         ;   This file contains the A53 hierarchichal cache and m
                       mu control functions.
  160 00000000         ;
  161 00000000         ; Copyright 2011 by QUALCOMM, Incorporated.  All Rights 
                       Reserved 
  162 00000000         ;=======================================================
                       =====================
  163 00000000         ;=======================================================
                       =====================
  164 00000000         ;
  165 00000000         ;                        MACROS AND FUNCTIONS
  166 00000000         ;
  167 00000000         ;=======================================================
                       =====================



ARM Macro Assembler    Page 5 


  168 00000000         ;=======================================================
                       =====================
  169 00000000         ; MACRO mmu_enable_i_and_d_cache
  170 00000000         ;
  171 00000000         ; ARGS
  172 00000000         ;   NONE
  173 00000000         ;
  174 00000000         ; DESCRIPTION
  175 00000000         ;   Enables the Cache
  176 00000000         ;   Does a read modify write, so no other bits in the co
                       ntrol register are
  177 00000000         ;   affected
  178 00000000         ;=======================================================
                       =====================
  179 00000000                 MACRO
  180 00000000                 mmu_enable_i_and_d_cache
  181 00000000         ; Call memory barrier operations to ensure completion of
                        all cache
  182 00000000         ; maintenance & branch predictor operations appearing in
                        program 
  183 00000000         ; order, before these instructions
  184 00000000                 mdsb
  185 00000000                 misb
  186 00000000                 mrc              p15, 0, r0, c1, c0, 0 ;  Read S
                                                            ystem Control regis
                                                            ter   
  187 00000000                 orr              r0, r0, # (1 << 2 ) ;  C bit - 
                                                            Enable Data Caches
  188 00000000                 orr              r0, r0, # (1 << 12 ) ;  I bit -
                                                             Enable Instruction
                                                             Caches
  189 00000000                 mcr              p15, 0, r0, c1, c0, 0 ;  Write 
                                                            System Control regi
                                                            ster
  190 00000000                 mdsb
  191 00000000                 misb
  192 00000000                 MEND
  193 00000000         ;=======================================================
                       =====================
  194 00000000         ;                             MODULE IMPORTS
  195 00000000         ;=======================================================
                       =====================
  196 00000000         ;=======================================================
                       =====================
  197 00000000         ;                             MODULE EXPORTS
  198 00000000         ;=======================================================
                       =====================
  199 00000000                 EXPORT           cache_mmu_disable
  200 00000000                 EXPORT           mmu_invalidate_data_cache
  201 00000000                 EXPORT           mmu_invalidate_instruction_cach
e
  202 00000000                 EXPORT           mmu_enable_instruction_cache
  203 00000000                 EXPORT           mmu_flush_cache
  204 00000000                 EXPORT           dcache_clean_all
  205 00000000                 EXPORT           dcache_clean_region
  206 00000000                 EXPORT           dcache_inval_region
  207 00000000                 EXPORT           dcache_flush_region
  208 00000000                 EXPORT           cache_set_memory_barrier_locati
on



ARM Macro Assembler    Page 6 


  209 00000000                 EXPORT           memory_barrier
  210 00000000                 EXPORT           mmu_invalidate_tlb
  211 00000000                 EXPORT           mmu_relocate_page_table_base
  212 00000000                 EXPORT           mmu_flush_cache_and_disable
  213 00000000                 EXPORT           mmu_set_dacr
  214 00000000                 EXPORT           mmu_get_page_table_base
  215 00000000         ;=======================================================
                       =====================
  216 00000000         ;                             MODULE EQUATES
  217 00000000         ;=======================================================
                       =====================
  218 00000000 00C56870 
                       C1_REG_DEFAULT
                               EQU              0xC56870
  219 00000000         ;=======================================================
                       =====================
  220 00000000         ;
  221 00000000         ;                         MEMORY BARRIER WORD POINTER
  222 00000000         ;
  223 00000000         ; The memory barrier word must exist in non-cached regio
                       n of memory.
  224 00000000         ;=======================================================
                       =====================
  225 00000000                 AREA             CACHE_MMU_ZI, DATA, NOINIT
  226 00000000         ; This should be initialized to the actual SMEM memory b
                       arrier, otherwise NULL
  227 00000000         g_memory_barrier_ptr
  228 00000000                 %                4
  229 00000004         ;=======================================================
                       =====================
  230 00000004         ;
  231 00000004         ;                        MACROS AND FUNCTIONS
  232 00000004         ;
  233 00000004         ;=======================================================
                       =====================
  234 00000004         PRESERVE8
  235 00000004                 AREA             ARM_MMU, CODE, READONLY
  236 00000000                 CODE32
  237 00000000         ;=======================================================
                       =====================
  238 00000000         ; MACRO mmu_set_default_cfg
  239 00000000         ;
  240 00000000         ; ARGS
  241 00000000         ;   NONE
  242 00000000         ;
  243 00000000         ; DESCRIPTION
  244 00000000         ;   Sets a default value into the mmu control register
  245 00000000         ;   we do not really need to do this, but we do it to
  246 00000000         ;   know exactly the state of the processor.
  247 00000000         ;
  248 00000000         ; TBD - We should most likely only use this macro at ini
                       tialization.
  249 00000000         ;
  250 00000000         ; TBD - handle default value as or of all the below from
                        equates
  251 00000000         ;
  252 00000000         ;  Value  bit  Name    Function
  253 00000000         ; ---------------------------------------------------
  254 00000000         ;  0     0 - M bit - MMU disabled



ARM Macro Assembler    Page 7 


  255 00000000         ;  0     1 - A bit - Alignment fault disabled
  256 00000000         ;  0     2 - C bit - Data Cache disabled
  257 00000000         ;  0     3 - W bit - Write Buffer enabled
  258 00000000         ;  ----------
  259 00000000         ;  111  4-6        - SHOULD BE ONES
  260 00000000         ;  0     7 - B bit - Little Endian
  261 00000000         ;  ----------
  262 00000000         ;  0     8 - S bit - MMU Protection disabled
  263 00000000         ;  0     9 - R bit - ROM Protection disabled
  264 00000000         ;  0    10 - F bit - SHOULD BE ZERO
  265 00000000         ;  0    11 - Z bit - Program Flow Protection disabled
  266 00000000         ;  ----------
  267 00000000         ;  0    12 - I bit - Level one Instruction Cache disable
                       d
  268 00000000         ;  0    13 - V bit - Exception Vector Location is Normal
                       
  269 00000000         ;  0    14 - RR bit- Replacement strategy is Normal/Rand
                       om (not Round Robin)
  270 00000000         ;  0    15 - L4 bit- Loads to PC set the T bit
  271 00000000         ;  ----------
  272 00000000         ;  1    16 - DT bit- Global Data TCM enabled - SHOULD BE
                        ONE for ARM11JF-S
  273 00000000         ;  0    17 -       - SHOULD BE ZERO
  274 00000000         ;  1    18 - IT bit- Global Instruction TCM enabled
  275 00000000         ;  0    19 -       - SHOULD BE ZERO
  276 00000000         ;  ----------
  277 00000000         ;  0    20 -       - SHOULD BE ZERO
  278 00000000         ;  0    21 - FI bit- Low Latency interrupt features disa
                       bled
  279 00000000         ;  1    22 - U bit - Unaligned data access enabled
  280 00000000         ;  1    23 - XP bit- Hardware page translation mechanism
                        subpage AP bits disabled
  281 00000000         ;  ----------
  282 00000000         ;  0    24 - VE bit- Interrupt vectors are fixed (no VIC
                       )
  283 00000000         ;  0    25 - EE bit- CPSR E bit set to 0 on taking an ex
                       ception
  284 00000000         ;  0   26-27       - Reserved
  285 00000000         ;  ----------
  286 00000000         ;  0   28-31       - Reserved
  287 00000000         ;=======================================================
                       =====================
  288 00000000                 MACRO
  289 00000000                 mmu_set_default_cfg
  290 00000000                 ldr              r0, =C1_REG_DEFAULT
  291 00000000                 mcr              p15, 0, r0, c1, c0, 0
  292 00000000                 MEND
  293 00000000         ;=======================================================
                       =====================
  294 00000000         ; MACRO mmu_disable_i_and_d_cache
  295 00000000         ;
  296 00000000         ; ARGS
  297 00000000         ;   NONE
  298 00000000         ;
  299 00000000         ; DESCRIPTION
  300 00000000         ;   Disables the Data Cache
  301 00000000         ;   Does a read modify write, so no other bits in the co
                       ntrol register are
  302 00000000         ;   affected



ARM Macro Assembler    Page 8 


  303 00000000         ;=======================================================
                       =====================
  304 00000000                 MACRO
  305 00000000                 mmu_disable_i_and_d_cache
  306 00000000         ; Call memory barrier operations to ensure completion of
                        all cache 
  307 00000000         ; maintenance & branch predictor operations appearing in
                        program 
  308 00000000         ; order, before these instructions
  309 00000000                 mdsb
  310 00000000                 misb
  311 00000000                 mrc              p15, 0, r0, c1, c0, 0 ;  Read S
                                                            CTLR, Control regis
                                                            ter
  312 00000000                 bic              r0, r0, #0x4 ;  C bit - Disable
                                                             Data Cache
  313 00000000                 bic              r0, r0, #0x1000 ;  I bit - Disa
                                                            ble Instruction Cac
                                                            he
  314 00000000                 mcr              p15, 0, r0, c1, c0, 0 ;  Write 
                                                            SCTLR, Control regi
                                                            ster
  315 00000000                 mdsb
  316 00000000                 misb
  317 00000000                 MEND
  318 00000000         ;=======================================================
                       =====================
  319 00000000         ; MACRO mmu_set_page_table_base
  320 00000000         ;
  321 00000000         ; ARGS
  322 00000000         ;   base is as follows:
  323 00000000         ; 
  324 00000000         ;  bit  Name    Function
  325 00000000         ; ---------------------------------------------------
  326 00000000         ;  0 - C bit - Page table walk is Inner Cacheable? 
  327 00000000         ;  1 - S bit - Page table walk is Shareable?
  328 00000000         ;  2 - IMP bit - Implementation defined (Parity enabled 
                       for tablewalk)
  329 00000000         ; 3-4 - RGN bits- Outer cachable attributes for page tab
                       le walking:
  330 00000000         ;                 00=Normal memory, Outer Noncacheable
  331 00000000         ;                 01=Normal memory, Outer Write-Back, wr
                       ite allocate
  332 00000000         ;                 10=Normal memory, Outer Write-Through,
                        no allocate on write
  333 00000000         ;                 11=Normal memory, Outer Write-Back, no
                        allocate on write
  334 00000000         ;  5 - Not Outer Shareable bit. (ARMv7)
  335 00000000         ;
  336 00000000         ;  6 - Combines with bit 0 to be IRGN
  337 00000000         ;
  338 00000000         ; IRGN [6,0] when multiprocessing extensions are impleme
                       nted
  339 00000000         ;      0b00 Normal memory, Inner Non-cacheable
  340 00000000         ;      0b01 Normal memory, Inner Write-Back Write-Alloca
                       te Cacheable
  341 00000000         ;      0b10 Normal memory, Inner Write-Through Cacheable
                       
  342 00000000         ;      0b11 Normal memory, Inner Write-Back no Write-All



ARM Macro Assembler    Page 9 


                       ocate Cacheable
  343 00000000         ;  
  344 00000000         ;14-31 - Pointer to level one translation table
  345 00000000         ;
  346 00000000         ;
  347 00000000         ; DESCRIPTION
  348 00000000         ;  Sets the base address of the mmu page table.
  349 00000000         ;=======================================================
                       =====================
  350 00000000                 MACRO
  351 00000000                 mmu_set_page_table_base
                                                $base
  352 00000000                 ldr              r0, =$base  ; location of our p
                                                            age table descripti
                                                            on
  353 00000000                 mcr              p15, 0, r0, c2, c0, 0
  354 00000000                 MEND
  355 00000000         ;=======================================================
                       =====================
  356 00000000         ; MACRO mmu_enable
  357 00000000         ;
  358 00000000         ; ARGS
  359 00000000         ;   NONE
  360 00000000         ;
  361 00000000         ; DESCRIPTION
  362 00000000         ;   Enables the mmu
  363 00000000         ;   Does a read modify write, so no other bits in the co
                       ntrol register are
  364 00000000         ;   affected
  365 00000000         ;=======================================================
                       =====================
  366 00000000                 MACRO
  367 00000000                 mmu_enable
  368 00000000         ; Call memory barrier operations to ensure completion of
                        all cache 
  369 00000000         ; maintenance & branch predictor operations appearing in
                        program 
  370 00000000         ; order, before these instructions 
  371 00000000                 mdsb
  372 00000000                 misb
  373 00000000                 mrc              p15, 0, r0, c1, c0, 0 ; Read SC
                                                            TLR, Control Regist
                                                            er
  374 00000000                 orr              r0, r0, # 0x1 ; Set MMU Enable 
                                                            bit
  375 00000000                 mcr              p15, 0, r0, c1, c0, 0 ; Write S
                                                            CTLR, Control Regis
                                                            ter
  376 00000000                 mdsb
  377 00000000                 misb
  378 00000000                 MEND
  379 00000000         ;=======================================================
                       =====================
  380 00000000         ; MACRO mmu_disable
  381 00000000         ;
  382 00000000         ; ARGS
  383 00000000         ;   NONE
  384 00000000         ;
  385 00000000         ; DESCRIPTION



ARM Macro Assembler    Page 10 


  386 00000000         ;   Disables the mmu
  387 00000000         ;   Does a read modify write, so no other bits in the co
                       ntrol register are
  388 00000000         ;   affected
  389 00000000         ;=======================================================
                       =====================
  390 00000000                 MACRO
  391 00000000                 mmu_disable
  392 00000000         ; Call memory barrier operations to ensure completion of
                        all cache 
  393 00000000         ; maintenance & branch predictor operations appearing in
                        program 
  394 00000000         ; order, before these instructions 
  395 00000000                 mdsb
  396 00000000                 misb
  397 00000000                 mrc              p15, 0, r0, c1, c0, 0 ; Read SC
                                                            TLR, Control Regist
                                                            er
  398 00000000                 bic              r0, r0, #0x1 ; Clear MMU bit
  399 00000000                 mcr              p15, 0, r0, c1, c0, 0 ; Write S
                                                            CTLR, Control Regis
                                                            ter
  400 00000000                 mdsb
  401 00000000                 misb
  402 00000000                 MEND
  403 00000000         ;=======================================================
                       =====================
  404 00000000         ; MACRO mmu_align_fault_enable
  405 00000000         ;
  406 00000000         ; ARGS
  407 00000000         ;   NONE
  408 00000000         ;
  409 00000000         ; DESCRIPTION
  410 00000000         ;   Enables address alignment fault checking
  411 00000000         ;   Does a read modify write, so no other bits in the co
                       ntrol register are
  412 00000000         ;   affected
  413 00000000         ;=======================================================
                       =====================
  414 00000000                 MACRO
  415 00000000                 mmu_align_fault_enable
  416 00000000                 mrc              p15, 0, r0, c1, c0, 0 ; Read SC
                                                            TLR, Control Regist
                                                            er
  417 00000000                 orr              r0, r0, # 0x2 ; Set A bit - Ena
                                                            ble alignment fault
                                                             check
  418 00000000                 mcr              p15, 0, r0, c1, c0, 0 ; Write S
                                                            CTLR, Control Regis
                                                            ter
  419 00000000                 MEND
  420 00000000         ;=======================================================
                       =====================
  421 00000000         ; MACRO dcache_line_size
  422 00000000         ;
  423 00000000         ; ARGS
  424 00000000         ;   $reg - cache line size in bytes
  425 00000000         ;   $tmp - CTR[DMINLINE] (Log2 number of words).
  426 00000000         ;          used for calculation of the size in bytes 



ARM Macro Assembler    Page 11 


  427 00000000         ;
  428 00000000         ; DESCRIPTION
  429 00000000         ;   cache_line_size - get the cache line size from the C
                       TR register
  430 00000000         ;  (available on ARMv7+). Note that the value of $reg an
                       d $tmp 
  431 00000000         ;   will be modified.
  432 00000000         ;=======================================================
                       =====================   
  433 00000000                 MACRO
  434 00000000                 dcache_line_size $reg, $tmp
  435 00000000                 mrc              p15, 0, $tmp, c0, c0, 1 
                                                            ; read CTR register
                                                            
  436 00000000         ; read CTR bits 16 through 19 for DMINLINE
  437 00000000                 mov              $tmp, $tmp, lsr #16 ; 
  438 00000000                 ands             $tmp, $tmp, #0xF ; cache line s
                                                            ize encoding, 4 bit
                                                            s.
  439 00000000                 moveq            $reg, #0    ; for the unlikely 
                                                            event that DMINLINE
                                                             is 0
  440 00000000                 movne            $reg, #4    ; size offset. (DMI
                                                            NLINE is log2 words
                                                            )
  441 00000000                 mov              $reg, $reg, lsl $tmp ; actual c
                                                            ache line size in $
                                                            reg. 64 bytes 
  442 00000000         ; for Krait and 32 bytes for Scorpion.
  443 00000000                 MEND
  444 00000000         ;=======================================================
                       =====================
  445 00000000         ; MACRO mmu_set_dom_access
  446 00000000         ;
  447 00000000         ; ARGS
  448 00000000         ;   permissions
  449 00000000         ;     Contains 16 2 bit Domain fields
  450 00000000         ;     
  451 00000000         ;      00 = No Access - Any access to this domain causes
                        a domain fault
  452 00000000         ;      01 = Client - Accesses checked against access per
                       missions in TLB entry
  453 00000000         ;      10 = Reserved - Any access to this domain causes 
                       a domain fault
  454 00000000         ;      11 = Master - No checking, no permission fault ca
                       n be generated
  455 00000000         ;
  456 00000000         ;  +---+---+---+---+---+---+---+---+---+---+---+---+---+
                       ---+---+---+
  457 00000000         ;  |D15|D14|D13|D12|D11|D10|D09|D08|D07|D06|D05|D04|D03|
                       D02|D01|D00|
  458 00000000         ;  +---+---+---+---+---+---+---+---+---+---+---+---+---+
                       ---+---+---+
  459 00000000         ;   struct 
  460 00000000         ;   {
  461 00000000         ;      D15_Domain int:2
  462 00000000         ;      D14_Domain int:2
  463 00000000         ;      D13_Domain int:2
  464 00000000         ;      D12_Domain int:2



ARM Macro Assembler    Page 12 


  465 00000000         ;      D11_Domain int:2
  466 00000000         ;      D10_Domain int:2
  467 00000000         ;      D9_Domain int:2
  468 00000000         ;      D8_Domain int:2
  469 00000000         ;      D7_Domain int:2
  470 00000000         ;      D6_Domain int:2
  471 00000000         ;      D5_Domain int:2
  472 00000000         ;      D4_Domain int:2
  473 00000000         ;      D3_Domain int:2
  474 00000000         ;      D2_Domain int:2
  475 00000000         ;      D1_Domain int:2
  476 00000000         ;      D0_Domain int:2
  477 00000000         ;   }
  478 00000000         ;
  479 00000000         ; DESCRIPTION
  480 00000000         ;   Sets the Access permisions for the 16 domains.
  481 00000000         ;
  482 00000000         ;=======================================================
                       =====================
  483 00000000                 MACRO
  484 00000000                 mmu_set_dom_access
                                                $permisions
  485 00000000                 mov              r0,   $permisions
  486 00000000                 mcr              p15, 0, r0, c3, c0, 0
  487 00000000                 MEND
  488 00000000         ;=======================================================
                       =====================
  489 00000000         ; MACRO mmu_set_ttb_0
  490 00000000         ;
  491 00000000         ; ARGS
  492 00000000         ;   $boundary_size - 
  493 00000000         ;   $base - 
  494 00000000         ;
  495 00000000         ; DESCRIPTION
  496 00000000         ;   Sets a value that defines the Translation Table Base
                        boundary that will
  497 00000000         ;   be used by TTB Registers, and loads Translation Tabl
                       e Base Register 0
  498 00000000         ;   with the base address of page table.
  499 00000000         ;   Default value of N after power up is 0 for backward 
                       compatible. Any
  500 00000000         ;   change to the Translation Table Base Register 0 need
                       s to be paired with
  501 00000000         ;   write to Translation Table Base Control Register.
  502 00000000         ;=======================================================
                       =====================
  503 00000000                 MACRO
  504 00000000                 mmu_set_ttb_0    $boundary_size, $base
  505 00000000                 ldr              r0, =$boundary_size
  506 00000000         ;TTBCR - TTB Control Register
  507 00000000         ; 2:0 - N - Size of TTBR0 translation table
  508 00000000         ;      0b000 - 16KB (default)
  509 00000000         ;      0b001 -  8KB
  510 00000000         ;      0b010 -  4KB
  511 00000000         ;      0b011 -  2KB
  512 00000000         ;      0b100 -  1KB
  513 00000000         ;      0b101 - 512B
  514 00000000         ;      0b110 - 256B
  515 00000000         ;      0b111 - 128B



ARM Macro Assembler    Page 13 


  516 00000000                 mcr              p15, 0, r0, c2, c0, 2
  517 00000000                 ldr              r0, =$base
  518 00000000         ;TTBR0
  519 00000000                 mcr              p15, 0, r0, c2, c0, 0
  520 00000000                 MEND
  521 00000000         ;=======================================================
                       =====================
  522 00000000         ; MACRO mmu_set_ttb_1
  523 00000000         ;
  524 00000000         ; ARGS
  525 00000000         ;   $base
  526 00000000         ;
  527 00000000         ; DESCRIPTION
  528 00000000         ;   Loads the Translation Table Base Register 1 with the
                        base address of page
  529 00000000         ;   table.
  530 00000000         ;=======================================================
                       =====================
  531 00000000                 MACRO
  532 00000000                 mmu_set_ttb_1    $base
  533 00000000                 ldr              r0, =$base
  534 00000000                 ldr              r1, =0xFFFFC000
  535 00000000                 and              r0, r0, r1  ; make sure [13:0] 
                                                            are 0.
  536 00000000                 mcr              p15, 0, r0, c2, c0, 1
  537 00000000                 MEND
  538 00000000         ;=======================================================
                       =====================
  539 00000000         ; mmu_invalidate_tlb
  540 00000000         ;
  541 00000000         ; ARGS
  542 00000000         ;   NONE
  543 00000000         ;
  544 00000000         ; DESCRIPTION
  545 00000000         ;   Invalidates the entire Translation Look-aside Buffer
                        (TLB) as a unified
  546 00000000         ;   operation (Data and Instruction). Invalidates all un
                       locked entries in the
  547 00000000         ;   TLB. Causes the prefetch buffer to be flushed. All f
                       ollowing instructions
  548 00000000         ;   are fetched after the TLB invalidation.
  549 00000000         ;   We should do this before we enable to MMU.
  550 00000000         ;=======================================================
                       =====================
  551 00000000         mmu_invalidate_tlb
  552 00000000         ; Call memory barrier operations to ensure completion of
                        all cache 
  553 00000000         ; maintenance & branch predictor operations appearing in
                        program 
  554 00000000         ; order, before these instructions 
  555 00000000                 mdsb
   89 00000000                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000000 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000004                 ELSE
   98                          ENDIF
  556 00000004                 misb



ARM Macro Assembler    Page 14 


  115 00000004                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000004 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000008                 ELSE
  124                          ENDIF
  557 00000008 E3A00000        mov              r0 , #0
  558 0000000C EE080F17        mcr              p15, 0, r0, c8, c7, 0
  559 00000010                 mdsb
   89 00000010                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000010 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000014                 ELSE
   98                          ENDIF
  560 00000014                 misb
  115 00000014                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000014 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000018                 ELSE
  124                          ENDIF
  561 00000018 E12FFF1E        bx               lr
  562 0000001C         ;=======================================================
                       =====================
  563 0000001C         ; mmu_invalidate_instruction_cache
  564 0000001C         ;
  565 0000001C         ; ARGS
  566 0000001C         ;   NONE
  567 0000001C         ;
  568 0000001C         ; DESCRIPTION
  569 0000001C         ;   Invalidate the entire intruction cache.  This comman
                       d will invalidate
  570 0000001C         ;   any instructions cached.  It also flushes the branch
                        target cache.
  571 0000001C         ;   We need to do this before we enable the mmu
  572 0000001C         ;=======================================================
                       =====================
  573 0000001C         mmu_invalidate_instruction_cache
  574 0000001C         ; Call memory barrier operations to ensure completion of
                        all cache 
  575 0000001C         ; maintenance & branch predictor operations appearing in
                        program 
  576 0000001C         ; order, before these instructions 
  577 0000001C                 mdsb
   89 0000001C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000001C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000020                 ELSE
   98                          ENDIF
  578 00000020                 misb
  115 00000020                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000020 F57FF06F        isb                          ; RVDS >= 3.0 suppo



ARM Macro Assembler    Page 15 


                                                            rts ARMv7 instructi
                                                            ons
  117 00000024                 ELSE
  124                          ENDIF
  579 00000024 E3A00000        ldr              r0, =0x0
  580 00000028 EE080F15        mcr              p15, 0, r0, c8, c5, 0
  581 0000002C                 mdsb
   89 0000002C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000002C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000030                 ELSE
   98                          ENDIF
  582 00000030                 misb
  115 00000030                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000030 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000034                 ELSE
  124                          ENDIF
  583 00000034 E12FFF1E        bx               lr
  584 00000038         ;=======================================================
                       =====================
  585 00000038         ; mmu_invalidate_data_cache
  586 00000038         ;
  587 00000038         ; ARGS
  588 00000038         ;   NONE
  589 00000038         ;
  590 00000038         ; DESCRIPTION
  591 00000038         ;   Invalidate the entire data cache and the unified cac
                       he.  This command will 
  592 00000038         ;   invalidate any data cached.  It also flushes the bra
                       nch target cache.
  593 00000038         ;   We need to do this before we enable the mmu
  594 00000038         ;=======================================================
                       =====================
  595 00000038         mmu_invalidate_data_cache
  596 00000038         ; Call memory barrier operations to ensure completion of
                        all cache 
  597 00000038         ; maintenance & branch predictor operations appearing in
                        program 
  598 00000038         ; order, before these instructions 
  599 00000038                 mdsb
   89 00000038                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000038 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000003C                 ELSE
   98                          ENDIF
  600 0000003C                 misb
  115 0000003C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 0000003C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000040                 ELSE



ARM Macro Assembler    Page 16 


  124                          ENDIF
  601 00000040 E3A00000        ldr              r0, =0x0
  602 00000044 EE080F16        mcr              p15, 0, r0, c8, c6, 0
  603 00000048                 mdsb
   89 00000048                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000048 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000004C                 ELSE
   98                          ENDIF
  604 0000004C                 misb
  115 0000004C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 0000004C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000050                 ELSE
  124                          ENDIF
  605 00000050 E12FFF1E        bx               lr
  606 00000054         ;=======================================================
                       =====================
  607 00000054         ; mmu_enable_branch_prediction
  608 00000054         ;
  609 00000054         ; ARGS
  610 00000054         ;   NONE
  611 00000054         ;
  612 00000054         ; DESCRIPTION
  613 00000054         ;   Enables branch prediction
  614 00000054         ;=======================================================
                       =====================
  615 00000054         mmu_enable_branch_prediction
  616 00000054 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read fr
                                                            om CP15 Control Reg
                                                            ister
  617 00000058 E3800B02        orr              r0, r0, # (1 << 11 ) ; Enable b
                                                            ranch prediction
  618 0000005C EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write b
                                                            ack to CP15 Control
                                                             Register
  619 00000060 E3A00000        mov              r0, #0      ; Return success
  620 00000064 E12FFF1E        bx               lr
  621 00000068         ;=======================================================
                       =====================
  622 00000068         ; mmu_enable_instruction_cache
  623 00000068         ;
  624 00000068         ; ARGS
  625 00000068         ;   NONE
  626 00000068         ;
  627 00000068         ; DESCRIPTION
  628 00000068         ;   Enables the level one and level two intruction cache
                        by setting the I1 and I2 bit 
  629 00000068         ;   in the ACTLR register. The mmu remains disabled
  630 00000068         ;=======================================================
                       =====================
  631 00000068         mmu_enable_instruction_cache
  632 00000068 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  633 0000006C         ; Call memory barrier operations to ensure completion of
                        all cache 



ARM Macro Assembler    Page 17 


  634 0000006C         ; maintenance & branch predictor operations appearing in
                        program 
  635 0000006C         ; order, before these instructions 
  636 0000006C                 mdsb
   89 0000006C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000006C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000070                 ELSE
   98                          ENDIF
  637 00000070                 misb
  115 00000070                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000070 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000074                 ELSE
  124                          ENDIF
  638 00000074 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read fr
                                                            om CP15 Control Reg
                                                            ister
  639 00000078 E3800A01        orr              r0, r0, # (1 << 12 ) ; Enable I
                                                            nstruction Cache
  640 0000007C EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write b
                                                            ack to CP15 Control
                                                             Register
  641 00000080                 mdsb
   89 00000080                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000080 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000084                 ELSE
   98                          ENDIF
  642 00000084                 misb
  115 00000084                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000084 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000088                 ELSE
  124                          ENDIF
  643 00000088 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  644 0000008C         ;=======================================================
                       =====================
  645 0000008C         ; cache_mmu_disable
  646 0000008C         ;
  647 0000008C         ; ARGS
  648 0000008C         ;   
  649 0000008C         ;
  650 0000008C         ;  DESCRIPTION -
  651 0000008C         ;        Disables the MMU and cache.
  652 0000008C         ;           1- flushes out cache and write buffer
  653 0000008C         ;              also disable data and instruction cache
  654 0000008C         ;           2- disables MMU
  655 0000008C         ;           3- invalidates TLB
  656 0000008C         ;
  657 0000008C         ;        The page table is unaffected



ARM Macro Assembler    Page 18 


  658 0000008C         ;=======================================================
                       =====================
  659 0000008C         cache_mmu_disable
  660 0000008C E92D5FFF        stmfd            sp!, {r0-r12, lr}
  661 00000090         ;Flushing cache and disabling should be atomic without a
                       ny memory load
  662 00000090         ;store operations in between.   
  663 00000090 EBFFFFFE        bl               mmu_flush_cache_and_disable
  664 00000094 E3A00000        mov              r0, #0
  665 00000098                 mmu_disable
  392 00000098         ; Call memory barrier operations to ensure completion of
                        all cache 
  393 00000098         ; maintenance & branch predictor operations appearing in
                        program 
  394 00000098         ; order, before these instructions 
  395 00000098                 mdsb
   89 00000098                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000098 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000009C                 ELSE
   98                          ENDIF
  396 0000009C                 misb
  115 0000009C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 0000009C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000000A0                 ELSE
  124                          ENDIF
  397 000000A0 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read SC
                                                            TLR, Control Regist
                                                            er
  398 000000A4 E3C00001        bic              r0, r0, #0x1 ; Clear MMU bit
  399 000000A8 EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write S
                                                            CTLR, Control Regis
                                                            ter
  400 000000AC                 mdsb
   89 000000AC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000000AC F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000000B0                 ELSE
   98                          ENDIF
  401 000000B0                 misb
  115 000000B0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000000B0 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000000B4                 ELSE
  124                          ENDIF
  666 000000B4 EBFFFFFE        bl               mmu_invalidate_tlb
  667 000000B8 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  668 000000BC         ;=======================================================
                       =====================
  669 000000BC         ; memory_barrier



ARM Macro Assembler    Page 19 


  670 000000BC         ;
  671 000000BC         ; PROTOTYPE
  672 000000BC         ;   void memory_barrier(void);
  673 000000BC         ;
  674 000000BC         ; ARGS
  675 000000BC         ;
  676 000000BC         ; DESCRIPTION
  677 000000BC         ;   Creates a memory barrier
  678 000000BC         ;
  679 000000BC         ; DEPENDENCIES
  680 000000BC         ;=======================================================
                       =====================
  681 000000BC         memory_barrier
  682 000000BC                 mdsb
   89 000000BC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000000BC F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000000C0                 ELSE
   98                          ENDIF
  683 000000C0 E12FFF1E        bx               r14
  684 000000C4         ;=======================================================
                       ================
  685 000000C4         ; cache_set_memory_barrier_location
  686 000000C4         ;
  687 000000C4         ; DESCRIPTION
  688 000000C4         ;   Sets the location of the actual memory barrier in SM
                       EM
  689 000000C4         ;
  690 000000C4         ; DEPENDENCIES
  691 000000C4         ;   cache_set_memory_barrier_location() must be called w
                       ith a pointer to
  692 000000C4         ;   non-buffered or non-cached memory before any call to
                        memory_barrier(
  693 000000C4         ;   for the instruction and data streams to be syncroniz
                       ed by
  694 000000C4         ;   the memory_barrier() operation.
  695 000000C4         ;=======================================================
                       ================
  696 000000C4         cache_set_memory_barrier_location
  697 000000C4 E59F1304        ldr              r1, =g_memory_barrier_ptr
  698 000000C8 E5810000        str              r0, [r1]
  699 000000CC E12FFF1E        bx               lr
  700 000000D0         ;=======================================================
                       =====================
  701 000000D0         ; dcache_clean_all
  702 000000D0         ;
  703 000000D0         ; DESCRIPTION -
  704 000000D0         ;   Flush the whole D-cache.
  705 000000D0         ;=======================================================
                       =====================  
  706 000000D0         dcache_clean_all
  707 000000D0                 mdsb                         ; ensure ordering w
                                                            ith previous memory
                                                             accesses
   89 000000D0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000000D0 F57FF04F        dsb                          ; RVDS >= 3.0 suppo



ARM Macro Assembler    Page 20 


                                                            rts ARMv7 instructi
                                                            ons
   91 000000D4                 ELSE
   98                          ENDIF
  708 000000D4 EE300F30        mrc              p15, 1, r0, c0, c0, 1 
                                                            ; read clidr
  709 000000D8 E2103407        ands             r3, r0, #0x7000000 ; extract lo
                                                            c from clidr
  710 000000DC E1A03BA3        mov              r3, r3, lsr #23 ; left align lo
                                                            c bit field
  711 000000E0 0A00001A        beq              finished    ; if loc is 0, then
                                                             no need to clean
  712 000000E4 E3A0A000        mov              r10, #0     ; start clean at ca
                                                            che level 0
  713 000000E8         loop1
  714 000000E8 E08A20AA        add              r2, r10, r10, lsr #1 ; work out
                                                             3x current cache l
                                                            evel
  715 000000EC E1A01230        mov              r1, r0, lsr r2 ; extract cache 
                                                            type bits from clid
                                                            r
  716 000000F0 E2011007        and              r1, r1, #7  ; mask of the bits 
                                                            for current cache o
                                                            nly
  717 000000F4 E3510002        cmp              r1, #2      ; see what cache we
                                                             have at this level
                                                            
  718 000000F8 BA000011        blt              skip        ; skip if no cache,
                                                             or just i-cache
  719 000000FC EE40AF10        mcr              p15, 2, r10, c0, c0, 0 ; select
                                                             current cache leve
                                                            l in cssr
  720 00000100                 misb                         ; isb to sych the n
                                                            ew cssr&csidr
  115 00000100                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000100 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000104                 ELSE
  124                          ENDIF
  721 00000104 EE301F10        mrc              p15, 1, r1, c0, c0, 0 ; read th
                                                            e new csidr
  722 00000108 E2012007        and              r2, r1, #7  ; extract the lengt
                                                            h of the cache line
                                                            s
  723 0000010C E2822004        add              r2, r2, #4  ; add 4 (line lengt
                                                            h offset)
  724 00000110 E30043FF        ldr              r4, =0x3ff
  725 00000114 E01441A1        ands             r4, r4, r1, lsr #3 ; find maxim
                                                            um number on the wa
                                                            y size
  726 00000118 E16F5F14        clz              r5, r4      ; find bit position
                                                             of way size increm
                                                            ent
  727 0000011C E3077FFF        ldr              r7, =0x7fff
  728 00000120 E01776A1        ands             r7, r7, r1, lsr #13 ; extract m
                                                            ax number of the in
                                                            dex size



ARM Macro Assembler    Page 21 


  729 00000124         loop2
  730 00000124 E1A09004        mov              r9, r4      ; create working co
                                                            py of max way size
  731 00000128         loop3
  732 00000128 E18AB519        orr              r11, r10, r9, lsl r5 ; factor w
                                                            ay and cache number
                                                             into r11
  733 0000012C E18BB217        orr              r11, r11, r7, lsl r2 ; factor i
                                                            ndex number into r1
                                                            1
  734 00000130 EE07BF5E        mcr              p15, 0, r11, c7, c14, 2 ; clean
                                                             & invalidate by se
                                                            t/way
  735 00000134 E2599001        subs             r9, r9, #1  ; decrement the way
                                                            
  736 00000138 AAFFFFFA        bge              loop3
  737 0000013C E2577001        subs             r7, r7, #1  ; decrement the ind
                                                            ex
  738 00000140 AAFFFFF7        bge              loop2
  739 00000144         skip
  740 00000144 E28AA002        add              r10, r10, #2 ; increment cache 
                                                            number
  741 00000148 E153000A        cmp              r3, r10
  742 0000014C CAFFFFE5        bgt              loop1
  743 00000150         finished
  744 00000150 E3A0A000        mov              r10, #0     ; swith back to cac
                                                            he level 0
  745 00000154 EE40AF10        mcr              p15, 2, r10, c0, c0, 0 ; select
                                                             current cache leve
                                                            l in cssr
  746 00000158                 mdsb
   89 00000158                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000158 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000015C                 ELSE
   98                          ENDIF
  747 0000015C                 misb
  115 0000015C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 0000015C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000160                 ELSE
  124                          ENDIF
  748 00000160 E12FFF1E        bx               lr
  749 00000164         ;=======================================================
                       =====================
  750 00000164         ; dcache_flush_region
  751 00000164         ;
  752 00000164         ; PROTOTYPE
  753 00000164         ;   void dcache_flush_region(void *addr, unsigned int le
                       ngth);
  754 00000164         ;
  755 00000164         ; ARGS
  756 00000164         ;   void *addr            - Start address of memory regi
                       on
  757 00000164         ;   unsigned int length   - Length of memory region



ARM Macro Assembler    Page 22 


  758 00000164         ;
  759 00000164         ; DESCRIPTION
  760 00000164         ;   Cleans and invalidates a memory region in the cache.
                        Please note that the
  761 00000164         ;   data in the cache would be written back to main memo
                       ry if dirty and the 
  762 00000164         ;   region invalidated. So any further access to the dat
                       a would result in a 
  763 00000164         ;   cache-miss.   
  764 00000164         ;=======================================================
                       =====================
  765 00000164         dcache_flush_region
  766 00000164 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  767 00000168 E1A04000        mov              r4, r0      ; copy addr
  768 0000016C E1A05001        mov              r5, r1      ; copy size
  769 00000170         ; If the size is invalid, then there is no flushing requ
                       ired
  770 00000170 E3510000        cmp              r1, #0
  771 00000174 DA000010        ble              flush_done
  772 00000178 E0801001        add              r1, r0, r1  ; get the end addre
                                                            ss
  773 0000017C E2411001        sub              r1, r1, #1  ; Adjust the end ad
                                                            dress to correct va
                                                            lue.
  774 00000180                 dcache_line_size r2, r3      ; r2 holds cache li
                                                            ne size
  435 00000180 EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR register
                                                            
  436 00000184         ; read CTR bits 16 through 19 for DMINLINE
  437 00000184 E1A03823        mov              r3, r3, lsr #16 ; 
  438 00000188 E213300F        ands             r3, r3, #0xF ; cache line size 
                                                            encoding, 4 bits.
  439 0000018C 03A02000        moveq            r2, #0      ; for the unlikely 
                                                            event that DMINLINE
                                                             is 0
  440 00000190 13A02004        movne            r2, #4      ; size offset. (DMI
                                                            NLINE is log2 words
                                                            )
  441 00000194 E1A02312        mov              r2, r2, lsl r3 ; actual cache l
                                                            ine size in $reg. 6
                                                            4 bytes 
  442 00000198         ; for Krait and 32 bytes for Scorpion.
  775 00000198 E2423001        sub              r3, r2, #1  ; r3 holds alignmen
                                                            t mask
  776 0000019C         ; Get the cache line aligned start address
  777 0000019C E1C00003        bic              r0, r0, r3  ; r0 holds cache al
                                                            igned start address
                                                            
  778 000001A0         ; Get the cache line aligned end address and flush the l
                       ine 
  779 000001A0 E1C11003        bic              r1, r1, r3  ; r1 holds cache al
                                                            igned end address
  780 000001A4 EE071F3E        mcr              p15, 0, r1, c7, c14, 1 ; clean 
                                                            & invalidate D / U 
                                                            line 
  781 000001A8         ; Execute the loop until we have flushed all the lines b
                       etween start and end 
  782 000001A8         flush_1oop



ARM Macro Assembler    Page 23 


  783 000001A8 EE070F3E        mcr              p15, 0, r0, c7, c14, 1 ; clean 
                                                            & invalidate D / U 
                                                            line
  784 000001AC E0800002        add              r0, r0, r2
  785 000001B0 E1500001        cmp              r0, r1
  786 000001B4 2A000000        bcs              flush_done
  787 000001B8 EAFFFFFA        b                flush_1oop
  788 000001BC         flush_done
  789 000001BC                 mdsb                         ; ensure all memory
                                                             operations are com
                                                            plete
   89 000001BC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000001BC F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000001C0                 ELSE
   98                          ENDIF
  790 000001C0                 mdsb
   89 000001C0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000001C0 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000001C4                 ELSE
   98                          ENDIF
  791 000001C4                 misb
  115 000001C4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000001C4 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000001C8                 ELSE
  124                          ENDIF
  792 000001C8 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  793 000001CC         ;=======================================================
                       =====================
  794 000001CC         ; dcache_inval_region
  795 000001CC         ;
  796 000001CC         ; PROTOTYPE
  797 000001CC         ;   void dcache_inval_region(void *addr, unsigned int le
                       ngth);
  798 000001CC         ;
  799 000001CC         ; ARGS
  800 000001CC         ;   void *addr            - Start address of memory regi
                       on
  801 000001CC         ;   unsigned int length   - Length of memory region
  802 000001CC         ;
  803 000001CC         ; DESCRIPTION
  804 000001CC         ;   Invalidate a memory region in the cache. Please note
                        that the data in 
  805 000001CC         ;   the cache will not be written back to the main memor
                       y. However, any 
  806 000001CC         ;   further accesses to data in this region would result
                        in a cache-miss.   
  807 000001CC         ;=======================================================
                       =====================
  808 000001CC         dcache_inval_region
  809 000001CC E92D5FFF        stmfd            sp!, {r0-r12, lr}



ARM Macro Assembler    Page 24 


  810 000001D0 E1A04000        mov              r4, r0      ; copy start addr
  811 000001D4 E1A05001        mov              r5, r1      ; copy size 
  812 000001D8         ; If the size is invalid, then there is no invalidation 
                       required
  813 000001D8 E3510000        cmp              r1, #0
  814 000001DC DA000015        ble              inval_done
  815 000001E0 E0801001        add              r1, r0, r1  ; get the end addre
                                                            ss  
  816 000001E4 E2411001        sub              r1, r1, #1  ; Adjust the end ad
                                                            dress to correct va
                                                            lue.
  817 000001E8 E1A06001        mov              r6, r1      ; copy end address
  818 000001EC                 dcache_line_size r2, r3      ; r2 holds cache li
                                                            ne size
  435 000001EC EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR register
                                                            
  436 000001F0         ; read CTR bits 16 through 19 for DMINLINE
  437 000001F0 E1A03823        mov              r3, r3, lsr #16 ; 
  438 000001F4 E213300F        ands             r3, r3, #0xF ; cache line size 
                                                            encoding, 4 bits.
  439 000001F8 03A02000        moveq            r2, #0      ; for the unlikely 
                                                            event that DMINLINE
                                                             is 0
  440 000001FC 13A02004        movne            r2, #4      ; size offset. (DMI
                                                            NLINE is log2 words
                                                            )
  441 00000200 E1A02312        mov              r2, r2, lsl r3 ; actual cache l
                                                            ine size in $reg. 6
                                                            4 bytes 
  442 00000204         ; for Krait and 32 bytes for Scorpion.
  819 00000204 E2423001        sub              r3, r2, #1  ; r3 holds alignmen
                                                            t mask
  820 00000208         ; Get the cache line aligned start address and flush the
                        line 
  821 00000208 E1C00003        bic              r0, r0, r3  ; r0 holds cache al
                                                            igned start address
                                                            
  822 0000020C E1500004        cmp              r0, r4      ; compare if start 
                                                            address is already 
                                                            cache line aligned
  823 00000210 1E070F3E        mcrne            p15, 0, r0, c7, c14, 1 ; clean 
                                                            & invalidate D / U 
                                                            line only if not ca
                                                            che aligned
  824 00000214         ; Get the cache line aligned end address and flush the l
                       ine  
  825 00000214 E1C11003        bic              r1, r1, r3  ; r1 holds cache al
                                                            igned end address
  826 00000218 E1510006        cmp              r1, r6      ; compare if end ad
                                                            dress is already ca
                                                            che line aligned
  827 0000021C 1E071F3E        mcrne            p15, 0, r1, c7, c14, 1 ; clean 
                                                            & invalidate D / U 
                                                            line only if not ca
                                                            che aligned
  828 00000220 0E071F36        mcreq            p15, 0, r1, c7, c6, 1 ; invalid
                                                            ate D / U line if c
                                                            ache aligned



ARM Macro Assembler    Page 25 


  829 00000224         ; Execute the loop until we have invalidated all the lin
                       es between start and end 
  830 00000224         inval_loop
  831 00000224 EE070F36        mcr              p15, 0, r0, c7, c6, 1 ; invalid
                                                            ate D / U line
  832 00000228 E0800002        add              r0, r0, r2
  833 0000022C E1500001        cmp              r0, r1
  834 00000230 2A000000        bcs              inval_done
  835 00000234 EAFFFFFA        b                inval_loop
  836 00000238         inval_done
  837 00000238                 mdsb                         ; ensure all memory
                                                             operations are com
                                                            plete
   89 00000238                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000238 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000023C                 ELSE
   98                          ENDIF
  838 0000023C                 mdsb
   89 0000023C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000023C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000240                 ELSE
   98                          ENDIF
  839 00000240                 misb
  115 00000240                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000240 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000244                 ELSE
  124                          ENDIF
  840 00000244 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  841 00000248         ;=======================================================
                       =====================
  842 00000248         ; dcache_clean_region
  843 00000248         ;
  844 00000248         ; PROTOTYPE
  845 00000248         ;   void dcache_clean_region(void *addr, unsigned int le
                       ngth);
  846 00000248         ;
  847 00000248         ; ARGS
  848 00000248         ;   void *addr            - Start address of memory regi
                       on
  849 00000248         ;   unsigned int length   - Length of memory region
  850 00000248         ;
  851 00000248         ; DESCRIPTION
  852 00000248         ;   Cleans a memory region in the cache. Please note tha
                       t this will write 
  853 00000248         ;   back any data that is dirty but it will not invalida
                       te the cache region. 
  854 00000248         ;   So any further accesses to data in this region would
                        result in a cache-hit.   
  855 00000248         ;=======================================================
                       =====================



ARM Macro Assembler    Page 26 


  856 00000248         dcache_clean_region
  857 00000248 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  858 0000024C E1A04000        mov              r4, r0      ; copy addr
  859 00000250 E1A05001        mov              r5, r1      ; copy size
  860 00000254         ; If the size is invalid, then there is no clean require
                       d
  861 00000254 E3510000        cmp              r1, #0
  862 00000258 DA000010        ble              clean_done
  863 0000025C E0801001        add              r1, r0, r1  ; get the end addre
                                                            ss  
  864 00000260 E2411001        sub              r1, r1, #1  ; Adjust the end ad
                                                            dress to correct va
                                                            lue.
  865 00000264                 dcache_line_size r2, r3      ; r2 holds cache li
                                                            ne size
  435 00000264 EE103F30        mrc              p15, 0, r3, c0, c0, 1 
                                                            ; read CTR register
                                                            
  436 00000268         ; read CTR bits 16 through 19 for DMINLINE
  437 00000268 E1A03823        mov              r3, r3, lsr #16 ; 
  438 0000026C E213300F        ands             r3, r3, #0xF ; cache line size 
                                                            encoding, 4 bits.
  439 00000270 03A02000        moveq            r2, #0      ; for the unlikely 
                                                            event that DMINLINE
                                                             is 0
  440 00000274 13A02004        movne            r2, #4      ; size offset. (DMI
                                                            NLINE is log2 words
                                                            )
  441 00000278 E1A02312        mov              r2, r2, lsl r3 ; actual cache l
                                                            ine size in $reg. 6
                                                            4 bytes 
  442 0000027C         ; for Krait and 32 bytes for Scorpion.
  866 0000027C E2423001        sub              r3, r2, #1  ; r3 holds alignmen
                                                            t mask
  867 00000280         ; Get the cache line aligned start address
  868 00000280 E1C00003        bic              r0, r0, r3  ; r0 holds cache al
                                                            igned start address
                                                            
  869 00000284         ; Get the cache line aligned end address and clean the l
                       ine 
  870 00000284 E1C11003        bic              r1, r1, r3  ; r1 holds cache al
                                                            igned end address
  871 00000288 EE071F3A        mcr              p15, 0, r1, c7, c10, 1 
                                                            ; clean D / U line 
                                                            
  872 0000028C         ; Execute the loop until we have cleaned all the lines b
                       etween start and end
  873 0000028C         clean_loop
  874 0000028C EE070F3A        mcr              p15, 0, r0, c7, c10, 1 
                                                            ; clean D / U line
  875 00000290 E0800002        add              r0, r0, r2
  876 00000294 E1500001        cmp              r0, r1
  877 00000298 2A000000        bcs              clean_done
  878 0000029C EAFFFFFA        b                clean_loop
  879 000002A0         clean_done
  880 000002A0                 mdsb                         ; ensure all memory
                                                             operations are com
                                                            plete
   89 000002A0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A



ARM Macro Assembler    Page 27 


RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002A0 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002A4                 ELSE
   98                          ENDIF
  881 000002A4                 mdsb
   89 000002A4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002A4 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002A8                 ELSE
   98                          ENDIF
  882 000002A8                 misb
  115 000002A8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000002A8 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000002AC                 ELSE
  124                          ENDIF
  883 000002AC E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  884 000002B0         ;=======================================================
                       =====================
  885 000002B0         ; mmu_flush_cache
  886 000002B0         ;
  887 000002B0         ; DESCRIPTION -
  888 000002B0         ;   Flush the entire cache system.
  889 000002B0         ;   The data cache flush is now achieved using atomic cl
                       ean / invalidates
  890 000002B0         ;   working outwards from L1 cache. This is done using S
                       et/Way based cache
  891 000002B0         ;   maintainance instructions.
  892 000002B0         ;   The instruction cache can still be invalidated back 
                       to the point of
  893 000002B0         ;   unification in a single instruction.
  894 000002B0         ;=======================================================
                       =====================  
  895 000002B0         mmu_flush_cache
  896 000002B0 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  897 000002B4         ; Call memory barrier operations to ensure completion of
                        all cache 
  898 000002B4         ; maintenance & branch predictor operations appearing in
                        program 
  899 000002B4         ; order, before these instructions 
  900 000002B4                 mdsb
   89 000002B4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002B4 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002B8                 ELSE
   98                          ENDIF
  901 000002B8                 misb
  115 000002B8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000002B8 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi



ARM Macro Assembler    Page 28 


                                                            ons
  117 000002BC                 ELSE
  124                          ENDIF
  902 000002BC EBFFFFFE        bl               dcache_clean_all
  903 000002C0 E3A00000        mov              r0, #0
  904 000002C4 EE070F15        mcr              p15, 0, r0, c7, c5, 0 ; I+BTB c
                                                            ache invalidate
  905 000002C8                 mdsb
   89 000002C8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002C8 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002CC                 ELSE
   98                          ENDIF
  906 000002CC                 misb
  115 000002CC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000002CC F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000002D0                 ELSE
  124                          ENDIF
  907 000002D0 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  908 000002D4         ;=======================================================
                       =====================
  909 000002D4         ; mmu_flush_cache_and_disable
  910 000002D4         ;
  911 000002D4         ;
  912 000002D4         ; DESCRIPTION -
  913 000002D4         ;  Flush the entire cache system.
  914 000002D4         ;  The data cache flush is now achieved using atomic cle
                       an / invalidates
  915 000002D4         ;  working outwards from L1 cache. This is done using Se
                       t/Way based cache
  916 000002D4         ;  maintainance instructions.
  917 000002D4         ;  The instruction cache can still be invalidated back t
                       o the point of
  918 000002D4         ;  unification in a single instruction.
  919 000002D4         ;  Immediately after flushing data cache, the caches are
                        disabled.
  920 000002D4         ;
  921 000002D4         ;=======================================================
                       ===================== 
  922 000002D4         mmu_flush_cache_and_disable
  923 000002D4 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  924 000002D8         ; Call memory barrier operations to ensure completion of
                        all cache 
  925 000002D8         ; maintenance & branch predictor operations appearing in
                        program 
  926 000002D8         ; order, before these instructions 
  927 000002D8                 mdsb
   89 000002D8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002D8 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002DC                 ELSE
   98                          ENDIF



ARM Macro Assembler    Page 29 


  928 000002DC                 misb
  115 000002DC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000002DC F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000002E0                 ELSE
  124                          ENDIF
  929 000002E0 EBFFFFFE        bl               dcache_clean_all
  930 000002E4         ; need to disable caches here. else the restoring of reg
                       s [ldmfd]
  931 000002E4         ; caches those addresses and cache does not remain flush
                       ed.
  932 000002E4                 mmu_disable_i_and_d_cache
  306 000002E4         ; Call memory barrier operations to ensure completion of
                        all cache 
  307 000002E4         ; maintenance & branch predictor operations appearing in
                        program 
  308 000002E4         ; order, before these instructions
  309 000002E4                 mdsb
   89 000002E4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002E4 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000002E8                 ELSE
   98                          ENDIF
  310 000002E8                 misb
  115 000002E8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000002E8 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000002EC                 ELSE
  124                          ENDIF
  311 000002EC EE110F10        mrc              p15, 0, r0, c1, c0, 0 ;  Read S
                                                            CTLR, Control regis
                                                            ter
  312 000002F0 E3C00004        bic              r0, r0, #0x4 ;  C bit - Disable
                                                             Data Cache
  313 000002F4 E3C00A01        bic              r0, r0, #0x1000 ;  I bit - Disa
                                                            ble Instruction Cac
                                                            he
  314 000002F8 EE010F10        mcr              p15, 0, r0, c1, c0, 0 ;  Write 
                                                            SCTLR, Control regi
                                                            ster
  315 000002FC                 mdsb
   89 000002FC                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000002FC F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000300                 ELSE
   98                          ENDIF
  316 00000300                 misb
  115 00000300                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000300 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi



ARM Macro Assembler    Page 30 


                                                            ons
  117 00000304                 ELSE
  124                          ENDIF
  933 00000304         ; Invalidate cache after disabling it. This ensures no v
                       alid cache lines
  934 00000304         ; remain in disabled cache.  
  935 00000304 E3A00000        mov              r0, #0
  936 00000308 EE070F15        mcr              p15, 0, r0, c7, c5, 0 ; I+BTB c
                                                            ache invalidate
  937 0000030C                 mdsb
   89 0000030C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000030C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000310                 ELSE
   98                          ENDIF
  938 00000310                 misb
  115 00000310                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000310 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000314                 ELSE
  124                          ENDIF
  939 00000314 E8BD9FFF        ldmfd            sp!, {r0-r12, pc}
  940 00000318         ;=======================================================
                       =====================
  941 00000318         ; cache_mmu_init_page_table
  942 00000318         ;  INPUT       - PAGE_TABLE_BASE ADDRESS     
  943 00000318         ;  DESCRIPTION -
  944 00000318         ;        Initializes the ARM MMU.
  945 00000318         ;                1- sets a default value in the control 
                       register
  946 00000318         ;                2- sets the FSCE PID register to be fla
                       t mapping 
  947 00000318         ;                3- sets the physical address of the pag
                       e table
  948 00000318         ;                4- populates the page_table with sectio
                       n entries
  949 00000318         ;                5- sets the domain access permisions
  950 00000318         ;                6- flushes out cache and write buffer
  951 00000318         ;                7- enables the mmu
  952 00000318         ;=======================================================
                       =====================
  953 00000318         cache_mmu_init_page_table
  954 00000318 E92D5FFF        stmfd            sp!, {r0-r12, lr}
  955 0000031C E1A05000        mov              r5, r0      ; backing up the ba
                                                            se register
  956 00000320 EBFFFFFE        bl               mmu_flush_cache
  957 00000324 E3A00000        mov              r0, #0
  958 00000328 EE080F17        mcr              p15, 0, r0, c8, c7, 0 ; Invalid
                                                            ate instruction and
                                                             data TLB
  959 0000032C EE020F50        mcr              p15, 0, r0, c2, c0, 2 ; Use Tra
                                                            nslation Base Reg 0
                                                            , 16KB TTB boundary
                                                            
  960 00000330 E1A00005        mov              r0, r5



ARM Macro Assembler    Page 31 


  961 00000334 EE020F10        mcr              p15, 0, r0, c2, c0, 0 ; Update 
                                                            the TTB register to
                                                             point to Page tabl
                                                            e base 
  962 00000338 E3A00000        mov              r0, #0
  963 0000033C EE0D0F10        mcr              p15, 0, r0, c13, c0, 0 ; Set FC
                                                            SE PID Register to 
                                                            flat mapping
  964 00000340                 mmu_set_dom_access
                                                #0x00000001 ; set domain 0 for 
                                                            client access   
  485 00000340 E3A00001        mov              r0,   #0x00000001
  486 00000344 EE030F10        mcr              p15, 0, r0, c3, c0, 0
  965 00000348                 mmu_enable                   ; Enable MMU
  368 00000348         ; Call memory barrier operations to ensure completion of
                        all cache 
  369 00000348         ; maintenance & branch predictor operations appearing in
                        program 
  370 00000348         ; order, before these instructions 
  371 00000348                 mdsb
   89 00000348                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000348 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 0000034C                 ELSE
   98                          ENDIF
  372 0000034C                 misb
  115 0000034C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 0000034C F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000350                 ELSE
  124                          ENDIF
  373 00000350 EE110F10        mrc              p15, 0, r0, c1, c0, 0 ; Read SC
                                                            TLR, Control Regist
                                                            er
  374 00000354 E3800001        orr              r0, r0, # 0x1 ; Set MMU Enable 
                                                            bit
  375 00000358 EE010F10        mcr              p15, 0, r0, c1, c0, 0 ; Write S
                                                            CTLR, Control Regis
                                                            ter
  376 0000035C                 mdsb
   89 0000035C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000035C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000360                 ELSE
   98                          ENDIF
  377 00000360                 misb
  115 00000360                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000360 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000364                 ELSE
  124                          ENDIF



ARM Macro Assembler    Page 32 


  966 00000364 E8BD5FFF        ldmfd            sp!, {r0-r12, lr}
  967 00000368 E12FFF1E        bx               lr
  968 0000036C         ;=======================================================
                       =====================
  969 0000036C         ;=======================================================
                       =====================
  970 0000036C         ; mmu_relocate_page_table_base
  971 0000036C         ;
  972 0000036C         ;; ARGS
  973 0000036C         ;   unsigned long *dst_base  - destination page table ba
                       se
  974 0000036C         ;
  975 0000036C         ; DESCRIPTION -
  976 0000036C         ;  Relocate the base(TTBR0) of page table, all attribute
                       s of TTBR0 will be 
  977 0000036C         ;  perserved
  978 0000036C         ;
  979 0000036C         ;=======================================================
                       =====================
  980 0000036C         mmu_relocate_page_table_base
  981 0000036C E92D5FFF        stmfd            sp!,{r0-r12,lr}
  982 00000370                 mdsb
   89 00000370                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 00000370 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000374                 ELSE
   98                          ENDIF
  983 00000374                 misb
  115 00000374                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000374 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000378                 ELSE
  124                          ENDIF
  984 00000378 E1A01000        mov              r1,r0       ; move destination 
                                                            page table base to 
                                                            r1
  985 0000037C EE120F10        mrc              p15, 0, r0, c2, c0, 0 
                                                            ; R0 = TTBR0 
  986 00000380 E200007F        and              r0, r0, #0x7F ; KEEP THE ATTRIB
                                                            UTE BITS
  987 00000384 E1800001        orr              r0, r0, r1  ; get the new PT BA
                                                            SE with the old ATT
                                                            R bits
  988 00000388 EE020F10        mcr              p15, 0, r0, c2, c0, 0 ; Update 
                                                            the TTB register to
                                                             point to Page tabl
                                                            e base 
  989 0000038C                 mdsb
   89 0000038C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000038C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 00000390                 ELSE
   98                          ENDIF



ARM Macro Assembler    Page 33 


  990 00000390                 misb
  115 00000390                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 00000390 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 00000394                 ELSE
  124                          ENDIF
  991 00000394 EE080F17        mcr              p15, 0, r0, c8, c7, 0 
                                                            ; UTLBIALL
  992 00000398 EE070FD5        mcr              p15, 0, r0, c7, c5, 6 ; BPIALL
  993 0000039C                 mdsb
   89 0000039C                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 0000039C F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000003A0                 ELSE
   98                          ENDIF
  994 000003A0                 misb
  115 000003A0                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000003A0 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000003A4                 ELSE
  124                          ENDIF
  995 000003A4 E8BD5FFF        ldmfd            sp!,{r0-r12,lr}
  996 000003A8 E12FFF1E        bx               lr
  997 000003AC         ;=======================================================
                       =====================
  998 000003AC         ; mmu_get_page_table_base
  999 000003AC         ;
 1000 000003AC         ;; RETURN
 1001 000003AC         ;   unsigned long  -  page table base
 1002 000003AC         ;
 1003 000003AC         ; DESCRIPTION -
 1004 000003AC         ;  Return the base address of page table, all attributes
                        of TTBR0 will be 
 1005 000003AC         ;  cleared
 1006 000003AC         ;
 1007 000003AC         ;=======================================================
                       =====================
 1008 000003AC         mmu_get_page_table_base
 1009 000003AC E320F000        nop
 1010 000003B0 EE120F10        mrc              p15, 0, r0, c2, c0, 0 
                                                            ; get TTBR0
 1011 000003B4 E1A00720        lsr              r0, r0, #14 ; [31:14] is base a
                                                            ddress
 1012 000003B8 E1A00700        lsl              r0, r0, #14
 1013 000003BC E12FFF1E        bx               lr
 1014 000003C0         ;=======================================================
                       =====================
 1015 000003C0         ; mmu_set_dacr
 1016 000003C0         ;
 1017 000003C0         ; PROTOTYPE
 1018 000003C0         ;   void mmu_set_dacr(uint32 dacr_value);
 1019 000003C0         ;
 1020 000003C0         ; ARGS



ARM Macro Assembler    Page 34 


 1021 000003C0         ;   unsigned int dacr_value   - Value to be written to D
                       ACR
 1022 000003C0         ;   r0 register shall contain the argument
 1023 000003C0         ;
 1024 000003C0         ; DESCRIPTION
 1025 000003C0         ;   Configure DACR, Domain Access Control Register.
 1026 000003C0         ;   
 1027 000003C0         ;=======================================================
                       =====================    
 1028 000003C0         mmu_set_dacr
 1029 000003C0         ; Configure Domain access control register register DACR
                        to have appropriate 
 1030 000003C0         ; permissions for different domains.
 1031 000003C0 EE030F10        mcr              p15, 0, r0,  c3, c0, 0 
                                                            ; Write DACR  
 1032 000003C4                 mdsb
   89 000003C4                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
   90 000003C4 F57FF04F        dsb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
   91 000003C8                 ELSE
   98                          ENDIF
 1033 000003C8                 misb
  115 000003C8                 IF               {ARCHITECTURE} = "7-A" :LOR: {A
RCHITECTURE} = "7-M" :LOR: {ARCHITECTURE} == "7-A.security"
  116 000003C8 F57FF06F        isb                          ; RVDS >= 3.0 suppo
                                                            rts ARMv7 instructi
                                                            ons
  117 000003CC                 ELSE
  124                          ENDIF
 1034 000003CC E12FFF1E        bx               lr
 1035 000003D0         ;=======================================================
                       =====================
 1036 000003D0                 END
              00000000 
Command Line: --cpu=Cortex-A7 --apcs=/noswst/interwork --no_unaligned_access -o
/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208
_043404/b/boot_images/core/boot/secboot3/src/build/validated_emmc_firehose_8909
w_lite/Cortex-A7/WAADANAZ/boot_armv7_mmu.o -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/se
cboot3/src/build -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909W
AAAANAZB-1_20161208_043404/b/boot_images/build/cust -I. -I/local/mnt/workspace/
CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images
/core/api/boot -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAA
AANAZB-1_20161208_043404/b/boot_images/core/api/boot/qfprom -I/local/mnt/worksp
ace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_im
ages/core/buses/api/spmi -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0001
2-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/icb -I/local/mn
t/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b
/boot_images/core/buses/api/uart -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/i2c -I/
local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_
043404/b/boot_images/core/api/dal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.
2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/debugtools -
I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2016120
8_043404/b/boot_images/core/api/mproc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.
3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/services
 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161



ARM Macro Assembler    Page 35 


208_043404/b/boot_images/core/api/storage -I/local/mnt/workspace/CRMBuilds/BOOT
.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/syst
emdrivers -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZ
B-1_20161208_043404/b/boot_images/core/api/systemdrivers/pmic -I/local/mnt/work
space/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_
images/core/api/systemdrivers/hwio/msm8909 -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/wir
edconnectivity -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAA
AANAZB-1_20161208_043404/b/boot_images/core/api/securemsm -I/local/mnt/workspac
e/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_imag
es/core/securemsm/secboot/api -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3
-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/kernel/libstd/st
ringl -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_
20161208_043404/b/boot_images/core/api/hwengines -I/local/mnt/workspace/CRMBuil
ds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/a
pt/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1
_20161208_043404/b/boot_images/core/api/power -I/local/mnt/workspace/CRMBuilds/
BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot
/secboot3/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAA
ANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/common -I/local/mnt/workspa
ce/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_ima
ges/core/boot/ddr/hw/msm8909w -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3
-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/phy -I/l
ocal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_0
43404/b/boot_images/core/boot/ddr/hw/controller -I/local/mnt/workspace/CRMBuild
s/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/bo
ot/secboot3/hw/msm8909 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-
M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/dal/src -I/local/mnt/worksp
ace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_im
ages/core/dal/config -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/debugtools/version/src -I/loc
al/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043
404/b/boot_images/core/mproc/smem/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.
3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/services/uti
ls/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1
_20161208_043404/b/boot_images/core/storage/flash/src/dal -I/local/mnt/workspac
e/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_imag
es/core/storage/flash/src/hal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3
-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/tools/
inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20
161208_043404/b/boot_images/core/storage/flash/inc -I/local/mnt/workspace/CRMBu
ilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core
/storage/sdcc/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909
WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/sdcc/src/hal -I/local/mn
t/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b
/boot_images/core/storage/sdcc/src/bsp -I/local/mnt/workspace/CRMBuilds/BOOT.BF
.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/efs
/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2
0161208_043404/b/boot_images/core/storage/hfat/inc -I/local/mnt/workspace/CRMBu
ilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core
/storage/hotplug/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/tools/deviceprogramme
r_ddr/src/firehose -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M890
9WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/ufs/src -I/local/mnt/wo
rkspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boo
t_images/core/systemdrivers/tlmm/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3
.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/systemdrivers
/tlmm/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZ
B-1_20161208_043404/b/boot_images/core/wiredconnectivity/qhsusb/inc -I/local/mn



ARM Macro Assembler    Page 36 


t/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b
/boot_images/core/wiredconnectivity/qusb/inc -I/local/mnt/workspace/CRMBuilds/B
OOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/secur
emsm/cryptodrivers/ce/shared/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptod
rivers/ce/test/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M890
9WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptodrivers/prng/sh
ared/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB
-1_20161208_043404/b/boot_images/core/securemsm/cryptodrivers/prng/test/inc -I/
local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_
043404/b/boot_images/core/securemsm/cryptodrivers/prng/shared/src -I/local/mnt/
workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/b
oot_images/core/api/securemsm/secboot -I/local/mnt/workspace/CRMBuilds/BOOT.BF.
3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/securems
m/seccfg -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB
-1_20161208_043404/b/boot_images/core/securemsm/secmath/shared/inc -I/local/mnt
/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/
boot_images/core/securemsm/fuseprov/chipset/msm8909/inc -I/local/mnt/workspace/
CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images
/core/hwengines/mhi -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M89
09WAAAANAZB-1_20161208_043404/b/boot_images/core/hwengines/pcie -I/local/mnt/wo
rkspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boo
t_images/core/apt/src --list=/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00
012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/secboot3/src/build
/validated_emmc_firehose_8909w_lite/Cortex-A7/WAADANAZ/boot_armv7_mmu.o.lst --s
itelicense /local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB
-1_20161208_043404/b/boot_images/core/boot/secboot3/src/build/validated_emmc_fi
rehose_8909w_lite/Cortex-A7/WAADANAZ/boot_armv7_mmu.o.i
