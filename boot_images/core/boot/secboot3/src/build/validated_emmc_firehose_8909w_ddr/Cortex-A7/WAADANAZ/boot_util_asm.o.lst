


ARM Macro Assembler    Page 1 


    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;                     Boot Utility Assembly File
    4 00000000         ;
    5 00000000         ; GENERAL DESCRIPTION
    6 00000000         ; This file contains the assembly instructions for misce
                       lleaneous functions 
    7 00000000         ;   in Boot
    8 00000000         ;
    9 00000000         ; Copyright 2007 by Qualcomm Technologies, Incorporated.
                       All Rights Reserved.
   10 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   11 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   12 00000000         ;
   13 00000000         ;                           EDIT HISTORY FOR FILE
   14 00000000         ;
   15 00000000         ; This section contains comments describing changes made
                        to the module.
   16 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   17 00000000         ;
   18 00000000         ; $Header: 
   19 00000000         ;
   20 00000000         ; when       who     what, where, why
   21 00000000         ; --------   ---     -----------------------------------
                       ---------------------
   22 00000000         ; 08/18/10   aus     Code Clean-up
   23 00000000         ; 12/03/07   MJS     Ported from Raptor2 PBL.
   24 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   25 00000000         ;=======================================================
                       =====================
   26 00000000         ;
   27 00000000         ;                             MODULE EXPORTS
   28 00000000         ;
   29 00000000         ;=======================================================
                       =====================
   30 00000000         ; Export the symbols defined in this module
   31 00000000                 EXPORT           qmemset
   32 00000000         ;=======================================================
                       =====================
   33 00000000         ;
   34 00000000         ;                             MODULE DATA AREA
   35 00000000         ;
   36 00000000         ;=======================================================
                       =====================
   37 00000000                 PRESERVE8
   38 00000000                 AREA             BOOT_UTIL_ASM, CODE, READONLY
   39 00000000                 CODE32
   40 00000000         ;=======================================================
                       ===============
   41 00000000         ;
   42 00000000         ; void __aeabi_memset(void *dst, uint32 size, uint8 c)
   43 00000000         ; void __aeabi_memclr(uint32 *dst, uint32 size)
   44 00000000         ; void __aeabi_memclr4(uint32 *dst, uint32 size)
   45 00000000         ; void __aeabi_memclr8(uint64 *dst, uint32 size)



ARM Macro Assembler    Page 2 


   46 00000000         ; void __rt_memclr(uint32 *dst, uint32 size)
   47 00000000         ; void __rt_memclr_w(uint32 *dst, uint32 size)
   48 00000000         ;
   49 00000000         ; Fast replacement for C library memset(), optimized usi
                       ng the stm
   50 00000000         ; instruction to generate INCR8 AXI transactions, and re
                       placing all
   51 00000000         ; 8-bit memory accesses with 32-bit accesses.
   52 00000000         ; 
   53 00000000         ; Parameters:
   54 00000000         ;   r0 contains the destination address
   55 00000000         ;   r1 is the size in bytes to be set or cleared
   56 00000000         ;   r2 is the byte pattern to fill the destination memor
                       y
   57 00000000         ;
   58 00000000         ;=======================================================
                       ===============
   59 00000000         ;
   60 00000000         ; void qmemset(uint32 *dst, uint32 val, uint32 len)
   61 00000000         ; 
   62 00000000         ; Parameters:
   63 00000000         ;   r0 contains the destination address
   64 00000000         ;   r1 is the byte pattern to fill the destination memor
                       y
   65 00000000         ;   r2 is the size in bytes to be set
   66 00000000         ;
   67 00000000         ;=======================================================
                       ===============
   68 00000000         qmemset
   69 00000000         ; Re-arrange the parameters AND
   70 00000000         ; Fill the 32-bit value with the byte pattern that we wa
                       nt to set
   71 00000000 E20130FF        and              r3, r1, #0xFF
   72 00000004 E1A01002        mov              r1, r2
   73 00000008 E1832403        orr              r2, r3, r3, lsl #0x08
   74 0000000C E1822802        orr              r2, r2, r2, lsl #0x10
   75 00000010 EA000004        b                _memset_entry
   76 00000014         __aeabi_memset
   77 00000014         ; Fill the 32-bit value with the byte pattern that we wa
                       nt to set
   78 00000014 E20230FF        and              r3, r2, #0xFF
   79 00000018 E1832403        orr              r2, r3, r3, lsl #0x08
   80 0000001C E1822802        orr              r2, r2, r2, lsl #0x10
   81 00000020 EA000000        b                _memset_entry
   82 00000024         __rt_memclr
   83 00000024         __rt_memclr_w
   84 00000024         __aeabi_memclr
   85 00000024         __aeabi_memclr4
   86 00000024         __aeabi_memclr8
   87 00000024         ; If the compiler tells us we are doing a memclr then in
                       itialize the
   88 00000024         ; byte pattern to 0
   89 00000024 E3A02000        mov              r2, #0
   90 00000028         _memset
   91 00000028         _memset_w
   92 00000028         _memset_entry
   93 00000028         ; First test if the destination is unaligned and do an i
                       nitial unaligned
   94 00000028         ; access if so



ARM Macro Assembler    Page 3 


   95 00000028 E2103003        ands             r3, r0, #3
   96 0000002C 1A000020        bne              _memset_first_unaligned_bytes
   97 00000030         ; Else test if the total remaining bytes to set is less 
                       than a word,
   98 00000030         ; and if so just set the last bytes
   99 00000030 E3510004        cmp              r1, #4
  100 00000034 3A000015        bcc              _memset_last_uneven_bytes
  101 00000038         _memset_main
  102 00000038         ; Store the work registers on the stack, store 8 registe
                       rs so we can
  103 00000038         ; do this with a single burst transfer
  104 00000038 E92D0FF0        stmdb            r13!,{r4-r11}
  105 0000003C         ; Initialize all the work registers to the byte pattern
  106 0000003C E1A03002        mov              r3, r2
  107 00000040 E1A04002        mov              r4, r2
  108 00000044 E1A05002        mov              r5, r2
  109 00000048 E1A06002        mov              r6, r2
  110 0000004C E1A07002        mov              r7, r2
  111 00000050 E1A08002        mov              r8, r2
  112 00000054 E1A09002        mov              r9, r2
  113 00000058         ; We will transfer 8 words at a time, so subtract 32 fro
                       m the total
  114 00000058         ; and set the flags
  115 00000058 E2511020        subs             r1, r1, #0x20
  116 0000005C         _memset_loop
  117 0000005C         ; If the total is still non-negative then write 8 words 
                       to memory
  118 0000005C 28A003FC        stmcsia          r0!, {r2-r9}
  119 00000060         ; Subtract 32 from the total again, do this twice in the
                        main loop 
  120 00000060         ; to avoid delays due to pipeline flushing in the tight 
                       loop
  121 00000060 22511020        subcss           r1, r1, #0x20
  122 00000064 28A003FC        stmcsia          r0!, {r2-r9}
  123 00000068 22511020        subcss           r1, r1, #0x20
  124 0000006C         ; If the total is still non-negative then transfer more 
                       
  125 0000006C 2AFFFFFA        bcs              _memset_loop
  126 00000070         ; Now shift out the total 28 places, even though the tot
                       al went negative
  127 00000070         ; the lower 5 bits represent the number of bytes still t
                       o transfer, and
  128 00000070         ; by shifting by 28 bit 4 goes into the carry bit and bi
                       t 3 becomes the 
  129 00000070         ; sign bit
  130 00000070 E1B01E01        movs             r1, r1, lsl #0x1C
  131 00000074 28A0003C        stmcsia          r0!, {r2-r5}
  132 00000078 48A0000C        stmmiia          r0!, {r2-r3}
  133 0000007C         ; Now shift the total out 2 more bits, bit 2 of the tota
                       l is now the carry
  134 0000007C         ; bit and bit 1 is now the sign bit
  135 0000007C E1B01101        movs             r1, r1, lsl #2
  136 00000080 28A00004        stmcsia          r0!, {r2}
  137 00000084         ; We can restore the work registers now
  138 00000084 E8BD0FF0        ldmia            r13!,{r4-r11}
  139 00000088         ; If bits 1 and 0 are zero then we are done
  140 00000088 012FFF1E        bxeq             lr
  141 0000008C         ; Otherwise shift the total back to the right
  142 0000008C E1A01F21        mov              r1, r1, lsr #0x1E



ARM Macro Assembler    Page 4 


  143 00000090         _memset_last_uneven_bytes
  144 00000090         ; Take the number of bytes left to copy in r1, multiply 
                       by 8, and then
  145 00000090         ; shift our mask by that amount
  146 00000090 E1A01181        mov              r1, r1, LSL #3 ; Multiply by 8 
                                                            bits per byte
  147 00000094 E59FC05C        ldr              r12, =0xFFFFFFFF
  148 00000098 E1A0C11C        mov              r12, r12, LSL r1
  149 0000009C         ; Load the first partial word from memory, mask out the 
                       part that will be
  150 0000009C         ; set, mask out the part of the memset value that we wil
                       l use set the
  151 0000009C         ; memory, OR the values together and then store back to 
                       memory
  152 0000009C E5903000        ldr              r3, [r0]
  153 000000A0 E003300C        and              r3, r3, r12
  154 000000A4 E1C2C00C        bic              r12, r2, r12
  155 000000A8 E183300C        orr              r3, r3, r12
  156 000000AC E5803000        str              r3, [r0]
  157 000000B0 E12FFF1E        bx               lr
  158 000000B4         _memset_first_unaligned_bytes
  159 000000B4         ; r3 has the unaligned offset into the first word, subtr
                       act from
  160 000000B4         ; r0 to get an aligned pointer, subtract (4 minus this v
                       alue) from 
  161 000000B4         ; the total size to transfer; set the flags in case the 
                       total size 
  162 000000B4         ; just went went negative
  163 000000B4 E0400003        sub              r0, r0, r3
  164 000000B8 E0811003        add              r1, r1, r3
  165 000000BC E2511004        subs             r1, r1, #4
  166 000000C0         ; load the full 32-bit mask for memclr of partial word
  167 000000C0 E59FC030        ldr              r12, =0xFFFFFFFF
  168 000000C4         ; r3 has unaligned offset, multiply this by 8 and then s
                       hift the mask
  169 000000C4         ; by this amount
  170 000000C4 E1A03183        mov              r3, r3, LSL #3 ; Multiply by 8 
                                                            bits per byte
  171 000000C8 E1A0C31C        mov              r12, r12, LSL r3
  172 000000CC         ; If the total size went negative, the negative of r1 no
                       w has the number
  173 000000CC         ; of extra bytes that would be copied if we copied all t
                       he bytes to the end
  174 000000CC         ; of the first word, so negate r1, multiply by 8 and the
                       n shift out the
  175 000000CC         ; mask by this amount and then shift it back, so that th
                       e upper bits of
  176 000000CC         ; the mask are now zeros
  177 000000CC 42613000        rsbmi            r3, r1, #0  ; r3 = -r1
  178 000000D0 41A03183        movmi            r3, r3, LSL #3 ; Multiply by 8 
                                                            bits per byte
  179 000000D4 41A0C31C        movmi            r12, r12, LSL r3
  180 000000D8 41A0C33C        movmi            r12, r12, LSR r3
  181 000000DC         ; Load the first partial word from memory, mask out the 
                       part that will be
  182 000000DC         ; set, mask out the part of the memset value that we wil
                       l use set the
  183 000000DC         ; memory, OR the values together and then store back to 
                       memory



ARM Macro Assembler    Page 5 


  184 000000DC E5903000        ldr              r3, [r0]
  185 000000E0 E1C3300C        bic              r3, r3, r12
  186 000000E4 E002C00C        and              r12, r2, r12
  187 000000E8 E183300C        orr              r3, r3, r12
  188 000000EC E4803004        str              r3, [r0], #4
  189 000000F0         ; If the total size is still greater than 0 then do alig
                       ned memsets
  190 000000F0 CAFFFFD0        bgt              _memset_main
  191 000000F4 E12FFF1E        bx               lr
  192 000000F8                 END
              FFFFFFFF 
Command Line: --cpu=Cortex-A7 --apcs=/noswst/interwork --no_unaligned_access -o
/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208
_043404/b/boot_images/core/boot/secboot3/src/build/validated_emmc_firehose_8909
w_ddr/Cortex-A7/WAADANAZ/boot_util_asm.o -I/local/mnt/workspace/CRMBuilds/BOOT.
BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/secb
oot3/src/build -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAA
AANAZB-1_20161208_043404/b/boot_images/build/cust -I. -I/local/mnt/workspace/CR
MBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/c
ore/api/boot -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAA
NAZB-1_20161208_043404/b/boot_images/core/api/boot/qfprom -I/local/mnt/workspac
e/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_imag
es/core/buses/api/spmi -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-
M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/icb -I/local/mnt/
workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/b
oot_images/core/buses/api/uart -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c
3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/i2c -I/lo
cal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_04
3404/b/boot_images/core/api/dal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.
c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/debugtools -I/
local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_
043404/b/boot_images/core/api/mproc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.
1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/services -
I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2016120
8_043404/b/boot_images/core/api/storage -I/local/mnt/workspace/CRMBuilds/BOOT.B
F.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/system
drivers -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-
1_20161208_043404/b/boot_images/core/api/systemdrivers/pmic -I/local/mnt/worksp
ace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_im
ages/core/api/systemdrivers/hwio/msm8909 -I/local/mnt/workspace/CRMBuilds/BOOT.
BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/wired
connectivity -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAA
NAZB-1_20161208_043404/b/boot_images/core/api/securemsm -I/local/mnt/workspace/
CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images
/core/securemsm/secboot/api -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0
0012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/kernel/libstd/stri
ngl -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20
161208_043404/b/boot_images/core/api/hwengines -I/local/mnt/workspace/CRMBuilds
/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/apt
/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2
0161208_043404/b/boot_images/core/api/power -I/local/mnt/workspace/CRMBuilds/BO
OT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/s
ecboot3/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAAN
AZB-1_20161208_043404/b/boot_images/core/boot/ddr/common -I/local/mnt/workspace
/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_image
s/core/boot/ddr/hw/msm8909w -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0
0012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/phy -I/loc
al/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043
404/b/boot_images/core/boot/ddr/hw/controller -I/local/mnt/workspace/CRMBuilds/



ARM Macro Assembler    Page 6 


BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot
/secboot3/hw/msm8909 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/dal/src -I/local/mnt/workspac
e/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_imag
es/core/dal/config -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M890
9WAAAANAZB-1_20161208_043404/b/boot_images/core/debugtools/version/src -I/local
/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_04340
4/b/boot_images/core/mproc/smem/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.
1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/services/utils
/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2
0161208_043404/b/boot_images/core/storage/flash/src/dal -I/local/mnt/workspace/
CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images
/core/storage/flash/src/hal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0
0012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/tools/in
c -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2016
1208_043404/b/boot_images/core/storage/flash/inc -I/local/mnt/workspace/CRMBuil
ds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/s
torage/sdcc/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WA
AAANAZB-1_20161208_043404/b/boot_images/core/storage/sdcc/src/hal -I/local/mnt/
workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/b
oot_images/core/storage/sdcc/src/bsp -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3
.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/efs/i
nc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_201
61208_043404/b/boot_images/core/storage/hfat/inc -I/local/mnt/workspace/CRMBuil
ds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/s
torage/hotplug/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M890
9WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/tools/deviceprogrammer_
ddr/src/firehose -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909W
AAAANAZB-1_20161208_043404/b/boot_images/core/storage/ufs/src -I/local/mnt/work
space/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_
images/core/systemdrivers/tlmm/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1
.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/systemdrivers/t
lmm/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-
1_20161208_043404/b/boot_images/core/wiredconnectivity/qhsusb/inc -I/local/mnt/
workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/b
oot_images/core/wiredconnectivity/qusb/inc -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securem
sm/cryptodrivers/ce/shared/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c
3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptodri
vers/ce/test/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909W
AAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptodrivers/prng/shar
ed/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1
_20161208_043404/b/boot_images/core/securemsm/cryptodrivers/prng/test/inc -I/lo
cal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_04
3404/b/boot_images/core/securemsm/cryptodrivers/prng/shared/src -I/local/mnt/wo
rkspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boo
t_images/core/api/securemsm/secboot -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.
1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/securemsm/
seccfg -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1
_20161208_043404/b/boot_images/core/securemsm/secmath/shared/inc -I/local/mnt/w
orkspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/bo
ot_images/core/securemsm/fuseprov/chipset/msm8909/inc -I/local/mnt/workspace/CR
MBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/c
ore/hwengines/mhi -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909
WAAAANAZB-1_20161208_043404/b/boot_images/core/hwengines/pcie -I/local/mnt/work
space/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_
images/core/apt/src --list=/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0001
2-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/secboot3/src/build/v
alidated_emmc_firehose_8909w_ddr/Cortex-A7/WAADANAZ/boot_util_asm.o.lst --sitel



ARM Macro Assembler    Page 7 


icense /local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2
0161208_043404/b/boot_images/core/boot/secboot3/src/build/validated_emmc_fireho
se_8909w_ddr/Cortex-A7/WAADANAZ/boot_util_asm.o.i
