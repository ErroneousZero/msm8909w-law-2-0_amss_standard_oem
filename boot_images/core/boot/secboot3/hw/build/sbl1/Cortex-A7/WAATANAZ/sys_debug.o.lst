


ARM Macro Assembler    Page 1 


    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;             System Debug Image Initialization Routine
    4 00000000         ;
    5 00000000         ; GENERAL DESCRIPTION
    6 00000000         ; This file contains initialization code for the system_
                       debug image.
    7 00000000         ;       This performs a dump of the CPU core information
                        as well.
    8 00000000         ;
    9 00000000         ; Copyright 2014 by Qualcomm Technologies, Incorporated.
                       All Rights Reserved.
   10 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   11 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   12 00000000         ;
   13 00000000         ;                           EDIT HISTORY FOR FILE
   14 00000000         ;
   15 00000000         ; This section contains comments describing changes made
                        to the module.
   16 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   17 00000000         ;
   18 00000000         ; when         who   what, where, why
   19 00000000         ; ----------   ---   -----------------------------------
                       ---------------------
   20 00000000         ; 03/13/2014   ck    Save r0 and r1 values that were sto
                       red by PBL 
   21 00000000         ; 03/03/2014   ck    Pull PS_HOLD high at start because 
                       PBL is not doing it
   22 00000000         ; 02/18/2014   ck    Removed duplicate 32 to 64 bit swit
                       ch logic
   23 00000000         ;                    Single copy is stored in SDI code s
                       pace and shared
   24 00000000         ; 02/06/2014   ck    Added A53 32 to 64 bit logic switch
                        logic 
   25 00000000         ; 01/02/2014   ck    Initial release for Bear family
   26 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   27 00000000         ;=======================================================
                       =====================
   28 00000000         ;
   29 00000000         ;                            MODULE INCLUDES
   30 00000000         ;
   31 00000000         ;=======================================================
                       =====================
   32 00000000         ;=======================================================
                       =====================
   33 00000000         ;
   34 00000000         ;                             MODULE DEFINES
   35 00000000         ;
   36 00000000         ;=======================================================
                       =====================
   37 00000000         ;
   38 00000000 00000010 
                       Mode_USR
                               EQU              0x10



ARM Macro Assembler    Page 2 


   39 00000000 00000011 
                       Mode_FIQ
                               EQU              0x11
   40 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   41 00000000 00000013 
                       Mode_SVC
                               EQU              0x13
   42 00000000 00000016 
                       Mode_MON
                               EQU              0x16
   43 00000000 00000017 
                       Mode_ABT
                               EQU              0x17
   44 00000000 0000001A 
                       Mode_HYP
                               EQU              0x1A
   45 00000000 0000001B 
                       Mode_UND
                               EQU              0x1B
   46 00000000 0000001F 
                       Mode_SYS
                               EQU              0x1F
   47 00000000 00000080 
                       I_Bit   EQU              0x80
   48 00000000 00000040 
                       F_Bit   EQU              0x40
   49 00000000         ; Secure Configuration Register Bits
   50 00000000 00000001 
                       SCR_NS_BIT
                               EQU              0x01        ; Non-Secure (NS) b
                                                            it
   51 00000000 00000002 
                       SCR_IRQ_BIT
                               EQU              0x02        ; IRQ bit
   52 00000000 00000004 
                       SCR_FIQ_BIT
                               EQU              0x04        ; FIQ bit
   53 00000000 00000010 
                       SCR_FW_BIT
                               EQU              0x10        ; F Bit writable (F
                                                            W)
   54 00000000 00000020 
                       SCR_AW_BIT
                               EQU              0x20        ; A Bit writable (A
                                                            W)
   55 00000000         ;=======================================================
                       =====================
   56 00000000         ;
   57 00000000         ;                             MODULE IMPORTS
   58 00000000         ;
   59 00000000         ;=======================================================
                       =====================
   60 00000000         ; Import the external symbols that are referenced in thi
                       s module.
   61 00000000                 IMPORT           sys_debug_undefined_c_handler
   62 00000000                 IMPORT           sys_debug_swi_c_handler
   63 00000000                 IMPORT           sys_debug_prefetch_abort_c_hand



ARM Macro Assembler    Page 3 


ler
   64 00000000                 IMPORT           sys_debug_data_abort_c_handler
   65 00000000                 IMPORT           sys_debug_reserved_c_handler
   66 00000000                 IMPORT           sys_debug_irq_c_handler
   67 00000000                 IMPORT           sys_debug_fiq_c_handler
   68 00000000         ; Main Entry point of C code
   69 00000000                 IMPORT           sys_debug_main_ctl
   70 00000000         ;=======================================================
                       =====================
   71 00000000         ;
   72 00000000         ;                             MODULE DATA AREA
   73 00000000         ;
   74 00000000         ;=======================================================
                       =====================
   75 00000000                 PRESERVE8
   76 00000000                 AREA             SYSTEM_DEBUG_VECTOR_TABLE, CODE
, READWRITE
   77 00000000                 CODE32
   78 00000000         unused_reset_vector
   79 00000000 00000000        DCD              0x00000000
   80 00000004         undefined_instruction_vector
   81 00000004 00000000        DCD              sys_debug_undefined_c_handler
   82 00000008         swi_vector
   83 00000008 00000000        DCD              sys_debug_swi_c_handler
   84 0000000C         prefetch_abort_vector
   85 0000000C 00000000        DCD              sys_debug_prefetch_abort_c_hand
ler
   86 00000010         data_abort_vector
   87 00000010 00000000        DCD              sys_debug_data_abort_c_handler
   88 00000014         reserved_vector
   89 00000014 00000000        DCD              sys_debug_reserved_c_handler
   90 00000018         irq_vector
   91 00000018 00000000        DCD              sys_debug_irq_c_handler
   92 0000001C         fiq_vector
   93 0000001C 00000000        DCD              sys_debug_fiq_c_handler
   94 00000020         ;=======================================================
                       =====================
   95 00000020         ; Qualcomm System Debug Image ENTRY POINT
   96 00000020         ;=======================================================
                       =====================
   97 00000020                 AREA             SYSTEM_DEBUG_ENTRY, CODE, READO
NLY, ALIGN=4
   98 00000000                 CODE32
   99 00000000         ; This function is written specifically to match the sys
                       _debug_cpu_ctxt_regs
  100 00000000         ; structure.  If the structure changes this function mus
                       t change.
  101 00000000         ; The structure has 64 bit values so each value must be 
                       stored individually.
  102 00000000         ; 
  103 00000000         sys_debug_entry
  104 00000000         ; We have two registers to play with  
  105 00000000         ; r0, r1 have been saved by the PBL
  106 00000000         ; Always start in monitor mode.
  107 00000000 E321F0D6        msr              CPSR_c, #Mode_MON:OR:I_Bit:OR:F
_Bit
  108 00000004         ; PS_HOLD needs to be pulled high to fix hardware issue
  109 00000004 E59F015C        ldr              r0, =((0x004a0000 + 0x0000b000)
 + 0x00000000)



ARM Macro Assembler    Page 4 


  110 00000008 E3A01001        ldr              r1, =0x1
  111 0000000C E5801000        str              r1, [r0]
  112 00000010         ; Keep r0 as the base address of the structure and use r
                       1 as current address
  113 00000010 E59F0154        ldr              r0, =sys_debug_cpu_ctxt_base
  114 00000014 E1A01000        mov              r1, r0
  115 00000018         ; Store r2 - r12 taking into account the 64 bit structur
                       e
  116 00000018         ; r0 and r1 will be saved later.  These were stored by P
                       BL. 
  117 00000018 E2811008        add              r1, r1, #8
  118 0000001C E2811008        add              r1, r1, #8
  119 00000020 E5812000        str              r2, [r1]
  120 00000024 E2811008        add              r1, r1, #8
  121 00000028 E5813000        str              r3, [r1]
  122 0000002C E2811008        add              r1, r1, #8
  123 00000030 E5814000        str              r4, [r1]
  124 00000034 E2811008        add              r1, r1, #8
  125 00000038 E5815000        str              r5, [r1]
  126 0000003C E2811008        add              r1, r1, #8
  127 00000040 E5816000        str              r6, [r1]
  128 00000044 E2811008        add              r1, r1, #8
  129 00000048 E5817000        str              r7, [r1]
  130 0000004C E2811008        add              r1, r1, #8
  131 00000050 E5818000        str              r8, [r1]
  132 00000054 E2811008        add              r1, r1, #8
  133 00000058 E5819000        str              r9, [r1]
  134 0000005C E2811008        add              r1, r1, #8
  135 00000060 E581A000        str              r10, [r1]
  136 00000064 E2811008        add              r1, r1, #8
  137 00000068 E581B000        str              r11, [r1]
  138 0000006C E2811008        add              r1, r1, #8
  139 00000070 E581C000        str              r12, [r1]
  140 00000074 E2811008        add              r1, r1, #8
  141 00000078         ; Switch to SYS mode so we can get r13 and r14 from USR 
                       mode.
  142 00000078         ; SYS mode uses the same registers as USR but maintains 
                       privliges.
  143 00000078 F102001F        cps              #Mode_SYS
  144 0000007C E581D000        str              r13, [r1]
  145 00000080 E2811008        add              r1, r1, #8
  146 00000084 E581E000        str              r14, [r1]
  147 00000088 E2811008        add              r1, r1, #8
  148 0000008C         ; HYP mode only exists in NS world.
  149 0000008C         ; Skipping collection of r13 HYP for now.
  150 0000008C E2811008        add              r1, r1, #8
  151 00000090         ; Store r14 and r13 for IRQ Mode
  152 00000090 F1020012        cps              #Mode_IRQ
  153 00000094 E581E000        str              r14, [r1]
  154 00000098 E2811008        add              r1, r1, #8
  155 0000009C E581D000        str              r13, [r1]
  156 000000A0 E2811008        add              r1, r1, #8
  157 000000A4         ; Store r14 and r13 for SVC Mode
  158 000000A4 F1020013        cps              #Mode_SVC
  159 000000A8 E581E000        str              r14, [r1]
  160 000000AC E2811008        add              r1, r1, #8
  161 000000B0 E581D000        str              r13, [r1]
  162 000000B4 E2811008        add              r1, r1, #8
  163 000000B8         ; Store r14 and r13 for ABT Mode



ARM Macro Assembler    Page 5 


  164 000000B8 F1020017        cps              #Mode_ABT
  165 000000BC E581E000        str              r14, [r1]
  166 000000C0 E2811008        add              r1, r1, #8
  167 000000C4 E581D000        str              r13, [r1]
  168 000000C8 E2811008        add              r1, r1, #8
  169 000000CC         ; Store r14 and r13 for UND Mode
  170 000000CC F102001B        cps              #Mode_UND
  171 000000D0 E581E000        str              r14, [r1]
  172 000000D4 E2811008        add              r1, r1, #8
  173 000000D8 E581D000        str              r13, [r1]
  174 000000DC E2811008        add              r1, r1, #8
  175 000000E0         ; Store r8 - r14 for FIQ Mode
  176 000000E0 F1020011        cps              #Mode_FIQ
  177 000000E4 E5818000        str              r8, [r1]
  178 000000E8 E2811008        add              r1, r1, #8
  179 000000EC E5819000        str              r9, [r1]
  180 000000F0 E2811008        add              r1, r1, #8
  181 000000F4 E581A000        str              r10, [r1]
  182 000000F8 E2811008        add              r1, r1, #8
  183 000000FC E581B000        str              r11, [r1]
  184 00000100 E2811008        add              r1, r1, #8
  185 00000104 E581C000        str              r12, [r1]
  186 00000108 E2811008        add              r1, r1, #8
  187 0000010C E581D000        str              r13, [r1]
  188 00000110 E2811008        add              r1, r1, #8
  189 00000114 E581E000        str              r14, [r1]
  190 00000118 E2811008        add              r1, r1, #8
  191 0000011C         ; Skip the next entry in the struct.  This is PC and wil
                       l be filled in later
  192 0000011C E2811008        add              r1, r1, #8
  193 00000120         ; Store r13 and r14 for MON Mode
  194 00000120 F1020016        cps              #Mode_MON
  195 00000124 E581D000        str              r13, [r1]
  196 00000128 E2811008        add              r1, r1, #8
  197 0000012C E581E000        str              r14, [r1]
  198 00000130 E2811008        add              r1, r1, #8
  199 00000134         ; HYP mode only exists in NS world.
  200 00000134         ; Skipping collection of r14 HYP for now.
  201 00000134 E2811008        add              r1, r1, #8
  202 00000138         ; Switch back to SVC Mode before continuing
  203 00000138 F1020013        cps              #Mode_SVC
  204 0000013C         ; Save r0 and r1 that was stored by PBL
  205 0000013C         ; r0 was stored to the Process id register
  206 0000013C EE1D2F50        MRC              p15, 0, r2, c13, c0, 2
  207 00000140         ; r1 was stored to TPIDRPRW
  208 00000140 EE1D3F90        MRC              p15, 0, r3, c13, c0, 4
  209 00000144         ; Reset structure pointer back to beginning 
  210 00000144 E1A01000        mov              r1, r0
  211 00000148 E5812000        str              r2, [r1]
  212 0000014C E2811008        add              r1, r1, #8
  213 00000150 E5813000        str              r3, [r1]
  214 00000154         ; Set the stack pointer
  215 00000154 E59FD014        ldr              r13, =sys_debug_cpu_stack_top
  216 00000158         ; We have saved all the registers for this CPU.
  217 00000158         ; Now we can branch to the main loop passing the ctxt st
                       ructure address
  218 00000158         ; We will not return
  219 00000158 E59F5014        ldr              r5,  =sys_debug_main_ctl
  220 0000015C E12FFF35        blx              r5



ARM Macro Assembler    Page 6 


  221 00000160         ; For safety 
  222 00000160 EBFFFFFF        bl               loophere    ; never returns, ke
                                                            ep lr in r14 for de
                                                            bug 
  223 00000164         loophere
  224 00000164 E12FFF1E        bx               r14
  225 00000168         ;=======================================================
                       ================
  226 00000168         ;
  227 00000168         ;  Data for the module 
  228 00000168         ;
  229 00000168         ;=======================================================
                       ================
  230 00000168 004AB000 
              00000000 
              00000000 
              00000000         AREA             SYSTEM_DEBUG_DATA , DATA, READW
RITE
  231 00000000         ; Allocate memory for sys_debug_cpu_ctxt_type
  232 00000000         ; Round up big so if structure changes it does not overf
                       low
  233 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    sys_debug_cpu_ctxt_base
                               SPACE            0x200
  234 00000200         ; Alocate memory in RW data area for the stack 
  235 00000200 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 10 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    sys_debug_cpu_stack_bottom
                               SPACE            0x110
  236 00000310 00 00 00 
              00       sys_debug_cpu_stack_top
                               SPACE            0x4
  237 00000314         END
                       
Command Line: --cpu=Cortex-A7 --apcs=/noswst/interwork --no_unaligned_access -o
/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208
_043404/b/boot_images/core/boot/secboot3/hw/build/sbl1/Cortex-A7/WAATANAZ/sys_d
ebug.o -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1



ARM Macro Assembler    Page 11 


_20161208_043404/b/boot_images/core/boot/secboot3/hw/build -I/local/mnt/workspa
ce/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_ima
ges/build/cust -I. -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M890
9WAAAANAZB-1_20161208_043404/b/boot_images/core/api/boot -I/local/mnt/workspace
/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_image
s/core/api/boot/qfprom -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-
M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/spmi -I/local/mnt
/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/
boot_images/core/buses/api/icb -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c
3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/buses/api/uart -I/l
ocal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_0
43404/b/boot_images/core/buses/api/i2c -I/local/mnt/workspace/CRMBuilds/BOOT.BF
.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/dal -I/
local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_
043404/b/boot_images/core/api/services -I/local/mnt/workspace/CRMBuilds/BOOT.BF
.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/storage
 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161
208_043404/b/boot_images/core/api/systemdrivers -I/local/mnt/workspace/CRMBuild
s/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/ap
i/systemdrivers/pmic -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/systemdrivers/hwio/msm890
9 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2016
1208_043404/b/boot_images/core/api/wiredconnectivity -I/local/mnt/workspace/CRM
Builds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/co
re/api/securemsm -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909W
AAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/secboot/api -I/local/mn
t/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b
/boot_images/core/api/kernel/libstd/stringl -I/local/mnt/workspace/CRMBuilds/BO
OT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/hw
engines -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-
1_20161208_043404/b/boot_images/core/boot/secboot3/src -I/local/mnt/workspace/C
RMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/
core/boot/ddr/common -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/msm8909w -I/local
/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_04340
4/b/boot_images/core/boot/ddr/hw/phy -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3
.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/c
ontroller -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZ
B-1_20161208_043404/b/boot_images/core/boot/secboot3/hw/msm8909 -I/local/mnt/wo
rkspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boo
t_images/core/dal/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M
8909WAAAANAZB-1_20161208_043404/b/boot_images/core/dal/config -I/local/mnt/work
space/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_
images/core/services/utils/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c
3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/src/d
al -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_201
61208_043404/b/boot_images/core/storage/flash/src/hal -I/local/mnt/workspace/CR
MBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/c
ore/storage/flash/tools/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0
0012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/inc -I/l
ocal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_0
43404/b/boot_images/core/storage/sdcc/src -I/local/mnt/workspace/CRMBuilds/BOOT
.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/
sdcc/src/hal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAA
NAZB-1_20161208_043404/b/boot_images/core/storage/sdcc/src/bsp -I/local/mnt/wor
kspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot
_images/core/storage/efs/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-
00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/hfat/inc -I/l
ocal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_0



ARM Macro Assembler    Page 12 


43404/b/boot_images/core/storage/hotplug/inc -I/local/mnt/workspace/CRMBuilds/B
OOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/stora
ge/tools/deviceprogrammer_ddr/src/firehose -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage
/ufs/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB
-1_20161208_043404/b/boot_images/core/systemdrivers/tlmm/inc -I/local/mnt/works
pace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_i
mages/core/systemdrivers/tlmm/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.
2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/wiredconnectivit
y/qhsusb/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAA
NAZB-1_20161208_043404/b/boot_images/core/wiredconnectivity/qusb/inc -I/local/m
nt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/
b/boot_images/core/securemsm/cryptodrivers/ce/shared/inc -I/local/mnt/workspace
/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_image
s/core/securemsm/cryptodrivers/ce/test/inc -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securem
sm/cryptodrivers/prng/shared/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptod
rivers/prng/test/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/cryptodrivers/prng/
shared/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANA
ZB-1_20161208_043404/b/boot_images/core/api/securemsm/secboot -I/local/mnt/work
space/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_
images/core/api/securemsm/seccfg -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/securemsm/secmath
/shared/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAAN
AZB-1_20161208_043404/b/boot_images/core/securemsm/fuseprov/chipset/msm8909/inc
 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161
208_043404/b/boot_images/core/hwengines/mhi -I/local/mnt/workspace/CRMBuilds/BO
OT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/hwengi
nes/pcie --list=/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAA
ANAZB-1_20161208_043404/b/boot_images/core/boot/secboot3/hw/build/sbl1/Cortex-A
7/WAATANAZ/sys_debug.o.lst --sitelicense /local/mnt/workspace/CRMBuilds/BOOT.BF
.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/secboo
t3/hw/build/sbl1/Cortex-A7/WAATANAZ/sys_debug.o.i
