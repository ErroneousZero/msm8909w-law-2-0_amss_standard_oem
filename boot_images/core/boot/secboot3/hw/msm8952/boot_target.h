#ifndef _BOOT_TARGET_H
#define _BOOT_TARGET_H

/*===========================================================================

                                boot_target
                                Header File

GENERAL DESCRIPTION
  This header file contains target specific declarations and definitions

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None
  
Copyright 2014 by Qualcomm Technologies, Inc.  All Rights Reserved.
============================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

This section contains comments describing changes made to this file.
Notice that changes are listed in reverse chronological order.

  $Header: //components/rel/boot.bf/3.1.2.c3/boot_images/core/boot/secboot3/hw/msm8952/boot_target.h#1 $
  $DateTime: 2015/09/01 00:30:35 $ 
  $Author: pwbldsvc $

when       who          what, where, why
--------   --------     ----------------------------------------------------------
05/21/14   lm           Added common Macro's for APCS_ALIAS1_APSS_CFG module
04/23/14   ck           Added QFPROM read only block size
12/09/13   ck           Updated FUSE0_DISABLE to 8916 specs
10/22/13   ck           Removed DISABLE_REMAPPER macro since it does not exist on 8916
10/18/13   ck           Cleaned up macro names relating to SBL1 boot logging
05/22/13   aus          Added macro for Ram Dump LED
04/23/13   dh           Declare Image$$SBL1_LOG_BUF_SECTION$$Base as an array 
                        to fix klocwork warning
10/08/12   jz           Change APPS_RPM_ADDR_VIEW_OFFSET to 0 since RPM elf image has the correct address
07/10/12   dh           Change EEPROM_DEVICE_ID to DALDEVICEID_FLASH_DEVICE_2
06/07/12   dh           Add SBL1_DLOAD_ZI linker symbol
05/10/12   dh           Add CALCULATE_QTIMER_TIMESTAMP
05/08/12   dh           Add APPS_RPM_ADDR_VIEW_OFFSET
04/05/12   dh           include CUST_H instead of customer.h
03/27/12   dh           Update fuse name 
02/03/12   dh           Update addresses
01/10/12   dh           Add SCL_SBL1_DAL_INTERN_HEAP_BASE as the base of DAL internal heap
8/22/11    dh           Initial reversion
============================================================================*/

/*===========================================================================

                           INCLUDE FILES

===========================================================================*/
#ifndef _ARM_ASM_
#include "boot_comdef.h"
#endif /* _ARM_ASM_ */

#include CUST_H

/*===========================================================================
                      SBL1 SCL DEFINES
===========================================================================*/

#define SBL1_WDOG_RESET_VALUE   0x1

/*---------------------------------------------------------------------------
  Define the destination address and size of the SBL1.
---------------------------------------------------------------------------*/
#define SBL1_CODE_BASE       SCL_SBL1_CODE_BASE
#define SBL1_MAX_IMAGE_SIZE  SCL_SBL1_TOTAL_SIZE


#ifndef _ARM_ASM_
/*---------------------------------------------------------------------------
  Symbols generated by linker with "$" instead of "_".  Symbols are renamed
  in an assembler file to have "_" to make them valid "C" identifiers and
  the symbols are located in the boot ROM.  These symbols define the
  Read/Write data area in boot ROM and RAM, and the Zero Init data area in
  RAM.  Base addresses and length in bytes are given.
---------------------------------------------------------------------------*/
extern uint32  Load$$SBL1_INDIRECT_VEC_TBL$$Base;
extern uint32  Image$$SBL1_INDIRECT_VEC_TBL$$Base;
extern uint32  Image$$SBL1_INDIRECT_VEC_TBL$$Length;
extern uint32  Load$$SBL1_DATA_RW$$Base;
extern uint32  Image$$SBL1_DATA_RW$$Base;
extern uint32  Image$$SBL1_DATA_RW$$Length;
extern uint32  Image$$SBL1_DATA_ZI$$Base;
extern uint32  Image$$SBL1_DATA_ZI$$ZI$$Length;
extern uint32  Image$$SBL1_DDR_ZI$$Base;
extern uint32  Image$$SBL1_DDR_ZI$$ZI$$Length;

extern uint32  Image$$SBL1_DLOAD_ZI$$Base;
extern uint32  Image$$SBL1_DLOAD_ZI$$ZI$$Length;

extern uint32  Image$$SBL1_LOG_BUF_SECTION$$Base[];
extern uint32  Image$$SBL1_LOG_META_INFO_SECTION$$Base;
#endif /* _ARM_ASM_ */


#define BOOT_FLASH_TRANS_MAX_INSTANCES 1

/*---------------------------------------------------------------------------
  Define the SBL page table base address and size, it's used by both SBL2 and 3  
---------------------------------------------------------------------------*/
//#define SCL_SBL_PAGE_TABLE_BASE  (SCL_SBL2_STACK_BASE-SCL_SBL2_STACK_SIZE)
//#define SCL_SBL_PAGE_TABLE_SIZE  0x6000


/*===========================================================================
                      QDST DEFINES
===========================================================================*/ 
/*Use chip hw id for MSM part value. This would simply preparation for OEM pk
  hash auth Test case. With the change, the same QDST signed image can be used
  to verify OEM pk hash authentication*/
#define BOOT_MSM_PART  0x006B20E1
#define BOOT_MSM_HW_ID  (((uint64)BOOT_MSM_PART) << 32)


/*===========================================================================
  Definitions of address range where IMEM exists on the MSM.
===========================================================================*/
#define IMEM_RANGE_START_ADDR SCL_IMEM_BASE
#define IMEM_RANGE_END_ADDR   (SCL_IMEM_BASE+SCL_IMEM_SIZE)


/*===========================================================================
  Definition for the end address of SDRAM on the MSM.
===========================================================================*/
#define RANGE_END_ADDR        0xFFFFFFFFUL


/*===========================================================================
                      BOOT LOGGER DEFINES
===========================================================================*/

/**
 * Time out value for outputing a single char to jtag terminal.
 * 
 * Value used by rpm jtag. moved it to this target specific file
 * from common boot_arm7.c Existing value does not ensure proper
 * output to jtag and has to be updated for 8960
 * JTAG_TERM_TIME_OUT renamed to RPM_JTAG_TERM_TIME_OUT as krait
 * uses similar define.
 */
#define RPM_JTAG_TERM_TIME_OUT       0x500

/*=========================================================================== 
  The clock that is used to track time passing.
===========================================================================*/
#define TIMETICK_CLK  MPM2_MPM_SLEEP_TIMETICK_COUNT_VAL 

/*=========================================================================== 
  Clock frequency is 32.768 KHz
  The number of microseconds per cycle is:
  1 / (32.768 KHz) = 30.52ms
  The int part is 30
===========================================================================*/
#define TIMETICK_CLK_SPEED_INT       30

/*=========================================================================== 
  MPM Sleep Clock frequency is 32.768 KHz
  The number of microseconds per cycle is:
  1 / (32.768 KHz) = 30.52ms
  we round 0.52 to 1/2.
  Timestamp is calculated as : count*int + count/2
  Floating point arithmetic should not be used to avoid error and speed penalty
===========================================================================*/
#define CALCULATE_TIMESTAMP(COUNT) \
  ((COUNT)*TIMETICK_CLK_SPEED_INT + (COUNT)/2)

/*=========================================================================== 
  Qtimer Clock frequency is CXO 19.2MHz
  The number of microseconds per cycle 1/19.2
===========================================================================*/
#define CALCULATE_QTIMER_TIMESTAMP(COUNT) \
  ((COUNT)/19.2)
  
/*
  we are using 32 bits timestamp, the max counter value is:
  0xFFFFFFFF/31 = 138547732
  after this value the timestamp will overflow
*/
#define LOG_MAX_COUNT_VAL  138547732


/*---------------------------------------------------------------------------
  Start address of boot logger's logging buffer, defined by scl
---------------------------------------------------------------------------*/
#define SBL1_LOG_BUF_START  (&Image$$SBL1_LOG_BUF_SECTION$$Base)


/*---------------------------------------------------------------------------
  Size of boot logger's logging buffer, define by .builds
---------------------------------------------------------------------------*/
#define SBL1_LOG_BUF_SIZE  SCL_SBL1_BOOT_LOG_BUF_SIZE

/*---------------------------------------------------------------------------
  Start address of boot logger's meta info structure, defined by scl
  ---------------------------------------------------------------------------*/
#define SBL1_LOG_META_INFO_START  (&Image$$SBL1_LOG_META_INFO_SECTION$$Base)

/*---------------------------------------------------------------------------
  Size of boot logger's meta info structure, define by .builds
  ---------------------------------------------------------------------------*/
#define SBL1_LOG_META_INFO_SIZE  SCL_SBL1_BOOT_LOG_META_INFO_SIZE


/*OEM fuse All jtag debug disable status
  1 if OEM all jtag debug is disabled, 0 otherwise*/
#define FUSE0_DISABLE  (HWIO_INM(OEM_CONFIG1,  \
                                 HWIO_FMSK(OEM_CONFIG1, ALL_DEBUG_DISABLE)))

/*QC fuse RPM jtag debug disable status
  1 if QC RPM jtag debug is disabled, 0 otherwise
  */
#define FUSE1_DISABLE  (HWIO_INM(FEATURE_CONFIG2, \
                                 HWIO_FMSK(FEATURE_CONFIG2, RPM_DBGEN_DISABLE)))

/*OEM fuse RPM jtag debug disable status
  1 if OEM RPM jtag debug is disabled, 0 otherwise*/
#define FUSE2_DISABLE  (HWIO_INM(OEM_CONFIG0, \
                                 HWIO_FMSK(OEM_CONFIG0, RPM_DBGEN_DISABLE)))

/*QC fuse APPS jtag debug disable status     
  1 if QC APPS jtag debug is disabled, 0 otherwise*/
#define FUSE3_DISABLE  (HWIO_INM(FEATURE_CONFIG2, \
                                 HWIO_FMSK(FEATURE_CONFIG2, QC_APPS_DBGEN_DISABLE)))

/*OEM fuse APPS jtag debug disable status
  1 if OEM APPS jtag debug is disabled, 0 otherwise*/
#define FUSE4_DISABLE  (HWIO_INM(OEM_CONFIG1, \
                                 HWIO_FMSK(OEM_CONFIG1, APPS_DBGEN_DISABLE)))

/*QC fuse APPS secure jtag debug disable status
  1 if QC APPS secure jtag debug is disabled, 0 otherwise*/
#define FUSE5_DISABLE  (HWIO_INM(FEATURE_CONFIG2, \
                                 HWIO_FMSK(FEATURE_CONFIG2, QC_APPS_SPIDEN_DISABLE)))

/*OEM fuse APPS secure jtag debug disable status
  1 if OEM APPS secure jtag debug is disabled, 0 otherwise*/
#define FUSE6_DISABLE  (HWIO_INM(OEM_CONFIG1,  \
                                 HWIO_FMSK(OEM_CONFIG1, APPS_SPNIDEN_DISABLE)))


/* OEM fuse disables the DAP non-invasive debug capabilities */                                
#define DAP_FUSE0_DISABLE  (HWIO_INM(OEM_CONFIG1,  \
                                 HWIO_FMSK(OEM_CONFIG1, DAP_NIDEN_DISABLE)))   
                                 
/* QC fuse disables the DAP non-invasive debug capabilities */                                
#define DAP_FUSE1_DISABLE  (HWIO_INM(FEATURE_CONFIG2,  \
                                 HWIO_FMSK(FEATURE_CONFIG2, QC_DAP_NIDEN_DISABLE)))   
                                 
/* OEM fuse disables the DAP Secure non-invasive debug capabilities.*/                              
#define DAP_FUSE2_DISABLE  (HWIO_INM(OEM_CONFIG1,  \
                                 HWIO_FMSK(OEM_CONFIG1, DAP_SPNIDEN_DISABLE)))
                                 
/* QC fuse disables the DAP Secure non-invasive debug capabilities.*/                              
#define DAP_FUSE3_DISABLE  (HWIO_INM(FEATURE_CONFIG2,  \
                                 HWIO_FMSK(FEATURE_CONFIG2, QC_DAP_SPNIDEN_DISABLE)))   
                                 
/* OEM fuse disables the Disables the DAP invasive debug capabilities.*/
#define DAP_FUSE4_DISABLE  (HWIO_INM(OEM_CONFIG1,  \
                                 HWIO_FMSK(OEM_CONFIG1, DAP_DBGEN_DISABLE))) 
                                 
/* QC fuse disables the Disables the DAP invasive debug capabilities.*/
#define DAP_FUSE5_DISABLE  (HWIO_INM(FEATURE_CONFIG2,  \
                                 HWIO_FMSK(FEATURE_CONFIG2, QC_DAP_DBGEN_DISABLE)))                                  
                             
                                 
/*Macro to check if any RPM jtag debug feature is disabled
  return 1 if any RPM jtag debug is disabled.
  return 0 if it is enabled
*/
#define DEBUG_DISABLED_RPM (FUSE0_DISABLE| \
                            FUSE1_DISABLE| \
                            FUSE2_DISABLE)

/*Macro to check if any apps jtag debug feature is disabled
  return 1 if any apps jtag debug is disabled.
  return 0 if it is enabled*/
#define DEBUG_DISABLED_APPS (FUSE0_DISABLE|  \
                             FUSE3_DISABLE|  \
                             FUSE4_DISABLE|  \
                             FUSE5_DISABLE|  \
                             FUSE6_DISABLE)
                             
/* Macro to check if wdog debug image disable fuses are blown 
   return 1 if any one is blown thus disable wdog debug image loading
   return 0 if none is blown thus enable wdog debug image loading */                            
#define DEBUG_DISABLE_WDT  (DAP_FUSE0_DISABLE | \
                            DAP_FUSE1_DISABLE | \
                            DAP_FUSE2_DISABLE | \
                            DAP_FUSE3_DISABLE | \
                            DAP_FUSE4_DISABLE | \
                            DAP_FUSE5_DISABLE)


/*===========================================================================
                      QFPROM DRIVER DEFINES
===========================================================================*/ 
/* Mark QFPROM region as read only: 24KB from SECURITY_CONTROL_BASE */
#define QFPROM_READONLY_BLOCK_SIZE	0x6000


/* SFPB clock defines for Qfprom Driver in khz.
   Clock runs at 64Mhz in sbl3 for 8960. This clock is used
   in Qfprom driver to compute correct timer value.
*/
#define BOOT_QFPROM_SFPB_CLOCK  (0x40 * 1000)


/* EEPROM' DAL device ID */                             
#define EEPROM_DEVICE_ID DALDEVICEID_FLASH_DEVICE_2

/* Macro for EEPROM CDT parsing error action, in this target we go to error handler*/
#define CDT_BL_ERROR(BL_ERR_CODE) \
        BL_VERIFY( FALSE, BL_ERR_CODE );

/* In RPM elf image the entry point is in RPM address space so offset is set to 0 */  
#define APPS_RPM_ADDR_VIEW_OFFSET 0x0

/* Define the SD Ram Dump Indicator LED */
#define RAM_DUMP_LED  PM_RGB_SEGMENT_B

/* Macro's for APCS_ALIAS1_APSS_CFG module */
#define APCS_MODULE_SEC_START_ADDR_BMSK	HWIO_APCS_ALIAS1_BOOT_START_ADDR_SEC_START_ADDR_BMSK
#define APCS_MODULE_SEC_OUT	HWIO_APCS_ALIAS1_BOOT_START_ADDR_SEC_OUT
#define APCS_MODULE_SEC_REMAP_EN_BMSK	HWIO_APCS_ALIAS1_BOOT_START_ADDR_SEC_REMAP_EN_BMSK


#endif  /* _BOOT_TARGET_H */
