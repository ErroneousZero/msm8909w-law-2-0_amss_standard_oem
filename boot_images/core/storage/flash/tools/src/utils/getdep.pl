#! /usr/bin/env perl

#############################################################################
#
#                             G E T D E P
#
# GENERAL DESCRIPTION
#   Process the output of the C preprocessor into a nice list of dependencies.
#   The -M option on tcc works poorly, and can't handle an assembly file.
#   The first argument is the name of our object file.
#   The second object is the name of our source (needed for <stdin>
#   replacement).
#
# INVOCATION
#   perl getdep.pl file.o file.c
#
#
# Copyright (c) 2008-2009 Qualcomm Incorporated. 
#  All Rights Reserved.
#  Qualcomm Confidential and Proprietary
#===================================================================
#===================================================================
#                          EDIT HISTORY FOR MODULE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
#  $Header: //components/rel/boot.bf/3.1.2.c3/boot_images/core/storage/flash/tools/src/utils/getdep.pl#1 $ $DateTime: 2015/09/01 00:30:35 $ $Author: pwbldsvc $
#  
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 10/29/08    mm      Initial version
#============================================================================*/
die "Usage: perl getdep.pl file.o file.c\n"
    unless $#ARGV == 1;

$object = $ARGV[0];
$source = $ARGV[1];

# The object is probably of the form 'XXnnnn\name.o'.  Fix this to be
# '$(TARGETDIR)\name.o'.
$object =~ s/^[A-Z0-9a-z]+\\/\$\(TARGETDIR\)\\/;

%deps = ();

while (<STDIN>) {
  # Process lines that match "#line <num> "file"
  next unless (/^\s*\#line\s+\d+\s+\"(.*)\"/);

  # Fix up a few names.
  $name = $1;

  # replace "<stdin>" with the name of the source file
  $name =~ s/\<stdin\>/$source/;

  #print $name, "\n" if $name !~ /$source/;
  
  # Save the dependencies excluding the source file
  $deps{$name} = 1 if $name !~ /$source/;
}

# Tricky stuff.  Need to remove any dependencies on .h files that are not
# present in this directory.  This indicates that it probably came
# from a -I.
#
# This is needed due to stupidity in the ARM compiler to not output
# paths on the #line directives.

# Print out the dependencies, with the C source being the first.

print "$object: $source\n";

for $name (sort keys %deps) {

  # To really remove .h files that are not in this directory, we must
  # strip $name of its path.  This is because statements such as
  # #include "string.h" preprocesses to
  # #include "c:\apps\ads100\INCLUDE\string.h" and the -f $name test
  # fails because $name becomes "c:\apps\ads100\INCLUDE\string.h" and this
  # file exists.  This happens in cases where source files use
  # #include "string.h" instead of #include <string.h> or in *_.c sources
  # (preprocessed files generated by csplit.pl) where the
  # #include <string.h> in the original source file preprocesses to
  # #include "string.h" which in turn preprocesses to
  # #include "c:\apps\ads100\INCLUDE\string.h."
#  $name =~ s/.*\\(\w+\.h)/$1/i;
  
  # Skip the line if it has an absolute path.
  # i.e. c:/Apps/RVDS210/RVCT/Data/2.1/328/include/windows/string.h
  # but will look like this:
  #    C:\\Apps\\RVDS221\\RVCT\\Data\\2.2\\503\\include\\windows\\string.h
  next if ($name =~ /^[a-zA-Z]:/);
    
  # Strip the drive letter and/or any leading '\' from the path
  # if it is present.
  if (($name =~ /^\s*[a-zA-Z]:\\(.*\\\w+\.h)\s*$/) ||
      ($name =~ /^\s*\\(.*\\\w+\.h)\s*$/))
  {
    $name = $1;
  }

  # Does the file exist in this directory tree?
  next unless -f $name;
  
  print "$object: $name\n";
}

###########################################################################
# End of Perl script.
###########################################################################
