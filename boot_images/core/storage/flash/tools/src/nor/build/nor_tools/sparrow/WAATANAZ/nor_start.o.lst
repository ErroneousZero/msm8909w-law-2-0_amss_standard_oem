


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       ================
    2 00000000         ;  FILE:        nor_start.s
    3 00000000         ;
    4 00000000         ;  SERVICES:    
    5 00000000         ;   This module contains the entry point for our Flash P
                       rogramming Plug-In 
    6 00000000         ;   for Lauterbach JTAG/ICD TRACE32. All it does is setu
                       ps stack and calls
    7 00000000         ;   our main 'C' function "main_c".
    8 00000000         ;
    9 00000000         ;   The C function does return and expects a breakpoint 
                       there. This is the
   10 00000000         ;   case because the FLASH programming plug-in specifica
                       tion requires it.
   11 00000000         ;   The break-point is used to give control back to TRAC
                       E32 Debugger so 
   12 00000000         ;   that it may fill up the buffer and call our plug-in 
                       again. This cycle
   13 00000000         ;   continues until FLASH programming is complete.
   14 00000000         ; DESCRIPTION
   15 00000000         ;   This file has the main functions used for programmin
                       g the flash
   16 00000000         ;
   17 00000000         ; Copyright (c) 2010, 2014 Qualcomm Technologies, Inc.
   18 00000000         ; All Rights Reserved.
   19 00000000         ; QUALCOMM Confidential and Proprietary
   20 00000000         ;=======================================================
                       ================*/
   21 00000000         ;=======================================================
                       ============
   22 00000000         ;
   23 00000000         ;                       EDIT HISTORY FOR FILE
   24 00000000         ;
   25 00000000         ;   This section contains comments describing changes ma
                       de to the
   26 00000000         ;   module. Notice that changes are listed in reverse ch
                       ronological
   27 00000000         ;   order.
   28 00000000         ;
   29 00000000         ;   $Header: 
   30 00000000         ;
   31 00000000         ; when         who     what, where, why
   32 00000000         ; ----------   ---     ---------------------------------
                       -------------
   33 00000000         ; 09/16/14     sb      Move cache init to cmm 
   34 00000000         ; 09/10/10     sv      Initial version
   35 00000000         ;=======================================================
                       ===========*/
   36 00000000         ;
   37 00000000         ; CPSR Control Masks 
   38 00000000 00000040 
                       PSR_Fiq_Mask
                               EQU              0x40
   39 00000000 00000080 
                       PSR_Irq_Mask
                               EQU              0x80
   40 00000000         ; Processor mode definitions 
   41 00000000 00000013 



ARM Macro Assembler    Page 2 


                       PSR_Supervisor
                               EQU              0x13
   42 00000000         ;
   43 00000000         ; Stack sizes
   44 00000000 00001000 
                       SVC_Stack_Size
                               EQU              0x1000
   45 00000000         ;
   46 00000000                 IMPORT           main_c
   47 00000000                 IMPORT           memory_init
   48 00000000                 IMPORT           svc_stack
   49 00000000                 IMPORT           zero_init_needed
   50 00000000                 EXPORT           __main
   51 00000000                 PRESERVE8
   52 00000000                 AREA             StartHere, CODE, READONLY
   53 00000000                 CODE32
   54 00000000         __main
   55 00000000                 ENTRY
   56 00000000         ;=======================================================
                       ================
   57 00000000         ; MACRO mmu_set_default_cfg
   58 00000000         ; ARGS
   59 00000000         ;   NONE
   60 00000000         ; DESCRIPTION
   61 00000000         ;   Update the mmu control register with the read-modify
                       -write sequence
   62 00000000         ;   bit [0]:   0 = MMU disabled
   63 00000000         ;   bit [1]:   0 = Strict alignment fault checking disab
                       led
   64 00000000         ;   bit [3]:   1 = Write buffer enabled (for ARM9)
   65 00000000         ;   bit [6:4]: Should Be One
   66 00000000         ;   bit [13]:  1 = High exception vectors selected.
   67 00000000         ;   bit [16]:  Should Be One
   68 00000000         ;   bit [18]:  Should Be One
   69 00000000         ;   bit [22]:  1 = unaligned data access support enabled
                        (for ARM11)
   70 00000000         ;=======================================================
                       ================
   71 00000000                 MACRO
   72 00000000                 mmu_set_default_cfg
   73 00000000                 MRC              p15, 0, r0, c1, c0, 0 ; read co
                                                            ntrol register
   74 00000000                 LDR              r1, = 0x00452078
   75 00000000                 ORR              r0, r0, r1
   76 00000000                 MCR              p15, 0, r0, c1, c0, 0 ; write c
                                                            ontrol register
   77 00000000                 MEND
   78 00000000         ;=======================================================
                       ================
   79 00000000         ;=======================================================
                       ================
   80 00000000         ; MACRO mmu_enable_i_cache
   81 00000000         ; ARGS
   82 00000000         ;  NONE
   83 00000000         ; DESCRIPTION
   84 00000000         ;  Enables the I Cache
   85 00000000         ;  Does a read modify write, so no other bits in the con
                       trol register a
   86 00000000         ;  affected



ARM Macro Assembler    Page 3 


   87 00000000         ;=======================================================
                       ================
   88 00000000                 MACRO
   89 00000000                 mmu_enable_i_cache
   90 00000000                 mrc              p15, 0 , r0, c1, c0, 0
   91 00000000                 orr              r0, r0, # (1 << 12 )
   92 00000000                 mcr              p15, 0 , r0, c1, c0, 0
   93 00000000                 MEND
   94 00000000         ;=======================================================
                       ================
   95 00000000         ;
   96 00000000         ; Supervisor Mode
   97 00000000         ; Set up the Supervisor stack pointer.
   98 00000000 E321F0D3        msr              CPSR_c, #PSR_Supervisor:OR:PSR_
Irq_Mask:OR:PSR_Fiq_Mask
   99 00000004 E59FD050        ldr              r13, =svc_stack+SVC_Stack_Size
  100 00000008         ; ======================================================
                       ================
  101 00000008         ; Enable the instruction cache
  102 00000008         ; ======================================================
                       ================
  103 00000008         ;   mmu_set_default_cfg
  104 00000008         ;   mmu_enable_i_cache
  105 00000008         ; ======================================================
                       ================
  106 00000008         ; Initialize memory for C only once
  107 00000008         ;   The test/set of the global variable must be done her
                       e in assembly
  108 00000008         ;   because if we access a global variable in the C func
                       tion, the
  109 00000008         ;   compiler will construct a PUSH/POP of registers and 
                       since we will
  110 00000008         ;   have just zeroed the stack, we will pop zero into R1
                       4 and then
  111 00000008         ;   branch to zero.  With no use of globals in the C fun
                       ction,
  112 00000008         ;   the compiler will generate a bx r14 for the return a
                       nd all will
  113 00000008         ;   work correctly.
  114 00000008         ; ======================================================
                       ================
  115 00000008 E59F2050        ldr              r2, =zero_init_needed
  116 0000000C E5921000        ldr              r1, [r2]
  117 00000010 E3510000        cmp              r1, #0x0
  118 00000014 0A000004        beq              skipmem
  119 00000018 E59F0044        ldr              a1, =memory_init
  120 0000001C E12FFF30        blx              a1
  121 00000020         ; indicate zero init completed
  122 00000020 E59F2038        ldr              r2, =zero_init_needed
  123 00000024 E3A00000        mov              r0, #0x0
  124 00000028 E5820000        str              r0, [r2]
  125 0000002C         ; Enter C code execution
  126 0000002C         skipmem
  127 0000002C E59F0034        ldr              a1, =main_c
  128 00000030 E12FFF30        blx              a1
  129 00000034         ; Software breakpoint code
  130 00000034         ; TRACE32 requires this so that we can hand back the con
                       trol to TRACE32
  131 00000034         ; Debugger when main_c returns



ARM Macro Assembler    Page 4 


  132 00000034 EEDEEEDE 
                       swbp    DCD              0xEEDEEEDE
  133 00000038         ; In case breakpoint above gets clobbered
  134 00000038         hanghere
  135 00000038 EAFFFFFE        b                hanghere
  136 0000003C         ; Terminal emulation entry point for putting a character
                       .
  137 0000003C         ; When called, it will put or get a charactr from the
  138 0000003C         ; JTAG debugger terminal emulation window.  These functi
                       on
  139 0000003C         ; are incompatible with the JTAG debugger FLASH.* functi
                       ons
  140 0000003C         ; and will cause the debugger to hang if both are used.
  141 0000003C                 CODE16
  142 0000003C                 EXPORT           term_put
  143 0000003C                 ALIGN
  144 0000003C         term_put
  145 0000003C 4778            bx               pc
  146 0000003E 00 00           DCW              0x0         ; Just to suppress 
                                                            a warning
  147 00000040                 CODE32
  148 00000040                 ALIGN
  149 00000040         term_put_arm
  150 00000040 E3A02202        ldr              r2, =0x20000000 ; bit 29
  151 00000044         put_again_arm
  152 00000044 EE101E11        mrc              p14, 0, r1, c0, c1 ; read debug
                                                             status and control
                                                             register
  153 00000048 E0011002        and              r1, r1, r2  ; check if wDTR is 
                                                            ready to receive da
                                                            ta
  154 0000004C E3510000        cmp              r1, #0
  155 00000050 1AFFFFFB        bne              put_again_arm
  156 00000054 EE000E15        mcr              p14, 0, r0, c0, c5 ; write the 
                                                            write data transfer
                                                             register
  157 00000058 E12FFF1E        bx               lr
  158 0000005C                 END
              00001000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --dwarf2 --keep --cpu=7-A.security --apcs=/noswst/interwo
rk --no_unaligned_access -o/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-0001
2-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/tools/src/n
or/build/nor_tools/sparrow/WAATANAZ/nor_start.o -I/local/mnt/workspace/CRMBuild
s/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/st
orage/flash/tools/src/nor/build -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.
c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/build/cust -I. -I/local
/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_04340
4/b/boot_images/core/api/dal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-
00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/boot -I/local/mnt
/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/
boot_images/core/api/boot/qfprom -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/services -I/l
ocal/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_0
43404/b/boot_images/core/api/storage -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3
.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/systemdri
vers -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_2



ARM Macro Assembler    Page 5 


0161208_043404/b/boot_images/core/api/systemdrivers/pmic -I/local/mnt/workspace
/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_image
s/core/api/systemdrivers/hwio/msm8909 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.
3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/api/kernel/l
ibstd -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_
20161208_043404/b/boot_images/core/dal/src -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/dal/con
fig -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20
161208_043404/b/boot_images/core/boot/secboot3/src -I/local/mnt/workspace/CRMBu
ilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core
/boot/ddr/common -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909W
AAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/msm8909w -I/local/mnt
/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/
boot_images/core/boot/ddr/hw/phy -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2
.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/boot/ddr/hw/contr
oller -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_
20161208_043404/b/boot_images/core/boot/secboot3/hw/msm8909 -I/local/mnt/worksp
ace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_im
ages/core/services/utils/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-
00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/src/dal
 -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161
208_043404/b/boot_images/core/storage/flash/src/hal -I/local/mnt/workspace/CRMB
uilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/cor
e/storage/flash/tools/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-000
12-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/inc -I/loc
al/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043
404/b/boot_images/core/storage/sdcc/src -I/local/mnt/workspace/CRMBuilds/BOOT.B
F.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/sd
cc/src/hal -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANA
ZB-1_20161208_043404/b/boot_images/core/storage/sdcc/src/bsp -I/local/mnt/works
pace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_i
mages/core/storage/efs/inc -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00
012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/hfat/inc -I/loc
al/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043
404/b/boot_images/core/storage/hotplug/inc -I/local/mnt/workspace/CRMBuilds/BOO
T.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage
/tools/deviceprogrammer_ddr/src/firehose -I/local/mnt/workspace/CRMBuilds/BOOT.
BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/u
fs/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1
_20161208_043404/b/boot_images/core/systemdrivers/tlmm/inc -I/local/mnt/workspa
ce/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_ima
ges/core/systemdrivers/tlmm/src -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.
c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/tool
s/src/nand -I/local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANA
ZB-1_20161208_043404/b/boot_images/core/storage/flash/tools/src/nor -I/local/mn
t/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b
/boot_images/core/storage/flash/tools/src/nor/config_v1 --list=/local/mnt/works
pace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8909WAAAANAZB-1_20161208_043404/b/boot_i
mages/core/storage/flash/tools/src/nor/build/nor_tools/sparrow/WAATANAZ/nor_sta
rt.o.lst --sitelicense /local/mnt/workspace/CRMBuilds/BOOT.BF.3.1.2.c3-00012-M8
909WAAAANAZB-1_20161208_043404/b/boot_images/core/storage/flash/tools/src/nor/b
uild/nor_tools/sparrow/WAATANAZ/nor_start.o.i
